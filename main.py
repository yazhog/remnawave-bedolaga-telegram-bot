import asyncio
import logging
import sys
import os
import signal
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from app.bot import setup_bot
from app.config import settings
from app.database.database import init_db
from app.services.monitoring_service import monitoring_service
from app.services.maintenance_service import maintenance_service
from app.services.payment_service import PaymentService
from app.services.version_service import version_service
from app.external.webhook_server import WebhookServer
from app.external.yookassa_webhook import start_yookassa_webhook_server
from app.external.pal24_webhook import start_pal24_webhook_server, Pal24WebhookServer
from app.database.universal_migration import run_universal_migration
from app.services.backup_service import backup_service
from app.services.reporting_service import reporting_service
from app.localization.loader import ensure_locale_templates
from app.services.system_settings_service import bot_configuration_service
from app.services.external_admin_service import ensure_external_admin_token
from app.services.broadcast_service import broadcast_service
from app.utils.startup_timeline import StartupTimeline


class GracefulExit:
    
    def __init__(self):
        self.exit = False
        
    def exit_gracefully(self, signum, frame):
        logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.exit = True


async def main():
    logging.basicConfig(
        level=getattr(logging, settings.LOG_LEVEL),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(settings.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    timeline = StartupTimeline(logger, "Bedolaga Remnawave Bot")
    timeline.log_banner(
        [
            ("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", settings.LOG_LEVEL),
            ("–†–µ–∂–∏–º –ë–î", settings.DATABASE_MODE),
        ]
    )

    async with timeline.stage(
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π", "üóÇÔ∏è", success_message="–®–∞–±–ª–æ–Ω—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π –≥–æ—Ç–æ–≤—ã"
    ) as stage:
        try:
            ensure_locale_templates()
        except Exception as error:
            stage.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: {error}")
            logger.warning("Failed to prepare locale templates: %s", error)

    killer = GracefulExit()
    signal.signal(signal.SIGINT, killer.exit_gracefully)
    signal.signal(signal.SIGTERM, killer.exit_gracefully)
    
    webhook_server = None
    yookassa_server_task = None
    pal24_server: Pal24WebhookServer | None = None
    monitoring_task = None
    maintenance_task = None
    version_check_task = None
    polling_task = None
    web_api_server = None
    
    summary_logged = False

    try:
        async with timeline.stage(
            "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "üóÑÔ∏è", success_message="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
        ):
            await init_db()

        skip_migration = os.getenv('SKIP_MIGRATION', 'false').lower() == 'true'

        if not skip_migration:
            async with timeline.stage(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "üß¨",
                success_message="–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            ) as stage:
                try:
                    migration_success = await run_universal_migration()
                    if migration_success:
                        stage.success("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        stage.warning(
                            "–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è"
                        )
                        logger.warning(
                            "‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫"
                        )
                except Exception as migration_error:
                    stage.warning(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏")
        else:
            timeline.add_manual_step(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "‚è≠Ô∏è",
                "–ü—Ä–æ–ø—É—â–µ–Ω–æ",
                "SKIP_MIGRATION=true",
            )

        async with timeline.stage(
            "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î",
            "‚öôÔ∏è",
            success_message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
        ) as stage:
            try:
                await bot_configuration_service.initialize()
            except Exception as error:
                stage.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {error}")
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {error}")

        bot = None
        dp = None
        async with timeline.stage("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞", "ü§ñ", success_message="–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω") as stage:
            bot, dp = await setup_bot()
            stage.log("–ö–µ—à –∏ FSM –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")

        monitoring_service.bot = bot
        maintenance_service.set_bot(bot)
        broadcast_service.set_bot(bot)

        from app.services.admin_notification_service import AdminNotificationService

        async with timeline.stage(
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤",
            "üîó",
            success_message="–°–µ—Ä–≤–∏—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã",
        ) as stage:
            admin_notification_service = AdminNotificationService(bot)
            version_service.bot = bot
            version_service.set_notification_service(admin_notification_service)
            stage.log(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–µ—Ä—Å–∏–π: {version_service.repo}")
            stage.log(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version_service.current_version}")
            stage.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        async with timeline.stage(
            "–°–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤",
            "üóÑÔ∏è",
            success_message="–°–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
        ) as stage:
            try:
                backup_service.bot = bot
                settings_obj = await backup_service.get_backup_settings()
                if settings_obj.auto_backup_enabled:
                    await backup_service.start_auto_backup()
                    stage.log(
                        "–ê–≤—Ç–æ–±–µ–∫–∞–ø—ã –≤–∫–ª—é—á–µ–Ω—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª "
                        f"{settings_obj.backup_interval_hours}—á, –∑–∞–ø—É—Å–∫ {settings_obj.backup_time}"
                    )
                else:
                    stage.log("–ê–≤—Ç–æ–±–µ–∫–∞–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                stage.success("–°–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                stage.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")

        async with timeline.stage(
            "–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤",
            "üìä",
            success_message="–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤",
        ) as stage:
            try:
                reporting_service.set_bot(bot)
                await reporting_service.start()
            except Exception as e:
                stage.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

        payment_service = PaymentService(bot)

        async with timeline.stage(
            "–í–Ω–µ—à–Ω—è—è –∞–¥–º–∏–Ω–∫–∞",
            "üõ°Ô∏è",
            success_message="–¢–æ–∫–µ–Ω –≤–Ω–µ—à–Ω–µ–π –∞–¥–º–∏–Ω–∫–∏ –≥–æ—Ç–æ–≤",
        ) as stage:
            try:
                bot_user = await bot.get_me()
                token = await ensure_external_admin_token(
                    bot_user.username,
                    bot_user.id,
                )
                if token:
                    stage.log("–¢–æ–∫–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    stage.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–Ω–µ—à–Ω–µ–π –∞–¥–º–∏–Ω–∫–∏")
            except Exception as error:  # pragma: no cover - –∑–∞—â–∏—Ç–Ω—ã–π –±–ª–æ–∫
                stage.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–π –∞–¥–º–∏–Ω–∫–∏: {error}")
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–π –∞–¥–º–∏–Ω–∫–∏: %s", error)

        webhook_needed = (
            settings.TRIBUTE_ENABLED
            or settings.is_cryptobot_enabled()
            or settings.is_mulenpay_enabled()
        )

        async with timeline.stage(
            "Webhook —Å–µ—Ä–≤–∏—Å—ã",
            "üåê",
            success_message="Webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        ) as stage:
            if webhook_needed:
                enabled_services = []
                if settings.TRIBUTE_ENABLED:
                    enabled_services.append("Tribute")
                if settings.is_mulenpay_enabled():
                    enabled_services.append("Mulen Pay")
                if settings.is_cryptobot_enabled():
                    enabled_services.append("CryptoBot")

                webhook_server = WebhookServer(bot)
                await webhook_server.start()
                stage.log(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(enabled_services)}")
                stage.success("Webhook —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω—ã")
            else:
                stage.skip("Tribute, Mulen Pay –∏ CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        async with timeline.stage(
            "YooKassa webhook",
            "üí≥",
            success_message="YooKassa webhook –∑–∞–ø—É—â–µ–Ω",
        ) as stage:
            if settings.is_yookassa_enabled():
                yookassa_server_task = asyncio.create_task(
                    start_yookassa_webhook_server(payment_service)
                )
                stage.log(
                    f"Endpoint: {settings.WEBHOOK_URL}:{settings.YOOKASSA_WEBHOOK_PORT}{settings.YOOKASSA_WEBHOOK_PATH}"
                )
            else:
                stage.skip("YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        async with timeline.stage(
            "PayPalych webhook",
            "üí≥",
            success_message="PayPalych webhook –∑–∞–ø—É—â–µ–Ω",
        ) as stage:
            if settings.is_pal24_enabled():
                pal24_server = await start_pal24_webhook_server(payment_service)
                stage.log(
                    f"Endpoint: {settings.WEBHOOK_URL}:{settings.PAL24_WEBHOOK_PORT}{settings.PAL24_WEBHOOK_PATH}"
                )
            else:
                stage.skip("PayPalych –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        async with timeline.stage(
            "–°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            "üìà",
            success_message="–°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        ) as stage:
            monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
            stage.log(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: {settings.MONITORING_INTERVAL}—Å")

        async with timeline.stage(
            "–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç",
            "üõ°Ô∏è",
            success_message="–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∞",
        ) as stage:
            if not maintenance_service._check_task or maintenance_service._check_task.done():
                maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
                stage.log(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.MAINTENANCE_CHECK_INTERVAL}—Å")
            else:
                maintenance_task = None
                stage.skip("–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")

        async with timeline.stage(
            "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π",
            "üìÑ",
            success_message="–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–ø—É—â–µ–Ω–∞",
        ) as stage:
            if settings.is_version_check_enabled():
                version_check_task = asyncio.create_task(version_service.start_periodic_check())
                stage.log(
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.VERSION_CHECK_INTERVAL_HOURS}—á"
                )
            else:
                version_check_task = None
                stage.skip("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        async with timeline.stage(
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–µ–±-API",
            "üåê",
            success_message="–í–µ–±-API –∑–∞–ø—É—â–µ–Ω–æ",
        ) as stage:
            if settings.is_web_api_enabled():
                try:
                    from app.webapi import WebAPIServer

                    web_api_server = WebAPIServer()
                    await web_api_server.start()
                    stage.success(
                        f"–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://{settings.WEB_API_HOST}:{settings.WEB_API_PORT}"
                    )
                except Exception as error:
                    stage.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-API: {error}")
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-API: {error}")
            else:
                stage.skip("–í–µ–±-API –æ—Ç–∫–ª—é—á–µ–Ω–æ")

        async with timeline.stage(
            "–ó–∞–ø—É—Å–∫ polling",
            "ü§ñ",
            success_message="Aiogram polling –∑–∞–ø—É—â–µ–Ω",
        ) as stage:
            polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
            stage.log("skip_updates=True")

        webhook_lines = []
        if webhook_needed:
            if settings.TRIBUTE_ENABLED:
                webhook_lines.append(
                    f"Tribute: {settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.TRIBUTE_WEBHOOK_PATH}"
                )
            if settings.is_mulenpay_enabled():
                webhook_lines.append(
                    f"Mulen Pay: {settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.MULENPAY_WEBHOOK_PATH}"
                )
            if settings.is_cryptobot_enabled():
                webhook_lines.append(
                    f"CryptoBot: {settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.CRYPTOBOT_WEBHOOK_PATH}"
                )
        if settings.is_yookassa_enabled():
            webhook_lines.append(
                f"YooKassa: {settings.WEBHOOK_URL}:{settings.YOOKASSA_WEBHOOK_PORT}{settings.YOOKASSA_WEBHOOK_PATH}"
            )
        if settings.is_pal24_enabled():
            webhook_lines.append(
                f"PayPalych: {settings.WEBHOOK_URL}:{settings.PAL24_WEBHOOK_PORT}{settings.PAL24_WEBHOOK_PATH}"
            )

        timeline.log_section(
            "–ê–∫—Ç–∏–≤–Ω—ã–µ webhook endpoints",
            webhook_lines if webhook_lines else ["–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö endpoints"],
            icon="üéØ",
        )

        services_lines = [
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–∫–ª—é—á–µ–Ω' if monitoring_task else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            f"–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω' if maintenance_task else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π: {'–í–∫–ª—é—á–µ–Ω' if version_check_task else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            f"–û—Ç—á–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω' if reporting_service.is_running() else '–û—Ç–∫–ª—é—á–µ–Ω'}",
        ]
        timeline.log_section("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã", services_lines, icon="üìÑ")

        timeline.log_summary()
        summary_logged = True
        
        try:
            while not killer.exit:
                await asyncio.sleep(1)
                
                if yookassa_server_task and yookassa_server_task.done():
                    exception = yookassa_server_task.exception()
                    if exception:
                        logger.error(f"YooKassa webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞...")
                        yookassa_server_task = asyncio.create_task(
                            start_yookassa_webhook_server(payment_service)
                        )
                
                if monitoring_task.done():
                    exception = monitoring_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
                        
                if maintenance_task and maintenance_task.done():
                    exception = maintenance_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
                
                if version_check_task and version_check_task.done():
                    exception = version_check_task.exception()
                    if exception:
                        logger.error(f"–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        if settings.is_version_check_enabled():
                            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π...")
                            version_check_task = asyncio.create_task(version_service.start_periodic_check())
                        
                if polling_task.done():
                    exception = polling_task.exception()
                    if exception:
                        logger.error(f"Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        break
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
        
    finally:
        if not summary_logged:
            timeline.log_summary()
            summary_logged = True
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        if yookassa_server_task and not yookassa_server_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            yookassa_server_task.cancel()
            try:
                await yookassa_server_task
            except asyncio.CancelledError:
                pass
        
        if monitoring_task and not monitoring_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitoring_service.stop_monitoring()
            monitoring_task.cancel()
            try:
                await monitoring_task
            except asyncio.CancelledError:
                pass

        if pal24_server:
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PayPalych webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            await asyncio.get_running_loop().run_in_executor(None, pal24_server.stop)
        
        if maintenance_task and not maintenance_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
            await maintenance_service.stop_monitoring()
            maintenance_task.cancel()
            try:
                await maintenance_task
            except asyncio.CancelledError:
                pass
        
        if version_check_task and not version_check_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π...")
            version_check_task.cancel()
            try:
                await version_check_task
            except asyncio.CancelledError:
                pass

        logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        try:
            await reporting_service.stop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

        logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤...")
        try:
            await backup_service.stop_auto_backup()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")
        
        if polling_task and not polling_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
            polling_task.cancel()
            try:
                await polling_task
            except asyncio.CancelledError:
                pass
        
        if webhook_server:
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            await webhook_server.stop()

        if web_api_server:
            try:
                await web_api_server.stop()
                logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–µ–±-API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-API: {error}")
        
        if 'bot' in locals():
            try:
                await bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
        
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
