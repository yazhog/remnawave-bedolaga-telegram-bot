from typing import List, Optional, Tuple, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.localization.texts import get_texts


def _t(texts, key: str, default: str) -> str:
    """Helper for localized button labels with fallbacks."""
    return texts.t(key, default)


def get_admin_main_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_USERS_SUBSCRIPTIONS", "üë• –Æ–∑–µ—Ä—ã/–ü–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="admin_submenu_users",
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_SERVERS", "üåê –°–µ—Ä–≤–µ—Ä—ã"),
                callback_data="admin_servers",
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_PRICING", "üí∞ –¶–µ–Ω—ã"),
                callback_data="admin_pricing",
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_PROMO_STATS", "üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã/–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_submenu_promo",
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_SUPPORT", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                callback_data="admin_submenu_support",
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_MESSAGES", "üì® –°–æ–æ–±—â–µ–Ω–∏—è"),
                callback_data="admin_submenu_communications",
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_SETTINGS", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                callback_data="admin_submenu_settings",
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAIN_SYSTEM", "üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞"),
                callback_data="admin_submenu_system",
            ),
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")]
    ])


def get_admin_users_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.ADMIN_USERS, callback_data="admin_users"),
            InlineKeyboardButton(text=texts.ADMIN_REFERRALS, callback_data="admin_referrals")
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_SUBSCRIPTIONS, callback_data="admin_subscriptions")
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_promo_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.ADMIN_PROMOCODES, callback_data="admin_promocodes"),
            InlineKeyboardButton(text=texts.ADMIN_STATISTICS, callback_data="admin_statistics")
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_CAMPAIGNS, callback_data="admin_campaigns")
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_PROMO_GROUPS, callback_data="admin_promo_groups")
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_communications_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.ADMIN_MESSAGES, callback_data="admin_messages")
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_COMMUNICATIONS_PROMO_OFFERS", "üéØ –ü—Ä–æ–º–æ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                callback_data="admin_promo_offers"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_COMMUNICATIONS_WELCOME_TEXT", "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"),
                callback_data="welcome_text_panel"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_COMMUNICATIONS_MENU_MESSAGES", "üì¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–Ω—é"),
                callback_data="user_messages_panel"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_support_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUPPORT_TICKETS", "üé´ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
                callback_data="admin_tickets"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUPPORT_AUDIT", "üßæ –ê—É–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"),
                callback_data="admin_support_audit"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUPPORT_SETTINGS", "üõü –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
                callback_data="admin_support_settings"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_settings_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.ADMIN_REMNAWAVE, callback_data="admin_remnawave"),
            InlineKeyboardButton(text=texts.ADMIN_MONITORING, callback_data="admin_monitoring")
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SETTINGS_BOT_CONFIG", "üß© –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"),
                callback_data="admin_bot_config"
            ),
        ],
        [
            InlineKeyboardButton(
                text=texts.t("ADMIN_MONITORING_SETTINGS", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
                callback_data="admin_mon_settings"
            )
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_RULES, callback_data="admin_rules"),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SETTINGS_MAINTENANCE", "üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã"),
                callback_data="maintenance_panel"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SETTINGS_PRIVACY_POLICY", "üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ."),
                callback_data="admin_privacy_policy",
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SETTINGS_PUBLIC_OFFER", "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"),
                callback_data="admin_public_offer",
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SETTINGS_FAQ", "‚ùì FAQ"),
                callback_data="admin_faq",
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_system_submenu_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYSTEM_UPDATES", "üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
                callback_data="admin_updates"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYSTEM_BACKUPS", "üóÑÔ∏è –ë–µ–∫–∞–ø—ã"),
                callback_data="backup_panel"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYSTEM_LOGS", "üßæ –õ–æ–≥–∏"),
                callback_data="admin_system_logs"
            )
        ],
        [InlineKeyboardButton(text=texts.t("ADMIN_REPORTS", "üìä –û—Ç—á–µ—Ç—ã"), callback_data="admin_reports")],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")
        ]
    ])


def get_admin_reports_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REPORTS_PREVIOUS_DAY", "üìÜ –ó–∞ –≤—á–µ—Ä–∞"),
                callback_data="admin_reports_daily"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REPORTS_LAST_WEEK", "üóìÔ∏è –ó–∞ –Ω–µ–¥–µ–ª—é"),
                callback_data="admin_reports_weekly"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REPORTS_LAST_MONTH", "üìÖ –ó–∞ –º–µ—Å—è—Ü"),
                callback_data="admin_reports_monthly"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_panel")]
    ])


def get_admin_report_result_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts.t("REPORT_CLOSE", "‚ùå –ó–∞–∫—Ä—ã—Ç—å"), callback_data="admin_close_report")]
    ])


def get_admin_users_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_ALL", "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                callback_data="admin_users_list"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_SEARCH", "üîç –ü–æ–∏—Å–∫"),
                callback_data="admin_users_search"
            )
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_STATISTICS, callback_data="admin_users_stats"),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_INACTIVE", "üóëÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"),
                callback_data="admin_users_inactive"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTERS", "‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã"),
                callback_data="admin_users_filters"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_users")
        ]
    ])


def get_admin_users_filters_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_BALANCE", "üí∞ –ü–æ –±–∞–ª–∞–Ω—Å—É"),
                callback_data="admin_users_balance_filter"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_TRAFFIC", "üì∂ –ü–æ —Ç—Ä–∞—Ñ–∏–∫—É"),
                callback_data="admin_users_traffic_filter"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_ACTIVITY", "üïí –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
                callback_data="admin_users_activity_filter"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_SPENDING", "üí≥ –ü–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç"),
                callback_data="admin_users_spending_filter"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_PURCHASES", "üõí –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫"),
                callback_data="admin_users_purchases_filter"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USERS_FILTER_CAMPAIGN", "üì¢ –ü–æ –∫–∞–º–ø–∞–Ω–∏–∏"),
                callback_data="admin_users_campaign_filter"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_users")
        ]
    ])


def get_admin_subscriptions_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUBSCRIPTIONS_ALL", "üì± –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="admin_subs_list"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUBSCRIPTIONS_EXPIRING", "‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ"),
                callback_data="admin_subs_expiring"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SUBSCRIPTIONS_COUNTRIES", "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏"),
                callback_data="admin_subs_countries"
            )
        ],
        [
            InlineKeyboardButton(text=texts.ADMIN_STATISTICS, callback_data="admin_subs_stats")
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_users")
        ]
    ])


def get_admin_promocodes_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODES_ALL", "üé´ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"),
                callback_data="admin_promo_list"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODES_CREATE", "‚ûï –°–æ–∑–¥–∞—Ç—å"),
                callback_data="admin_promo_create"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODES_GENERAL_STATS", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_promo_general_stats"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_promo")
        ]
    ])


def get_admin_campaigns_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGNS_LIST", "üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π"),
                callback_data="admin_campaigns_list"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGNS_CREATE", "‚ûï –°–æ–∑–¥–∞—Ç—å"),
                callback_data="admin_campaigns_create"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGNS_GENERAL_STATS", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_campaigns_stats"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_promo")
        ]
    ])


def get_campaign_management_keyboard(
    campaign_id: int, is_active: bool, language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    status_text = (
        _t(texts, "ADMIN_CAMPAIGN_DISABLE", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å")
        if is_active
        else _t(texts, "ADMIN_CAMPAIGN_ENABLE", "üü¢ –í–∫–ª—é—á–∏—Ç—å")
    )

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=_t(texts, "ADMIN_CAMPAIGN_STATS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    callback_data=f"admin_campaign_stats_{campaign_id}",
                ),
                InlineKeyboardButton(
                    text=status_text,
                    callback_data=f"admin_campaign_toggle_{campaign_id}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text=_t(texts, "ADMIN_CAMPAIGN_EDIT", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                    callback_data=f"admin_campaign_edit_{campaign_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text=_t(texts, "ADMIN_CAMPAIGN_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                    callback_data=f"admin_campaign_delete_{campaign_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text=_t(texts, "ADMIN_BACK_TO_LIST", "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É"),
                    callback_data="admin_campaigns_list"
                )
            ],
        ]
    )


def get_campaign_edit_keyboard(
    campaign_id: int,
    *,
    is_balance_bonus: bool,
    language: str = "ru",
) -> InlineKeyboardMarkup:
    texts = get_texts(language)

    keyboard: List[List[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGN_EDIT_NAME", "‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ"),
                callback_data=f"admin_campaign_edit_name_{campaign_id}",
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGN_EDIT_START", "üîó –ü–∞—Ä–∞–º–µ—Ç—Ä"),
                callback_data=f"admin_campaign_edit_start_{campaign_id}",
            ),
        ]
    ]

    if is_balance_bonus:
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=_t(texts, "ADMIN_CAMPAIGN_BONUS_BALANCE", "üí∞ –ë–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å"),
                    callback_data=f"admin_campaign_edit_balance_{campaign_id}",
                )
            ]
        )
    else:
        keyboard.extend(
            [
                [
                    InlineKeyboardButton(
                        text=_t(texts, "ADMIN_CAMPAIGN_DURATION", "üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
                        callback_data=f"admin_campaign_edit_sub_days_{campaign_id}",
                    ),
                    InlineKeyboardButton(
                        text=_t(texts, "ADMIN_CAMPAIGN_TRAFFIC", "üåê –¢—Ä–∞—Ñ–∏–∫"),
                        callback_data=f"admin_campaign_edit_sub_traffic_{campaign_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text=_t(texts, "ADMIN_CAMPAIGN_DEVICES", "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"),
                        callback_data=f"admin_campaign_edit_sub_devices_{campaign_id}",
                    ),
                    InlineKeyboardButton(
                        text=_t(texts, "ADMIN_CAMPAIGN_SERVERS", "üåç –°–µ—Ä–≤–µ—Ä—ã"),
                        callback_data=f"admin_campaign_edit_sub_servers_{campaign_id}",
                    ),
                ],
            ]
        )

    keyboard.append(
        [
            InlineKeyboardButton(
                text=texts.BACK, callback_data=f"admin_campaign_manage_{campaign_id}"
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_campaign_bonus_type_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGN_BONUS_BALANCE", "üí∞ –ë–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å"),
                callback_data="campaign_bonus_balance"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CAMPAIGN_BONUS_SUBSCRIPTION", "üì± –ü–æ–¥–ø–∏—Å–∫–∞"),
                callback_data="campaign_bonus_subscription"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_campaigns")
        ]
    ])


def get_promocode_management_keyboard(promo_id: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_EDIT", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                callback_data=f"promo_edit_{promo_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_TOGGLE", "üîÑ –°—Ç–∞—Ç—É—Å"),
                callback_data=f"promo_toggle_{promo_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_STATS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data=f"promo_stats_{promo_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                callback_data=f"promo_delete_{promo_id}"
            )
        ],
        [
            InlineKeyboardButton(text=_t(texts, "ADMIN_BACK_TO_LIST", "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É"), callback_data="admin_promo_list")
        ]
    ])


def get_admin_messages_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MESSAGES_ALL_USERS", "üì® –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
                callback_data="admin_msg_all"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MESSAGES_BY_SUBSCRIPTIONS", "üéØ –ü–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"),
                callback_data="admin_msg_by_sub"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MESSAGES_BY_CRITERIA", "üîç –ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"),
                callback_data="admin_msg_custom"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MESSAGES_HISTORY", "üìã –ò—Å—Ç–æ—Ä–∏—è"),
                callback_data="admin_msg_history"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_communications")
        ]
    ])


def get_admin_monitoring_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_START", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_start"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_STOP", "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
                callback_data="admin_mon_stop"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_STATUS", "üìä –°—Ç–∞—Ç—É—Å"),
                callback_data="admin_mon_status"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_LOGS", "üìã –õ–æ–≥–∏"),
                callback_data="admin_mon_logs"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_SETTINGS_BUTTON", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                callback_data="admin_mon_settings"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_settings")
        ]
    ])


def get_admin_remnawave_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_SYSTEM_STATS", "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_rw_system"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_MANAGE_NODES", "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏"),
                callback_data="admin_rw_nodes"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_SYNC", "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                callback_data="admin_rw_sync"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_MANAGE_SQUADS", "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–∞–º–∏"),
                callback_data="admin_rw_squads"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_MIGRATION", "üöö –ü–µ—Ä–µ–µ–∑–¥"),
                callback_data="admin_rw_migration"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_REMNAWAVE_TRAFFIC", "üìà –¢—Ä–∞—Ñ–∏–∫"),
                callback_data="admin_rw_traffic"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_settings")
        ]
    ])


def get_admin_statistics_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_USERS", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                callback_data="admin_stats_users"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_SUBSCRIPTIONS", "üì± –ü–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="admin_stats_subs"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_REVENUE", "üí∞ –î–æ—Ö–æ–¥—ã"),
                callback_data="admin_stats_revenue"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_REFERRALS", "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞"),
                callback_data="admin_stats_referrals"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_SUMMARY", "üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞"),
                callback_data="admin_stats_summary"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_promo")
        ]
    ])


def get_user_management_keyboard(user_id: int, user_status: str, language: str = "ru", back_callback: str = "admin_users_list") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    keyboard = [
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_BALANCE", "üí∞ –ë–∞–ª–∞–Ω—Å"),
                callback_data=f"admin_user_balance_{user_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_SUBSCRIPTION_SETTINGS", "üì± –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
                callback_data=f"admin_user_subscription_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=texts.ADMIN_USER_PROMO_GROUP_BUTTON,
                callback_data=f"admin_user_promo_group_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_STATISTICS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data=f"admin_user_statistics_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_TRANSACTIONS", "üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
                callback_data=f"admin_user_transactions_{user_id}"
            )
        ]
    ]

    if user_status == "active":
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_BLOCK", "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"),
                callback_data=f"admin_user_block_{user_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                callback_data=f"admin_user_delete_{user_id}"
            )
        ])
    elif user_status == "blocked":
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_UNBLOCK", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"),
                callback_data=f"admin_user_unblock_{user_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                callback_data=f"admin_user_delete_{user_id}"
            )
        ])
    elif user_status == "deleted":
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_USER_ALREADY_DELETED", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω"),
                callback_data="noop"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data=back_callback)
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_promo_group_keyboard(
    promo_groups: List[Tuple[Any, int]],
    user_id: int,
    current_group_id: Optional[int],
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)

    keyboard: List[List[InlineKeyboardButton]] = []

    for group, members_count in promo_groups:
        prefix = "‚úÖ" if current_group_id is not None and group.id == current_group_id else "üë•"
        count_text = f" ({members_count})" if members_count else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{prefix} {group.name}{count_text}",
                callback_data=f"admin_user_promo_group_set_{user_id}_{group.id}"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(
            text=texts.ADMIN_USER_PROMO_GROUP_BACK,
            callback_data=f"admin_user_manage_{user_id}"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_keyboard(
    confirm_action: str,
    cancel_action: str = "admin_panel",
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.YES, callback_data=confirm_action),
            InlineKeyboardButton(text=texts.NO, callback_data=cancel_action)
        ]
    ])


def get_promocode_type_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_TYPE_BALANCE", "üí∞ –ë–∞–ª–∞–Ω—Å"),
                callback_data="promo_type_balance"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_TYPE_DAYS", "üìÖ –î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="promo_type_days"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODE_TYPE_TRIAL", "üéÅ –¢—Ä–∏–∞–ª"),
                callback_data="promo_type_trial"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_promocodes")
        ]
    ])


def get_promocode_list_keyboard(promocodes: list, page: int, total_pages: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    for promo in promocodes:
        status_emoji = "‚úÖ" if promo.is_active else "‚ùå"
        type_emoji = {"balance": "üí∞", "subscription_days": "üìÖ", "trial_subscription": "üéÅ"}.get(promo.type, "üé´")
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status_emoji} {type_emoji} {promo.code}",
                callback_data=f"promo_manage_{promo.id}"
            )
        ])
    
    if total_pages > 1:
        pagination_row = []
        
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_promo_list_page_{page - 1}")
            )
        
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page")
        )
        
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_promo_list_page_{page + 1}")
            )
        
        keyboard.append(pagination_row)
    
    keyboard.extend([
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PROMOCODES_CREATE", "‚ûï –°–æ–∑–¥–∞—Ç—å"),
                callback_data="admin_promo_create"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_promocodes")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_target_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_ALL", "üë• –í—Å–µ–º"),
                callback_data="broadcast_all"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_ACTIVE", "üì± –° –ø–æ–¥–ø–∏—Å–∫–æ–π"),
                callback_data="broadcast_active"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_TRIAL", "üéÅ –¢—Ä–∏–∞–ª"),
                callback_data="broadcast_trial"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_NO_SUB", "‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="broadcast_no_sub"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_EXPIRING", "‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ"),
                callback_data="broadcast_expiring"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_EXPIRED", "üîö –ò—Å—Ç–µ–∫—à–∏–µ"),
                callback_data="broadcast_expired"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_ACTIVE_ZERO", "üßä –ê–∫—Ç–∏–≤–Ω–∞ 0 –ì–ë"),
                callback_data="broadcast_active_zero"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_TARGET_TRIAL_ZERO", "ü•∂ –¢—Ä–∏–∞–ª 0 –ì–ë"),
                callback_data="broadcast_trial_zero"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_messages")]
    ])


def get_custom_criteria_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_TODAY", "üìÖ –°–µ–≥–æ–¥–Ω—è"),
                callback_data="criteria_today"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_WEEK", "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"),
                callback_data="criteria_week"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_MONTH", "üìÖ –ó–∞ –º–µ—Å—è—Ü"),
                callback_data="criteria_month"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_ACTIVE_TODAY", "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è"),
                callback_data="criteria_active_today"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_INACTIVE_WEEK", "üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7+ –¥–Ω–µ–π"),
                callback_data="criteria_inactive_week"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_INACTIVE_MONTH", "üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 30+ –¥–Ω–µ–π"),
                callback_data="criteria_inactive_month"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_REFERRALS", "ü§ù –ß–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"),
                callback_data="criteria_referrals"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_PROMOCODES", "üé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã"),
                callback_data="criteria_promocodes"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CRITERIA_DIRECT", "üéØ –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
                callback_data="criteria_direct"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_messages")]
    ])


def get_broadcast_history_keyboard(page: int, total_pages: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    if total_pages > 1:
        pagination_row = []
        
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_msg_history_page_{page - 1}")
            )
        
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page")
        )
        
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_msg_history_page_{page + 1}")
            )
        
        keyboard.append(pagination_row)
    
    keyboard.extend([
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_HISTORY_REFRESH", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                callback_data="admin_msg_history"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_messages")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_sync_options_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = [
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_FULL", "üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                callback_data="sync_all_users"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_ONLY_NEW", "üÜï –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ"),
                callback_data="sync_new_users"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_UPDATE", "üìà –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
                callback_data="sync_update_data"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_VALIDATE", "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è"),
                callback_data="sync_validate"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_CLEANUP", "üßπ –û—á–∏—Å—Ç–∫–∞"),
                callback_data="sync_cleanup"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_RECOMMENDATIONS", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
                callback_data="sync_recommendations"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_remnawave")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_sync_confirmation_keyboard(sync_type: str, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = [
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_CONFIRM", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                callback_data=f"confirm_{sync_type}"
            )
        ],
        [InlineKeyboardButton(text=_t(texts, "ADMIN_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"), callback_data="admin_rw_sync")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_sync_result_keyboard(sync_type: str, has_errors: bool = False, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []

    if has_errors:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_RETRY", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"),
                callback_data=f"sync_{sync_type}"
            )
        ])

    if sync_type != "all_users":
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_FULL", "üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                callback_data="sync_all_users"
            )
        ])

    keyboard.extend([
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_STATS_BUTTON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_rw_system"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_VALIDATE", "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è"),
                callback_data="sync_validate"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_BACK", "‚¨ÖÔ∏è –ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"),
                callback_data="admin_rw_sync"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BACK_TO_MAIN", "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                callback_data="admin_remnawave"
            )
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



def get_period_selection_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PERIOD_TODAY", "üìÖ –°–µ–≥–æ–¥–Ω—è"),
                callback_data="period_today"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PERIOD_YESTERDAY", "üìÖ –í—á–µ—Ä–∞"),
                callback_data="period_yesterday"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PERIOD_WEEK", "üìÖ –ù–µ–¥–µ–ª—è"),
                callback_data="period_week"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PERIOD_MONTH", "üìÖ –ú–µ—Å—è—Ü"),
                callback_data="period_month"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_PERIOD_ALL", "üìÖ –í—Å–µ –≤—Ä–µ–º—è"),
                callback_data="period_all"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_statistics")]
    ])


def get_node_management_keyboard(node_uuid: str, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_NODE_ENABLE", "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å"),
                callback_data=f"node_enable_{node_uuid}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_NODE_DISABLE", "‚è∏Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å"),
                callback_data=f"node_disable_{node_uuid}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_NODE_RESTART", "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"),
                callback_data=f"node_restart_{node_uuid}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_NODE_STATS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data=f"node_stats_{node_uuid}"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_rw_nodes")]
    ])

def get_squad_management_keyboard(squad_uuid: str, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_ADD_ALL", "üë• –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
                callback_data=f"squad_add_users_{squad_uuid}"
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_REMOVE_ALL", "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
                callback_data=f"squad_remove_users_{squad_uuid}"
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_EDIT", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                callback_data=f"squad_edit_{squad_uuid}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∫–≤–∞–¥"),
                callback_data=f"squad_delete_{squad_uuid}"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_rw_squads")]
    ])

def get_squad_edit_keyboard(squad_uuid: str, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_EDIT_INBOUNDS", "üîß –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–±–∞—É–Ω–¥—ã"),
                callback_data=f"squad_edit_inbounds_{squad_uuid}"
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SQUAD_RENAME", "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"),
                callback_data=f"squad_rename_{squad_uuid}"
            ),
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BACK_TO_SQUADS", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–≤–∞–¥–∞–º"),
                callback_data=f"admin_squad_manage_{squad_uuid}"
            )
        ]
    ])

def get_monitoring_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_START", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_start"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_STOP_HARD", "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
                callback_data="admin_mon_stop"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FORCE_CHECK", "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"),
                callback_data="admin_mon_force_check"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_LOGS", "üìã –õ–æ–≥–∏"),
                callback_data="admin_mon_logs"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_TEST_NOTIFICATIONS", "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
                callback_data="admin_mon_test_notifications"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_STATISTICS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_mon_statistics"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BACK_TO_ADMIN", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"),
                callback_data="admin_panel"
            )
        ]
    ])

def get_monitoring_logs_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_HISTORY_REFRESH", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                callback_data="admin_mon_logs"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_CLEAR_OLD", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ"),
                callback_data="admin_mon_clear_logs"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_monitoring")]
    ])

def get_monitoring_logs_navigation_keyboard(
    current_page: int,
    total_pages: int,
    has_logs: bool = True,
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    if total_pages > 1:
        nav_row = []
        
        if current_page > 1:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"admin_mon_logs_page_{current_page - 1}"
            ))
        
        nav_row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}", 
            callback_data="current_page_info"
        ))
        
        if current_page < total_pages:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"admin_mon_logs_page_{current_page + 1}"
            ))
        
        keyboard.append(nav_row)
    
    management_row = []
    
    refresh_button = InlineKeyboardButton(
        text=_t(texts, "ADMIN_HISTORY_REFRESH", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
        callback_data="admin_mon_logs"
    )

    if has_logs:
        management_row.extend([
            refresh_button,
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_CLEAR", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_clear_logs"
            )
        ])
    else:
        management_row.append(refresh_button)
    
    keyboard.append(management_row)
    
    keyboard.append([
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_BACK_TO_MONITORING", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"),
            callback_data="admin_monitoring"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_log_detail_keyboard(log_id: int, current_page: int = 1, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_DELETE_LOG", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ª–æ–≥"),
                callback_data=f"admin_mon_delete_log_{log_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_BACK_TO_LOGS", "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ª–æ–≥–æ–≤"),
                callback_data=f"admin_mon_logs_page_{current_page}"
            )
        ]
    ])


def get_monitoring_clear_confirm_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_CONFIRM_CLEAR", "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_clear_logs_confirm"
            ),
            InlineKeyboardButton(text=_t(texts, "ADMIN_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"), callback_data="admin_mon_logs")
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_CLEAR_ALL", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –ª–æ–≥–∏"),
                callback_data="admin_mon_clear_all_logs"
            )
        ]
    ])

def get_monitoring_status_keyboard(
    is_running: bool,
    last_check_ago_minutes: int = 0,
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []

    control_row = []
    if is_running:
        control_row.extend([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_STOP_HARD", "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
                callback_data="admin_mon_stop"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_RESTART", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_restart"
            )
        ])
    else:
        control_row.append(
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_START", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"),
                callback_data="admin_mon_start"
            )
        )

    keyboard.append(control_row)

    monitoring_row = []

    if not is_running or last_check_ago_minutes > 10:
        monitoring_row.append(
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FORCE_CHECK", "‚ö° –°—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"),
                callback_data="admin_mon_force_check"
            )
        )
    else:
        monitoring_row.append(
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_CHECK_NOW", "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"),
                callback_data="admin_mon_force_check"
            )
        )

    keyboard.append(monitoring_row)

    info_row = [
        InlineKeyboardButton(text=_t(texts, "ADMIN_MONITORING_LOGS", "üìã –õ–æ–≥–∏"), callback_data="admin_mon_logs"),
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_MONITORING_STATISTICS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            callback_data="admin_mon_statistics"
        )
    ]
    keyboard.append(info_row)

    test_row = [
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_MONITORING_TEST_NOTIFICATIONS", "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
            callback_data="admin_mon_test_notifications"
        )
    ]
    keyboard.append(test_row)

    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_settings")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_monitoring_settings_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_SET_INTERVAL", "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"),
                callback_data="admin_mon_set_interval"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_NOTIFICATIONS", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                callback_data="admin_mon_toggle_notifications"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_AUTOPAY_SETTINGS", "üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç—ã"),
                callback_data="admin_mon_autopay_settings"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_AUTO_CLEANUP", "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"),
                callback_data="admin_mon_auto_cleanup"
            )
        ],
        [InlineKeyboardButton(text=_t(texts, "ADMIN_BACK_TO_MONITORING", "‚¨ÖÔ∏è –ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"), callback_data="admin_monitoring")]
    ])


def get_log_type_filter_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FILTER_SUCCESS", "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ"),
                callback_data="admin_mon_logs_filter_success"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FILTER_ERRORS", "‚ùå –û—à–∏–±–∫–∏"),
                callback_data="admin_mon_logs_filter_error"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FILTER_CYCLES", "üîÑ –¶–∏–∫–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
                callback_data="admin_mon_logs_filter_cycle"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MONITORING_FILTER_AUTOPAY", "üí≥ –ê–≤—Ç–æ–æ–ø–ª–∞—Ç—ã"),
                callback_data="admin_mon_logs_filter_autopay"
            )
        ],
        [
            InlineKeyboardButton(text=_t(texts, "ADMIN_MONITORING_ALL_LOGS", "üìã –í—Å–µ –ª–æ–≥–∏"), callback_data="admin_mon_logs"),
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_monitoring")
        ]
    ])

def get_admin_servers_keyboard(language: str = "ru") -> InlineKeyboardMarkup:

    texts = get_texts(language)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVERS_LIST", "üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"),
                callback_data="admin_servers_list"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVERS_SYNC", "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                callback_data="admin_servers_sync"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVERS_ADD", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
                callback_data="admin_servers_add"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVERS_STATS", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                callback_data="admin_servers_stats"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_subscriptions")]
    ])


def get_server_edit_keyboard(server_id: int, is_available: bool, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)

    toggle_text = _t(texts, "ADMIN_SERVER_DISABLE", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å") if is_available else _t(texts, "ADMIN_SERVER_ENABLE", "‚úÖ –í–∫–ª—é—á–∏—Ç—å")

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_EDIT_NAME", "‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ"),
                callback_data=f"admin_server_edit_name_{server_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_EDIT_PRICE", "üí∞ –¶–µ–Ω–∞"),
                callback_data=f"admin_server_edit_price_{server_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_EDIT_COUNTRY", "üåç –°—Ç—Ä–∞–Ω–∞"),
                callback_data=f"admin_server_edit_country_{server_id}"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_EDIT_LIMIT", "üë• –õ–∏–º–∏—Ç"),
                callback_data=f"admin_server_edit_limit_{server_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_EDIT_DESCRIPTION", "üìù –û–ø–∏—Å–∞–Ω–∏–µ"),
                callback_data=f"admin_server_edit_desc_{server_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=toggle_text,
                callback_data=f"admin_server_toggle_{server_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SERVER_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                callback_data=f"admin_server_delete_{server_id}"
            ),
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_servers_list")
        ]
    ])


def get_admin_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str,
    back_callback: str = "admin_panel",
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    if total_pages > 1:
        row = []
        
        if current_page > 1:
            row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"{callback_prefix}_page_{current_page - 1}"
            ))
        
        row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="current_page"
        ))
        
        if current_page < total_pages:
            row.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"{callback_prefix}_page_{current_page + 1}"
            ))
        
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data=back_callback)
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_maintenance_keyboard(
    language: str,
    is_maintenance_active: bool,
    is_monitoring_active: bool,
    panel_has_issues: bool = False
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []

    if is_maintenance_active:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAINTENANCE_DISABLE", "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
                callback_data="maintenance_toggle"
            )
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAINTENANCE_ENABLE", "üîß –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
                callback_data="maintenance_toggle"
            )
        ])

    if is_monitoring_active:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAINTENANCE_STOP_MONITORING", "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
                callback_data="maintenance_monitoring"
            )
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_MAINTENANCE_START_MONITORING", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
                callback_data="maintenance_monitoring"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_MAINTENANCE_CHECK_API", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API"),
            callback_data="maintenance_check_api"
        ),
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_MAINTENANCE_PANEL_STATUS", "üåê –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏") + ("‚ö†Ô∏è" if panel_has_issues else ""),
            callback_data="maintenance_check_panel"
        )
    ])

    keyboard.append([
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_MAINTENANCE_SEND_NOTIFICATION", "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
            callback_data="maintenance_manual_notify"
        )
    ])

    keyboard.append([
        InlineKeyboardButton(
            text=_t(texts, "ADMIN_REFRESH", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
            callback_data="maintenance_panel"
        ),
        InlineKeyboardButton(
            text=texts.BACK,
            callback_data="admin_submenu_settings"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_sync_simplified_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = [
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_SYNC_FULL", "üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                callback_data="sync_all_users"
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="admin_remnawave")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_welcome_text_keyboard(language: str = "ru", is_enabled: bool = True) -> InlineKeyboardMarkup:

    texts = get_texts(language)
    toggle_text = _t(texts, "ADMIN_WELCOME_DISABLE", "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å") if is_enabled else _t(texts, "ADMIN_WELCOME_ENABLE", "üü¢ –í–∫–ª—é—á–∏—Ç—å")
    toggle_callback = "toggle_welcome_text"

    keyboard = [
        [
            InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_EDIT", "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"),
                callback_data="edit_welcome_text"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_SHOW", "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π"),
                callback_data="show_welcome_text"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_PREVIEW", "üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"),
                callback_data="preview_welcome_text"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_RESET", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å"),
                callback_data="reset_welcome_text"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_HTML", "üè∑Ô∏è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                callback_data="show_formatting_help"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_WELCOME_PLACEHOLDERS", "üí° –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã"),
                callback_data="show_placeholders_help"
            )
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_communications")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

DEFAULT_BROADCAST_BUTTONS = ("home",)

BROADCAST_BUTTONS = {
    "balance": {
        "default_text": "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        "text_key": "ADMIN_BROADCAST_BUTTON_BALANCE",
        "callback": "balance_topup",
    },
    "referrals": {
        "default_text": "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞",
        "text_key": "ADMIN_BROADCAST_BUTTON_REFERRALS",
        "callback": "menu_referrals",
    },
    "promocode": {
        "default_text": "üé´ –ü—Ä–æ–º–æ–∫–æ–¥",
        "text_key": "ADMIN_BROADCAST_BUTTON_PROMOCODE",
        "callback": "menu_promocode",
    },
    "connect": {
        "default_text": "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
        "text_key": "ADMIN_BROADCAST_BUTTON_CONNECT",
        "callback": "subscription_connect",
    },
    "subscription": {
        "default_text": "üì± –ü–æ–¥–ø–∏—Å–∫–∞",
        "text_key": "ADMIN_BROADCAST_BUTTON_SUBSCRIPTION",
        "callback": "menu_subscription",
    },
    "support": {
        "default_text": "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "text_key": "ADMIN_BROADCAST_BUTTON_SUPPORT",
        "callback": "menu_support",
    },
    "home": {
        "default_text": "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
        "text_key": "ADMIN_BROADCAST_BUTTON_HOME",
        "callback": "back_to_menu",
    },
}

BROADCAST_BUTTON_ROWS: tuple[tuple[str, ...], ...] = (
    ("balance", "referrals"),
    ("promocode", "connect"),
    ("subscription", "support"),
    ("home",),
)


def get_broadcast_button_config(language: str) -> dict[str, dict[str, str]]:
    texts = get_texts(language)
    return {
        key: {
            "text": texts.t(config["text_key"], config["default_text"]),
            "callback": config["callback"],
        }
        for key, config in BROADCAST_BUTTONS.items()
    }


def get_broadcast_button_labels(language: str) -> dict[str, str]:
    return {key: value["text"] for key, value in get_broadcast_button_config(language).items()}


def get_message_buttons_selector_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    return get_updated_message_buttons_selector_keyboard_with_media(list(DEFAULT_BROADCAST_BUTTONS), False, language)

def get_broadcast_media_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_ADD_PHOTO", "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
                callback_data="add_media_photo"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_ADD_VIDEO", "üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"),
                callback_data="add_media_video"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_ADD_DOCUMENT", "üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
                callback_data="add_media_document"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_SKIP_MEDIA", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞"),
                callback_data="skip_media"
            )
        ],
        [InlineKeyboardButton(text=_t(texts, "ADMIN_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"), callback_data="admin_messages")]
    ])

def get_media_confirm_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_USE_MEDIA", "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–¥–∏–∞"),
                callback_data="confirm_media"
            ),
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_REPLACE_MEDIA", "üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞"),
                callback_data="replace_media"
            )
        ],
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_NO_MEDIA", "‚è≠Ô∏è –ë–µ–∑ –º–µ–¥–∏–∞"),
                callback_data="skip_media"
            ),
            InlineKeyboardButton(text=_t(texts, "ADMIN_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"), callback_data="admin_messages")
        ]
    ])

def get_updated_message_buttons_selector_keyboard_with_media(selected_buttons: list, has_media: bool = False, language: str = "ru") -> InlineKeyboardMarkup:
    selected_buttons = selected_buttons or []

    texts = get_texts(language)
    button_config_map = get_broadcast_button_config(language)
    keyboard: list[list[InlineKeyboardButton]] = []

    for row in BROADCAST_BUTTON_ROWS:
        row_buttons: list[InlineKeyboardButton] = []
        for button_key in row:
            button_config = button_config_map[button_key]
            base_text = button_config["text"]
            if button_key in selected_buttons:
                if " " in base_text:
                    toggle_text = f"‚úÖ {base_text.split(' ', 1)[1]}"
                else:
                    toggle_text = f"‚úÖ {base_text}"
            else:
                toggle_text = base_text
            row_buttons.append(
                InlineKeyboardButton(text=toggle_text, callback_data=f"btn_{button_key}")
            )
        if row_buttons:
            keyboard.append(row_buttons)

    if has_media:
        keyboard.append([
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_BROADCAST_CHANGE_MEDIA", "üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞"),
                callback_data="change_media"
            )
        ])

    keyboard.extend([
        [
            InlineKeyboardButton(
                text=_t(texts, "ADMIN_CONTINUE", "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
                callback_data="buttons_confirm"
            )
        ],
        [
            InlineKeyboardButton(text=_t(texts, "ADMIN_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"), callback_data="admin_messages")
        ]
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)
