from typing import List, Optional
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from app.config import settings, PERIOD_PRICES, TRAFFIC_PRICES
from app.localization.texts import get_texts
import logging

logger = logging.getLogger(__name__)

def get_rules_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.RULES_ACCEPT, callback_data="rules_accept"),
            InlineKeyboardButton(text=texts.RULES_DECLINE, callback_data="rules_decline")
        ]
    ])


def get_post_registration_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ üöÄ", callback_data="menu_trial"
            )
        ],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="back_to_menu")],
    ])


def get_main_menu_keyboard(
    language: str = "ru",
    is_admin: bool = False,
    has_had_paid_subscription: bool = False,
    has_active_subscription: bool = False,
    subscription_is_active: bool = False,
    balance_kopeks: int = 0
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    if settings.DEBUG:
        print(f"DEBUG KEYBOARD: language={language}, is_admin={is_admin}, has_had_paid={has_had_paid_subscription}, has_active={has_active_subscription}, sub_active={subscription_is_active}, balance={balance_kopeks}")
    
    if hasattr(texts, 'BALANCE_BUTTON') and balance_kopeks > 0:
        balance_button_text = texts.BALANCE_BUTTON.format(balance=texts.format_price(balance_kopeks))
    else:
        balance_button_text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {texts.format_price(balance_kopeks)}"
    
    keyboard = [
        [
            InlineKeyboardButton(text=balance_button_text, callback_data="menu_balance")
        ]
    ]
    
    if has_active_subscription and subscription_is_active:
        keyboard.append([
            InlineKeyboardButton(text=texts.MENU_SUBSCRIPTION, callback_data="menu_subscription")
        ])
    
    show_trial = not has_had_paid_subscription and not has_active_subscription
    
    show_buy = not has_active_subscription or not subscription_is_active
    
    subscription_buttons = []
    
    if show_trial:
        subscription_buttons.append(
            InlineKeyboardButton(text=texts.MENU_TRIAL, callback_data="menu_trial")
        )
    
    if show_buy:
        subscription_buttons.append(
            InlineKeyboardButton(text=texts.MENU_BUY_SUBSCRIPTION, callback_data="menu_buy")
        )
    
    if subscription_buttons:
        if len(subscription_buttons) == 2:
            keyboard.append(subscription_buttons)
        else:
            keyboard.append([subscription_buttons[0]])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text=texts.MENU_PROMOCODE, callback_data="menu_promocode"),
            InlineKeyboardButton(text=texts.MENU_REFERRALS, callback_data="menu_referrals")
        ],
        [
            InlineKeyboardButton(text=texts.MENU_SUPPORT, callback_data="menu_support"),
            InlineKeyboardButton(text=texts.MENU_RULES, callback_data="menu_rules")
        ]
    ])
    
    if settings.DEBUG:
        print(f"DEBUG KEYBOARD: is_admin={is_admin}, –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É: {is_admin}")
    
    if is_admin:
        if settings.DEBUG:
            print("DEBUG KEYBOARD: –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∞ –î–û–ë–ê–í–õ–ï–ù–ê!")
        keyboard.append([
            InlineKeyboardButton(text=texts.MENU_ADMIN, callback_data="admin_panel")
        ])
    else:
        if settings.DEBUG:
            print("DEBUG KEYBOARD: –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∞ –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_back_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")]
    ])


def get_insufficient_balance_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=texts.GO_TO_BALANCE_TOP_UP,
                callback_data="balance_topup",
            )
        ],
        [InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")],
    ])


def get_subscription_keyboard(
    language: str = "ru", 
    has_subscription: bool = False, 
    is_trial: bool = False,
    subscription=None
) -> InlineKeyboardMarkup:
    from app.config import settings 
    
    texts = get_texts(language)
    keyboard = []
    
    if has_subscription:
        if subscription and subscription.subscription_url:
            connect_mode = settings.CONNECT_BUTTON_MODE
            
            if connect_mode == "miniapp_subscription":
                keyboard.append([
                    InlineKeyboardButton(
                        text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                        web_app=types.WebAppInfo(url=subscription.subscription_url)
                    )
                ])
            elif connect_mode == "miniapp_custom":
                if settings.MINIAPP_CUSTOM_URL:
                    keyboard.append([
                        InlineKeyboardButton(
                            text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                            web_app=types.WebAppInfo(url=settings.MINIAPP_CUSTOM_URL)
                        )
                    ])
                else:
                    keyboard.append([
                        InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="subscription_connect")
                    ])
            else:
                keyboard.append([
                    InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="subscription_connect")
                ])
        
        if not is_trial and subscription and subscription.days_left <= 3:
            keyboard.append([
                InlineKeyboardButton(text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="subscription_extend")
            ])
        
        if not is_trial:
            keyboard.append([
                InlineKeyboardButton(text="üí≥ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="subscription_autopay")
            ])
        
        if is_trial:
            keyboard.append([
                InlineKeyboardButton(text=texts.MENU_BUY_SUBSCRIPTION, callback_data="subscription_upgrade")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscription_settings")
            ])
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_subscription_settings_keyboard(language: str = "ru", show_countries_management: bool = True) -> InlineKeyboardMarkup:
    from app.config import settings
    
    texts = get_texts(language)
    keyboard = []
    
    if show_countries_management:
        keyboard.append([
            InlineKeyboardButton(text="üåç –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã", callback_data="subscription_add_countries")
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üì± –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="subscription_add_devices")
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="subscription_reset_devices")
        ]
    ])
    
    if settings.is_traffic_selectable():
        keyboard.insert(-2, [
            InlineKeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="subscription_add_traffic")
        ])
        keyboard.insert(-2, [
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="subscription_reset_traffic")
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_subscription")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trial_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="trial_activate"),
            InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")
        ]
    ])


def get_subscription_period_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    available_periods = settings.get_available_subscription_periods()
    
    period_texts = {
        14: texts.PERIOD_14_DAYS,
        30: texts.PERIOD_30_DAYS,
        60: texts.PERIOD_60_DAYS,
        90: texts.PERIOD_90_DAYS,
        180: texts.PERIOD_180_DAYS,
        360: texts.PERIOD_360_DAYS
    }
    
    for days in available_periods:
        if days in period_texts:
            keyboard.append([
                InlineKeyboardButton(
                    text=period_texts[days], 
                    callback_data=f"period_{days}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_traffic_packages_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    import logging
    logger = logging.getLogger(__name__)
    
    from app.config import settings
    
    if settings.is_traffic_fixed():
        return get_back_keyboard(language)
    
    logger.info(f"üîç RAW CONFIG: '{settings.TRAFFIC_PACKAGES_CONFIG}'")
    
    all_packages = settings.get_traffic_packages()
    logger.info(f"üîç ALL PACKAGES: {all_packages}")
    
    enabled_packages = [pkg for pkg in all_packages if pkg['enabled']]
    disabled_packages = [pkg for pkg in all_packages if not pkg['enabled']]
    
    logger.info(f"üîç ENABLED: {len(enabled_packages)} packages")
    logger.info(f"üîç DISABLED: {len(disabled_packages)} packages")
    
    for pkg in disabled_packages:
        logger.info(f"üîç DISABLED PACKAGE: {pkg['gb']}GB = {pkg['price']} kopeks, enabled={pkg['enabled']}")
    
    texts = get_texts(language)
    keyboard = []
    
    traffic_packages = settings.get_traffic_packages()
    
    for package in traffic_packages:
        gb = package["gb"]
        price = package["price"]  
        enabled = package["enabled"]
        
        if not enabled:
            continue
        
        if gb == 0:
            text = f"‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç - {settings.format_price(package['price'])}"
        else:
            text = f"üìä {gb} –ì–ë - {settings.format_price(package['price'])}"
        
        keyboard.append([
            InlineKeyboardButton(text=text, callback_data=f"traffic_{gb}")
        ])

    if not keyboard:
        keyboard.append([
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ü–∞–∫–µ—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", 
                callback_data="no_traffic_packages"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="subscription_config_back")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_countries_keyboard(countries: List[dict], selected: List[str], language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    for country in countries:
        if not country.get('is_available', True):
            continue 
            
        emoji = "‚úÖ" if country['uuid'] in selected else "‚ö™"
        
        if country['price_kopeks'] > 0:
            price_text = f" (+{texts.format_price(country['price_kopeks'])})"
        else:
            price_text = " (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{emoji} {country['name']}{price_text}",
                callback_data=f"country_{country['uuid']}"
            )
        ])
    
    if not keyboard:
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
                callback_data="no_servers"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="countries_continue")],
        [InlineKeyboardButton(text=texts.BACK, callback_data="subscription_config_back")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_devices_keyboard(current: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    start_devices = settings.DEFAULT_DEVICE_LIMIT
    max_devices = settings.MAX_DEVICES_LIMIT if settings.MAX_DEVICES_LIMIT > 0 else 50
    end_devices = min(max_devices + 1, start_devices + 10)
    
    buttons = []
    
    for devices in range(start_devices, end_devices): 
        price = max(0, devices - settings.DEFAULT_DEVICE_LIMIT) * settings.PRICE_PER_DEVICE
        price_text = f" (+{texts.format_price(price)})" if price > 0 else " (–≤–∫–ª.)"
        emoji = "‚úÖ" if devices == current else "‚ö™"
        
        button_text = f"{emoji} {devices}{price_text}"
        
        buttons.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"devices_{devices}"
            )
        )
    
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.append([buttons[i], buttons[i + 1]])
        else:
            keyboard.append([buttons[i]])
    
    keyboard.extend([
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="devices_continue")],
        [InlineKeyboardButton(text=texts.BACK, callback_data="subscription_config_back")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def _get_device_declension(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    else:
        return "—É—Å—Ç—Ä–æ–π—Å—Ç–≤"

def get_subscription_confirm_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.CONFIRM, callback_data="subscription_confirm"),
            InlineKeyboardButton(text=texts.CANCEL, callback_data="subscription_cancel")
        ]
    ])


def get_balance_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    keyboard = [
        [
            InlineKeyboardButton(text=texts.BALANCE_HISTORY, callback_data="balance_history"),
            InlineKeyboardButton(text=texts.BALANCE_TOP_UP, callback_data="balance_topup")
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_payment_methods_keyboard(amount_kopeks: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
 
    if settings.is_yookassa_enabled():
        keyboard.append([
            InlineKeyboardButton(
                text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (YooKassa)", 
                callback_data="topup_yookassa"
            )
        ])
    
    if settings.TRIBUTE_ENABLED:
        keyboard.append([
            InlineKeyboardButton(
                text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Tribute)", 
                callback_data="topup_tribute"
            )
        ])

    if settings.TELEGRAM_STARS_ENABLED:
        keyboard.append([
            InlineKeyboardButton(
                text="‚≠ê Telegram Stars", 
                callback_data="topup_stars"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(
            text="üõ†Ô∏è –ß–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
            callback_data="topup_support"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="menu_balance")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_yookassa_payment_keyboard(
    payment_id: str, 
    amount_kopeks: int, 
    confirmation_url: str,
    language: str = "ru"
) -> InlineKeyboardMarkup:
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url=confirmation_url
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"check_yookassa_status_{payment_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                callback_data="menu_balance"
            )
        ]
    ])

def get_autopay_notification_keyboard(subscription_id: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", 
                callback_data="balance_topup"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì± –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", 
                callback_data="menu_subscription"
            )
        ]
    ])

def get_subscription_expiring_keyboard(subscription_id: int, language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                callback_data="subscription_extend"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", 
                callback_data="balance_topup"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì± –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", 
                callback_data="menu_subscription"
            )
        ]
    ])

def get_referral_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                callback_data="referral_create_invite"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì± –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥",
                callback_data="referral_show_qr"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                callback_data="referral_list"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                callback_data="referral_analytics"
            )
        ],
        [
            InlineKeyboardButton(
                text=texts.BACK,
                callback_data="back_to_menu" 
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_support_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.CONTACT_SUPPORT, url=f"https://t.me/{settings.SUPPORT_USERNAME.lstrip('@')}")
        ],
        [
            InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")
        ]
    ])


def get_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str,
    language: str = "ru"
) -> List[List[InlineKeyboardButton]]:
    keyboard = []
    
    if total_pages > 1:
        row = []
        
        if current_page > 1:
            row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"{callback_prefix}_page_{current_page - 1}"
            ))
        
        row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="current_page"
        ))
        
        if current_page < total_pages:
            row.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"{callback_prefix}_page_{current_page + 1}"
            ))
        
        keyboard.append(row)
    
    return keyboard

def get_confirmation_keyboard(
    confirm_data: str,
    cancel_data: str = "cancel",
    language: str = "ru"
) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=texts.YES, callback_data=confirm_data),
            InlineKeyboardButton(text=texts.NO, callback_data=cancel_data)
        ]
    ])


def get_autopay_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="autopay_enable"),
            InlineKeyboardButton(text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="autopay_disable")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏", callback_data="autopay_set_days")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_subscription")
        ]
    ])


def get_autopay_days_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    keyboard = []
    
    for days in [1, 3, 7, 14]:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{days} –¥–Ω{_get_days_suffix(days)}",
                callback_data=f"autopay_days_{days}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscription_autopay")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def _get_days_suffix(days: int) -> str:
    if days == 1:
        return "—å"
    elif 2 <= days <= 4:
        return "—è"
    else:
        return "–µ–π"



def get_extend_subscription_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    periods = [
        (14, f"üìÖ 14 –¥–Ω–µ–π - {settings.format_price(settings.PRICE_14_DAYS)}"),
        (30, f"üìÖ 30 –¥–Ω–µ–π - {settings.format_price(settings.PRICE_30_DAYS)}"),
        (60, f"üìÖ 60 –¥–Ω–µ–π - {settings.format_price(settings.PRICE_60_DAYS)}"),
        (90, f"üìÖ 90 –¥–Ω–µ–π - {settings.format_price(settings.PRICE_90_DAYS)}")
    ]
    
    for days, text in periods:
        keyboard.append([
            InlineKeyboardButton(text=text, callback_data=f"extend_period_{days}")
        ])
    
    keyboard.append([
        InlineKeyboardButton(text=texts.BACK, callback_data="menu_subscription")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_add_traffic_keyboard(language: str = "ru", subscription_end_date: datetime = None) -> InlineKeyboardMarkup:
    from app.utils.pricing_utils import get_remaining_months
    from app.config import settings
    
    months_multiplier = 1
    period_text = ""
    if subscription_end_date:
        months_multiplier = get_remaining_months(subscription_end_date)
        if months_multiplier > 1:
            period_text = f" (–∑–∞ {months_multiplier} –º–µ—Å)"
    
    packages = settings.get_traffic_packages()
    enabled_packages = [pkg for pkg in packages if pkg['enabled']]
    
    if not enabled_packages:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤" if language == "ru" else "‚ùå No packages available",
                callback_data="no_traffic_packages"
            )],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back",
                callback_data="menu_subscription"
            )]
        ])
    
    buttons = []
    
    for package in enabled_packages:
        gb = package['gb']
        price_per_month = package['price']
        total_price = price_per_month * months_multiplier
        
        if gb == 0:
            if language == "ru":
                text = f"‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ - {total_price//100} ‚ÇΩ{period_text}"
            else:
                text = f"‚ôæÔ∏è Unlimited traffic - {total_price//100} ‚ÇΩ{period_text}"
        else:
            if language == "ru":
                text = f"üìä +{gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞ - {total_price//100} ‚ÇΩ{period_text}"
            else:
                text = f"üìä +{gb} GB traffic - {total_price//100} ‚ÇΩ{period_text}"
        
        buttons.append([
            InlineKeyboardButton(text=text, callback_data=f"add_traffic_{gb}")
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back",
            callback_data="menu_subscription"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)
    
def get_add_devices_keyboard(current_devices: int, language: str = "ru", subscription_end_date: datetime = None) -> InlineKeyboardMarkup:
    from app.utils.pricing_utils import get_remaining_months
    from app.config import settings
    
    months_multiplier = 1
    period_text = ""
    if subscription_end_date:
        months_multiplier = get_remaining_months(subscription_end_date)
        if months_multiplier > 1:
            period_text = f" (–∑–∞ {months_multiplier} –º–µ—Å)"
    
    device_price_per_month = settings.PRICE_PER_DEVICE
    
    buttons = []
    
    for count in [1, 2, 3, 4, 5]:
        new_total = current_devices + count
        if settings.MAX_DEVICES_LIMIT > 0 and new_total > settings.MAX_DEVICES_LIMIT:
            continue
        
        price_per_month = count * device_price_per_month
        total_price = price_per_month * months_multiplier
        
        if language == "ru":
            text = f"üì± +{count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ(–∞) (–∏—Ç–æ–≥–æ: {new_total}) - {total_price//100} ‚ÇΩ{period_text}"
        else:
            text = f"üì± +{count} device(s) (total: {new_total}) - {total_price//100} ‚ÇΩ{period_text}"
        
        buttons.append([
            InlineKeyboardButton(text=text, callback_data=f"add_devices_{count}")
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back", 
            callback_data="menu_subscription"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_reset_traffic_confirm_keyboard(price_kopeks: int, language: str = "ru") -> InlineKeyboardMarkup:
    from app.config import settings
    
    if settings.is_traffic_fixed():
        return get_back_keyboard(language)
    
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚úÖ –°–±—Ä–æ—Å–∏—Ç—å –∑–∞ {settings.format_price(price_kopeks)}", 
                callback_data="confirm_reset_traffic"
            )
        ],
        [
            InlineKeyboardButton(text="‚åõ –û—Ç–º–µ–Ω–∞", callback_data="menu_subscription")
        ]
    ])

def get_manage_countries_keyboard(
    countries: List[dict], 
    selected: List[str], 
    current_subscription_countries: List[str],
    language: str = "ru",
    subscription_end_date: datetime = None
) -> InlineKeyboardMarkup:
    from app.utils.pricing_utils import get_remaining_months
    
    months_multiplier = 1
    if subscription_end_date:
        months_multiplier = get_remaining_months(subscription_end_date)
        logger.info(f"üîç –†–∞—Å—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∞–º–∏: –æ—Å—Ç–∞–ª–æ—Å—å {months_multiplier} –º–µ—Å—è—Ü–µ–≤ –¥–æ {subscription_end_date}")
    
    buttons = []
    total_cost = 0
    
    for country in countries:
        uuid = country['uuid']
        name = country['name']
        price_per_month = country['price_kopeks']
        
        if uuid in current_subscription_countries:
            if uuid in selected:
                icon = "‚úÖ"
            else:
                icon = "‚ûñ"
        else:
            if uuid in selected:
                icon = "‚ûï"
                total_cost += price_per_month * months_multiplier
            else:
                icon = "‚ö™"
        
        if uuid not in current_subscription_countries and uuid in selected:
            total_price = price_per_month * months_multiplier
            if months_multiplier > 1:
                price_text = f" ({price_per_month//100}‚ÇΩ/–º–µ—Å √ó {months_multiplier} = {total_price//100}‚ÇΩ)"
                logger.info(f"üîç –°–µ—Ä–≤–µ—Ä {name}: {price_per_month/100}‚ÇΩ/–º–µ—Å √ó {months_multiplier} –º–µ—Å = {total_price/100}‚ÇΩ")
            else:
                price_text = f" ({total_price//100}‚ÇΩ)"
            display_name = f"{icon} {name}{price_text}"
        else:
            display_name = f"{icon} {name}"
        
        buttons.append([
            InlineKeyboardButton(
                text=display_name,
                callback_data=f"country_manage_{uuid}"
            )
        ])
    
    if total_cost > 0:
        apply_text = f"‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è ({total_cost//100} ‚ÇΩ)"
        logger.info(f"üîç –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_cost/100}‚ÇΩ")
    else:
        apply_text = "‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    
    buttons.append([
        InlineKeyboardButton(text=apply_text, callback_data="countries_apply")
    ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back",
            callback_data="menu_subscription"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_device_selection_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    from app.config import settings
    
    keyboard = [
        [
            InlineKeyboardButton(text="üì± iOS (iPhone/iPad)", callback_data="device_guide_ios"),
            InlineKeyboardButton(text="ü§ñ Android", callback_data="device_guide_android")
        ],
        [
            InlineKeyboardButton(text="üíª Windows", callback_data="device_guide_windows"),
            InlineKeyboardButton(text="üéØ macOS", callback_data="device_guide_mac")
        ],
        [
            InlineKeyboardButton(text="üì∫ Android TV", callback_data="device_guide_tv")
        ]
    ]
    
    if settings.CONNECT_BUTTON_MODE == "guide":
        keyboard.append([
            InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="open_subscription_link")
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_subscription")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_connection_guide_keyboard(
    subscription_url: str, 
    app: dict, 
    language: str = "ru"
) -> InlineKeyboardMarkup:
    from app.handlers.subscription import create_deep_link
    
    keyboard = []
    
    if 'installationStep' in app and 'buttons' in app['installationStep']:
        app_buttons = []
        for button in app['installationStep']['buttons']:
            button_text = button['buttonText'].get(language, button['buttonText']['en'])
            app_buttons.append(
                InlineKeyboardButton(text=f"üì• {button_text}", url=button['buttonLink'])
            )
            if len(app_buttons) == 2:
                keyboard.append(app_buttons)
                app_buttons = []
        
        if app_buttons:
            keyboard.append(app_buttons)
    
    keyboard.append([
        InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏", url=subscription_url)
    ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üì± –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="subscription_connect")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="menu_subscription")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_app_selection_keyboard(
    device_type: str, 
    apps: list, 
    language: str = "ru"
) -> InlineKeyboardMarkup:
    keyboard = []
    
    for app in apps:
        app_name = app['name']
        if app.get('isFeatured', False):
            app_name = f"‚≠ê {app_name}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=app_name, 
                callback_data=f"app_{device_type}_{app['id']}"
            )
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üì± –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="subscription_connect")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="menu_subscription")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_specific_app_keyboard(
    subscription_url: str,
    app: dict,
    device_type: str,
    language: str = "ru"
) -> InlineKeyboardMarkup:
    from app.handlers.subscription import create_deep_link
    
    keyboard = []
    
    if 'installationStep' in app and 'buttons' in app['installationStep']:
        app_buttons = []
        for button in app['installationStep']['buttons']:
            button_text = button['buttonText'].get(language, button['buttonText']['en'])
            app_buttons.append(
                InlineKeyboardButton(text=f"üì• {button_text}", url=button['buttonLink'])
            )
            if len(app_buttons) == 2:
                keyboard.append(app_buttons)
                app_buttons = []
        
        if app_buttons:
            keyboard.append(app_buttons)
    
    keyboard.append([
        InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏", url=subscription_url)
    ])
    
    if 'additionalAfterAddSubscriptionStep' in app and 'buttons' in app['additionalAfterAddSubscriptionStep']:
        for button in app['additionalAfterAddSubscriptionStep']['buttons']:
            button_text = button['buttonText'].get(language, button['buttonText']['en'])
            keyboard.append([
                InlineKeyboardButton(text=button_text, url=button['buttonLink'])
            ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üìã –î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data=f"app_list_{device_type}")
        ],
        [
            InlineKeyboardButton(text="üì± –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="subscription_connect")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="menu_subscription")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_extend_subscription_keyboard_with_prices(language: str, prices: dict) -> InlineKeyboardMarkup:
    texts = get_texts(language)
    keyboard = []
    
    available_periods = settings.get_available_renewal_periods()
    
    period_display = {
        14: "14 –¥–Ω–µ–π",
        30: "30 –¥–Ω–µ–π", 
        60: "60 –¥–Ω–µ–π",
        90: "90 –¥–Ω–µ–π",
        180: "180 –¥–Ω–µ–π",
        360: "360 –¥–Ω–µ–π"
    }
    
    for days in available_periods:
        if days in prices and days in period_display:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {period_display[days]} - {texts.format_price(prices[days])}", 
                    callback_data=f"extend_period_{days}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_subscription")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
