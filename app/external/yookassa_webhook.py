import asyncio
import logging
import json
import hashlib
import hmac
import base64
from typing import Optional, Dict, Any
from aiohttp import web
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.services.payment_service import PaymentService
from app.database.database import get_db

logger = logging.getLogger(__name__)


class YooKassaWebhookHandler:

    @staticmethod
    def verify_webhook_signature(body: str, signature: str, secret: str) -> bool:
        try:
            signature_parts = signature.strip().split(' ')
            
            if len(signature_parts) < 4:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ YooKassa: {signature}")
                return False
            
            version = signature_parts[0] 
            payment_id = signature_parts[1] 
            timestamp = signature_parts[2]  
            received_signature = signature_parts[3]
            
            if version != "v1":
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥–ø–∏—Å–∏: {version}")
                return False
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ v1 –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}, timestamp: {timestamp}")
            
            
            expected_signature_1 = hmac.new(
                secret.encode('utf-8'),
                body.encode('utf-8'),
                hashlib.sha256
            ).digest()
            expected_signature_1_b64 = base64.b64encode(expected_signature_1).decode('utf-8')
            
            signed_payload_2 = f"{payment_id}.{timestamp}.{body}"
            expected_signature_2 = hmac.new(
                secret.encode('utf-8'),
                signed_payload_2.encode('utf-8'),
                hashlib.sha256
            ).digest()
            expected_signature_2_b64 = base64.b64encode(expected_signature_2).decode('utf-8')
            
            signed_payload_3 = f"{timestamp}.{body}"
            expected_signature_3 = hmac.new(
                secret.encode('utf-8'),
                signed_payload_3.encode('utf-8'),
                hashlib.sha256
            ).digest()
            expected_signature_3_b64 = base64.b64encode(expected_signature_3).decode('utf-8')
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å: {received_signature}")
            logger.debug(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å (–≤–∞—Ä–∏–∞–Ω—Ç 1): {expected_signature_1_b64}")
            logger.debug(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å (–≤–∞—Ä–∏–∞–Ω—Ç 2): {expected_signature_2_b64}")
            logger.debug(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å (–≤–∞—Ä–∏–∞–Ω—Ç 3): {expected_signature_3_b64}")
            
            is_valid = (
                hmac.compare_digest(received_signature, expected_signature_1_b64) or
                hmac.compare_digest(received_signature, expected_signature_2_b64) or  
                hmac.compare_digest(received_signature, expected_signature_3_b64)
            )
            
            if is_valid:
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å YooKassa webhook –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å YooKassa webhook –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ YooKassa: {e}")
            return False
    
    def __init__(self, payment_service: PaymentService):
        self.payment_service = payment_service
    
    async def handle_webhook(self, request: web.Request) -> web.Response:
        
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω YooKassa webhook: {request.method} {request.path}")
            logger.info(f"üìã Headers: {dict(request.headers)}")
            
            body = await request.text()
            
            if not body:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π webhook –æ—Ç YooKassa")
                return web.Response(status=400, text="Empty body")
            
            logger.info(f"üìÑ Body: {body}")
            
            signature = request.headers.get('Signature') or request.headers.get('X-YooKassa-Signature')
            
            if settings.YOOKASSA_WEBHOOK_SECRET and signature:
                logger.info(f"üîê –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å: {signature}")
                
                if not YooKassaWebhookHandler.verify_webhook_signature(body, signature, settings.YOOKASSA_WEBHOOK_SECRET):
                    logger.warning("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)")
                else:
                    logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
            elif settings.YOOKASSA_WEBHOOK_SECRET and not signature:
                logger.warning("‚ö†Ô∏è Webhook –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –Ω–æ —Å–µ–∫—Ä–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            elif signature and not settings.YOOKASSA_WEBHOOK_SECRET:
                logger.info("‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (YOOKASSA_WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                
            else:
                logger.info("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            try:
                webhook_data = json.loads(body)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON webhook YooKassa: {e}")
                return web.Response(status=400, text="Invalid JSON")
            
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook YooKassa: {webhook_data.get('event', 'unknown_event')}")
            logger.debug(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook: {webhook_data}")
            
            event_type = webhook_data.get("event")
            if not event_type:
                logger.warning("‚ö†Ô∏è Webhook YooKassa –±–µ–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è")
                return web.Response(status=400, text="No event type")
            
            if event_type not in ["payment.succeeded", "payment.waiting_for_capture"]:
                logger.info(f"‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ YooKassa: {event_type}")
                return web.Response(status=200, text="OK")
            
            async for db in get_db():
                try:
                    success = await self.payment_service.process_yookassa_webhook(db, webhook_data)
                    
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω webhook YooKassa: {event_type}")
                        return web.Response(status=200, text="OK")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook YooKassa: {event_type}")
                        return web.Response(status=500, text="Processing error")
                        
                finally:
                    await db.close()
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook YooKassa: {e}", exc_info=True)
            return web.Response(status=500, text="Internal server error")
    
    def setup_routes(self, app: web.Application) -> None:
        
        webhook_path = settings.YOOKASSA_WEBHOOK_PATH
        app.router.add_post(webhook_path, self.handle_webhook)
        app.router.add_get(webhook_path, self._get_handler) 
        app.router.add_options(webhook_path, self._options_handler) 
        
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω YooKassa webhook –Ω–∞ –ø—É—Ç–∏: POST {webhook_path}")
    
    async def _get_handler(self, request: web.Request) -> web.Response:
        return web.json_response({
            "status": "ok",
            "message": "YooKassa webhook endpoint is working",
            "method": "GET",
            "path": request.path,
            "note": "Use POST method for actual webhooks"
        })
    
    async def _options_handler(self, request: web.Request) -> web.Response:
        return web.Response(
            status=200,
            headers={
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-YooKassa-Signature',
            }
        )


def create_yookassa_webhook_app(payment_service: PaymentService) -> web.Application:
    
    app = web.Application()
    
    webhook_handler = YooKassaWebhookHandler(payment_service)
    webhook_handler.setup_routes(app)
    
    async def health_check(request):
        return web.json_response({
            "status": "ok", 
            "service": "yookassa_webhook",
            "port": settings.YOOKASSA_WEBHOOK_PORT,
            "path": settings.YOOKASSA_WEBHOOK_PATH,
            "enabled": settings.is_yookassa_enabled()
        })
    
    app.router.add_get("/health", health_check)
    
    return app


async def start_yookassa_webhook_server(payment_service: PaymentService) -> None:
    
    if not settings.is_yookassa_enabled():
        logger.info("‚ÑπÔ∏è YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞, webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        return
    
    try:
        app = create_yookassa_webhook_app(payment_service)
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(
            runner,
            host=settings.YOOKASSA_WEBHOOK_HOST,
            port=settings.YOOKASSA_WEBHOOK_PORT
        )
        
        await site.start()
        
        logger.info(
            "‚úÖ YooKassa webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s:%s",
            settings.YOOKASSA_WEBHOOK_HOST,
            settings.YOOKASSA_WEBHOOK_PORT,
        )
        logger.info(
            "üéØ YooKassa webhook URL: http://%s:%s%s",
            settings.YOOKASSA_WEBHOOK_HOST,
            settings.YOOKASSA_WEBHOOK_PORT,
            settings.YOOKASSA_WEBHOOK_PATH,
        )
        
        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            logger.info("üõë YooKassa webhook —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await site.stop()
            await runner.cleanup()
            logger.info("‚úÖ YooKassa webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
        raise
