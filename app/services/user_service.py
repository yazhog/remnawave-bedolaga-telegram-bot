import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import delete, select, update, func
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from app.database.crud.user import (
    get_user_by_id, get_user_by_telegram_id, get_users_list,
    get_users_count, get_users_statistics, get_inactive_users,
    add_user_balance, subtract_user_balance, update_user, delete_user,
    get_users_spending_stats
)
from app.database.crud.promo_group import get_promo_group_by_id
from app.database.crud.transaction import get_user_transactions_count
from app.database.crud.subscription import (
    get_subscription_by_user_id,
    decrement_subscription_server_counts,
)
from app.database.models import (
    User, UserStatus, Subscription, Transaction, PromoCode, PromoCodeUse,
    ReferralEarning, SubscriptionServer, YooKassaPayment, BroadcastHistory,
    CryptoBotPayment, SubscriptionConversion, UserMessage, WelcomeText,
    SentNotification, PromoGroup, MulenPayPayment, Pal24Payment,
    AdvertisingCampaign, AdvertisingCampaignRegistration, PaymentMethod,
    TransactionType
)
from app.config import settings

logger = logging.getLogger(__name__)


class UserService:
    
    async def _send_balance_notification(
        self,
        bot: Bot,
        user: User,
        amount_kopeks: int,
        admin_name: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏/—Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if amount_kopeks > 0:
                # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                emoji = "üí∞"
                action = "–ø–æ–ø–æ–ª–Ω–µ–Ω"
                amount_text = f"+{settings.format_price(amount_kopeks)}"
                message = (
                    f"{emoji} <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                    f"üíµ <b>–°—É–º–º–∞:</b> {amount_text}\n"
                    f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_name}\n"
                    f"üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {settings.format_price(user.balance_kopeks)}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üéâ"
                )
            else:
                # –°–ø–∏—Å–∞–Ω–∏–µ
                emoji = "üí∏"
                action = "—Å–ø–∏—Å–∞–Ω"
                amount_text = f"-{settings.format_price(abs(amount_kopeks))}"
                message = (
                    f"{emoji} <b>–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"üíµ <b>–°—É–º–º–∞:</b> {amount_text}\n"
                    f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_name}\n"
                    f"üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {settings.format_price(user.balance_kopeks)}\n\n"
                    f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )

            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            return False
        except TelegramBadRequest as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False
    
    async def get_user_profile(
        self, 
        db: AsyncSession, 
        user_id: int
    ) -> Optional[Dict[str, Any]]:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return None
            
            subscription = await get_subscription_by_user_id(db, user_id)
            transactions_count = await get_user_transactions_count(db, user_id)
            
            return {
                "user": user,
                "subscription": subscription,
                "transactions_count": transactions_count,
                "is_admin": settings.is_admin(user.telegram_id),
                "registration_days": (datetime.utcnow() - user.created_at).days
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def search_users(
        self,
        db: AsyncSession,
        query: str,
        page: int = 1,
        limit: int = 20
    ) -> Dict[str, Any]:
        try:
            offset = (page - 1) * limit
            
            users = await get_users_list(
                db, offset=offset, limit=limit, search=query
            )
            total_count = await get_users_count(db, search=query)
            
            total_pages = (total_count + limit - 1) // limit
            
            return {
                "users": users,
                "current_page": page,
                "total_pages": total_pages,
                "total_count": total_count,
                "has_next": page < total_pages,
                "has_prev": page > 1
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {
                "users": [],
                "current_page": 1,
                "total_pages": 1,
                "total_count": 0,
                "has_next": False,
                "has_prev": False
            }

    async def get_users_page(
        self,
        db: AsyncSession,
        page: int = 1,
        limit: int = 20,
        status: Optional[UserStatus] = None,
        order_by_balance: bool = False,
        order_by_traffic: bool = False,
        order_by_last_activity: bool = False,
        order_by_total_spent: bool = False,
        order_by_purchase_count: bool = False
    ) -> Dict[str, Any]:
        try:
            offset = (page - 1) * limit
            
            users = await get_users_list(
                db,
                offset=offset,
                limit=limit,
                status=status,
                order_by_balance=order_by_balance,
                order_by_traffic=order_by_traffic,
                order_by_last_activity=order_by_last_activity,
                order_by_total_spent=order_by_total_spent,
                order_by_purchase_count=order_by_purchase_count,
            )
            total_count = await get_users_count(db, status=status)
            
            total_pages = (total_count + limit - 1) // limit
            
            return {
                "users": users,
                "current_page": page,
                "total_pages": total_pages,
                "total_count": total_count,
                "has_next": page < total_pages,
                "has_prev": page > 1
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {
                "users": [],
                "current_page": 1,
                "total_pages": 1,
                "total_count": 0,
                "has_next": False,
                "has_prev": False
            }

    async def get_user_spending_stats_map(
        self,
        db: AsyncSession,
        user_ids: List[int]
    ) -> Dict[int, Dict[str, int]]:
        try:
            return await get_users_spending_stats(db, user_ids)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}

    async def get_users_by_campaign_page(
        self,
        db: AsyncSession,
        page: int = 1,
        limit: int = 20
    ) -> Dict[str, Any]:
        try:
            offset = (page - 1) * limit

            campaign_ranked = (
                select(
                    AdvertisingCampaignRegistration.user_id.label("user_id"),
                    AdvertisingCampaignRegistration.campaign_id.label("campaign_id"),
                    AdvertisingCampaignRegistration.created_at.label("created_at"),
                    func.row_number()
                    .over(
                        partition_by=AdvertisingCampaignRegistration.user_id,
                        order_by=AdvertisingCampaignRegistration.created_at.desc(),
                    )
                    .label("rn"),
                )
                .cte("campaign_ranked")
            )

            latest_campaign = (
                select(
                    campaign_ranked.c.user_id,
                    campaign_ranked.c.campaign_id,
                    campaign_ranked.c.created_at,
                )
                .where(campaign_ranked.c.rn == 1)
                .subquery()
            )

            query = (
                select(
                    User,
                    AdvertisingCampaign.name.label("campaign_name"),
                    latest_campaign.c.created_at,
                )
                .join(latest_campaign, latest_campaign.c.user_id == User.id)
                .join(
                    AdvertisingCampaign,
                    AdvertisingCampaign.id == latest_campaign.c.campaign_id,
                )
                .order_by(
                    AdvertisingCampaign.name.asc(),
                    latest_campaign.c.created_at.desc(),
                )
                .offset(offset)
                .limit(limit)
            )

            result = await db.execute(query)
            rows = result.all()

            users = [row[0] for row in rows]
            campaign_map = {
                row[0].id: {
                    "campaign_name": row[1],
                    "registered_at": row[2],
                }
                for row in rows
            }

            total_stmt = select(func.count()).select_from(latest_campaign)
            total_result = await db.execute(total_stmt)
            total_count = total_result.scalar() or 0
            total_pages = (total_count + limit - 1) // limit if total_count else 1

            return {
                "users": users,
                "campaigns": campaign_map,
                "current_page": page,
                "total_pages": total_pages,
                "total_count": total_count,
                "has_next": page < total_pages,
                "has_prev": page > 1,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º: {e}")
            return {
                "users": [],
                "campaigns": {},
                "current_page": 1,
                "total_pages": 1,
                "total_count": 0,
                "has_next": False,
                "has_prev": False,
            }

    async def update_user_balance(
        self,
        db: AsyncSession,
        user_id: int,
        amount_kopeks: int,
        description: str,
        admin_id: int,
        bot: Optional[Bot] = None,
        admin_name: Optional[str] = None
    ) -> bool:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            old_balance = user.balance_kopeks

            if amount_kopeks > 0:
                await add_user_balance(db, user, amount_kopeks, description=description)
                logger.info(f"–ê–¥–º–∏–Ω {admin_id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {amount_kopeks/100}‚ÇΩ")
                success = True
            else:
                success = await subtract_user_balance(
                    db,
                    user,
                    abs(amount_kopeks),
                    description,
                    create_transaction=True,
                    payment_method=PaymentMethod.MANUAL,
                )
                if success:
                    logger.info(f"–ê–¥–º–∏–Ω {admin_id} —Å–ø–∏—Å–∞–ª —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {abs(amount_kopeks)/100}‚ÇΩ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            if success and bot:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                await db.refresh(user)

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if not admin_name:
                    admin_user = await get_user_by_id(db, admin_id)
                    admin_name = admin_user.full_name if admin_user else f"–ê–¥–º–∏–Ω #{admin_id}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
                await self._send_balance_notification(bot, user, amount_kopeks, admin_name)

            return success

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def update_user_promo_group(
        self,
        db: AsyncSession,
        user_id: int,
        promo_group_id: int
    ) -> Tuple[bool, Optional[User], Optional[PromoGroup], Optional[PromoGroup]]:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return False, None, None, None

            old_group = user.promo_group

            promo_group = await get_promo_group_by_id(db, promo_group_id)
            if not promo_group:
                return False, None, None, old_group

            user.promo_group_id = promo_group.id
            user.promo_group = promo_group
            user.updated_at = datetime.utcnow()

            await db.commit()
            await db.refresh(user)

            logger.info(
                "üë• –ü—Ä–æ–º–æ–≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '%s'",
                user.telegram_id,
                promo_group.name,
            )

            return True, user, promo_group, old_group

        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, None, None, None

    async def block_user(
        self,
        db: AsyncSession,
        user_id: int,
        admin_id: int,
        reason: str = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    ) -> bool:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return False
            
            if user.remnawave_uuid:
                try:
                    from app.services.subscription_service import SubscriptionService
                    subscription_service = SubscriptionService()
                    await subscription_service.disable_remnawave_user(user.remnawave_uuid)
                    logger.info(f"‚úÖ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.remnawave_uuid} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
            
            if user.subscription:
                from app.database.crud.subscription import deactivate_subscription
                await deactivate_subscription(db, user.subscription)
            
            await update_user(db, user, status=UserStatus.BLOCKED.value)
            
            logger.info(f"–ê–¥–º–∏–Ω {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reason}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def unblock_user(
        self,
        db: AsyncSession,
        user_id: int,
        admin_id: int
    ) -> bool:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return False
            
            await update_user(db, user, status=UserStatus.ACTIVE.value)
            
            if user.subscription:
                from datetime import datetime
                from app.database.models import SubscriptionStatus
                
                if user.subscription.end_date > datetime.utcnow():
                    user.subscription.status = SubscriptionStatus.ACTIVE.value
                    await db.commit()
                    await db.refresh(user.subscription)
                    logger.info(f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    if user.remnawave_uuid:
                        try:
                            from app.services.subscription_service import SubscriptionService
                            subscription_service = SubscriptionService()
                            await subscription_service.update_remnawave_user(db, user.subscription)
                            logger.info(f"‚úÖ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.remnawave_uuid} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
                else:
                    logger.info(f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            
            logger.info(f"–ê–¥–º–∏–Ω {admin_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def delete_user_account(
        self,
        db: AsyncSession,
        user_id: int,
        admin_id: int
    ) -> bool:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False
            
            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (Telegram ID: {user.telegram_id})")
            
            if user.remnawave_uuid:
                from app.config import settings
                delete_mode = settings.get_remnawave_user_delete_mode()
                
                try:
                    from app.services.remnawave_service import RemnaWaveService
                    remnawave_service = RemnaWaveService()
                    
                    if delete_mode == "delete":
                        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–Ω–µ–ª–∏ Remnawave
                        async with remnawave_service.get_api_client() as api:
                            delete_success = await api.delete_user(user.remnawave_uuid)
                            if delete_success:
                                logger.info(f"‚úÖ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.remnawave_uuid} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–Ω–µ–ª–∏")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.remnawave_uuid} –∏–∑ –ø–∞–Ω–µ–ª–∏ Remnawave")
                    else:
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–∏ Remnawave
                        from app.services.subscription_service import SubscriptionService
                        subscription_service = SubscriptionService()
                        await subscription_service.disable_remnawave_user(user.remnawave_uuid)
                        logger.info(f"‚úÖ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.remnawave_uuid} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∂–∏–º: {delete_mode})")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Remnawave (—Ä–µ–∂–∏–º: {delete_mode}): {e}")
                    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                    if delete_mode == "delete":
                        try:
                            from app.services.subscription_service import SubscriptionService
                            subscription_service = SubscriptionService()
                            await subscription_service.disable_remnawave_user(user.remnawave_uuid)
                            logger.info(f"‚úÖ RemnaWave –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.remnawave_uuid} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ fallback")
                        except Exception as fallback_e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ RemnaWave –∫–∞–∫ fallback: {fallback_e}")
            
            try:
                sent_notifications_result = await db.execute(
                    select(SentNotification).where(SentNotification.user_id == user_id)
                )
                sent_notifications = sent_notifications_result.scalars().all()
                
                if sent_notifications:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(sent_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    await db.execute(
                        delete(SentNotification).where(SentNotification.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
            try:
                if user.subscription:
                    subscription_servers_result = await db.execute(
                        select(SubscriptionServer).where(
                            SubscriptionServer.subscription_id == user.subscription.id
                        )
                    )
                    subscription_servers = subscription_servers_result.scalars().all()

                    await decrement_subscription_server_counts(
                        db,
                        user.subscription,
                        subscription_servers=subscription_servers,
                    )

                    if subscription_servers:
                        logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(subscription_servers)} —Å–≤—è–∑–µ–π –ø–æ–¥–ø–∏—Å–∫–∞-—Å–µ—Ä–≤–µ—Ä")
                        await db.execute(
                            delete(SubscriptionServer).where(
                                SubscriptionServer.subscription_id == user.subscription.id
                            )
                        )
                        await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–æ–¥–ø–∏—Å–∫–∞-—Å–µ—Ä–≤–µ—Ä: {e}")
    
            try:
                user_messages_result = await db.execute(
                    update(UserMessage)
                    .where(UserMessage.created_by == user_id)
                    .values(created_by=None)
                )
                if user_messages_result.rowcount > 0:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {user_messages_result.rowcount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
            try:
                promocodes_result = await db.execute(
                    update(PromoCode)
                    .where(PromoCode.created_by == user_id)
                    .values(created_by=None)
                )
                if promocodes_result.rowcount > 0:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {promocodes_result.rowcount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
                await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
    
            try:
                welcome_texts_result = await db.execute(
                    update(WelcomeText)
                    .where(WelcomeText.created_by == user_id)
                    .values(created_by=None)
                )
                if welcome_texts_result.rowcount > 0:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {welcome_texts_result.rowcount} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
                await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {e}")
    
            try:
                referrals_result = await db.execute(
                    update(User)
                    .where(User.referred_by_id == user_id)
                    .values(referred_by_id=None)
                )
                if referrals_result.rowcount > 0:
                    logger.info(f"üîó –û—á–∏—â–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —É {referrals_result.rowcount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
                await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
    
            try:
                yookassa_result = await db.execute(
                    select(YooKassaPayment).where(YooKassaPayment.user_id == user_id)
                )
                yookassa_payments = yookassa_result.scalars().all()
                
                if yookassa_payments:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(yookassa_payments)} YooKassa –ø–ª–∞—Ç–µ–∂–µ–π")
                    await db.execute(
                        update(YooKassaPayment)
                        .where(YooKassaPayment.user_id == user_id)
                        .values(transaction_id=None)
                    )
                    await db.flush()
                    await db.execute(
                        delete(YooKassaPayment).where(YooKassaPayment.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    
            try:
                cryptobot_result = await db.execute(
                    select(CryptoBotPayment).where(CryptoBotPayment.user_id == user_id)
                )
                cryptobot_payments = cryptobot_result.scalars().all()

                if cryptobot_payments:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(cryptobot_payments)} CryptoBot –ø–ª–∞—Ç–µ–∂–µ–π")
                    await db.execute(
                        update(CryptoBotPayment)
                        .where(CryptoBotPayment.user_id == user_id)
                        .values(transaction_id=None)
                    )
                    await db.flush()
                    await db.execute(
                        delete(CryptoBotPayment).where(CryptoBotPayment.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è CryptoBot –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

            try:
                mulenpay_result = await db.execute(
                    select(MulenPayPayment).where(MulenPayPayment.user_id == user_id)
                )
                mulenpay_payments = mulenpay_result.scalars().all()

                if mulenpay_payments:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(mulenpay_payments)} MulenPay –ø–ª–∞—Ç–µ–∂–µ–π")
                    await db.execute(
                        update(MulenPayPayment)
                        .where(MulenPayPayment.user_id == user_id)
                        .values(transaction_id=None)
                    )
                    await db.flush()
                    await db.execute(
                        delete(MulenPayPayment).where(MulenPayPayment.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è MulenPay –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

            try:
                pal24_result = await db.execute(
                    select(Pal24Payment).where(Pal24Payment.user_id == user_id)
                )
                pal24_payments = pal24_result.scalars().all()

                if pal24_payments:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(pal24_payments)} Pal24 –ø–ª–∞—Ç–µ–∂–µ–π")
                    await db.execute(
                        update(Pal24Payment)
                        .where(Pal24Payment.user_id == user_id)
                        .values(transaction_id=None)
                    )
                    await db.flush()
                    await db.execute(
                        delete(Pal24Payment).where(Pal24Payment.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Pal24 –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

            try:
                transactions_result = await db.execute(
                    select(Transaction).where(Transaction.user_id == user_id)
                )
                transactions = transactions_result.scalars().all()
                
                if transactions:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    await db.execute(
                        delete(Transaction).where(Transaction.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
    
            try:
                promocode_uses_result = await db.execute(
                    select(PromoCodeUse).where(PromoCodeUse.user_id == user_id)
                )
                promocode_uses = promocode_uses_result.scalars().all()
                
                if promocode_uses:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(promocode_uses)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
                    await db.execute(
                        delete(PromoCodeUse).where(PromoCodeUse.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
    
            try:
                referral_earnings_result = await db.execute(
                    select(ReferralEarning).where(ReferralEarning.user_id == user_id)
                )
                referral_earnings = referral_earnings_result.scalars().all()
                
                if referral_earnings:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(referral_earnings)} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤")
                    await db.execute(
                        delete(ReferralEarning).where(ReferralEarning.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤: {e}")
    
            try:
                referral_records_result = await db.execute(
                    select(ReferralEarning).where(ReferralEarning.referral_id == user_id)
                )
                referral_records = referral_records_result.scalars().all()
                
                if referral_records:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(referral_records)} –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö")
                    await db.execute(
                        delete(ReferralEarning).where(ReferralEarning.referral_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {e}")
    
            try:
                conversions_result = await db.execute(
                    select(SubscriptionConversion).where(SubscriptionConversion.user_id == user_id)
                )
                conversions = conversions_result.scalars().all()
                
                if conversions:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(conversions)} –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–π")
                    await db.execute(
                        delete(SubscriptionConversion).where(SubscriptionConversion.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {e}")
    
            try:
                broadcast_history_result = await db.execute(
                    select(BroadcastHistory).where(BroadcastHistory.admin_id == user_id)
                )
                broadcast_history = broadcast_history_result.scalars().all()

                if broadcast_history:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º {len(broadcast_history)} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫")
                    await db.execute(
                        delete(BroadcastHistory).where(BroadcastHistory.admin_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

            try:
                campaigns_result = await db.execute(
                    select(AdvertisingCampaign).where(AdvertisingCampaign.created_by == user_id)
                )
                campaigns = campaigns_result.scalars().all()

                if campaigns:
                    logger.info(f"üîÑ –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —É {len(campaigns)} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
                    await db.execute(
                        update(AdvertisingCampaign)
                        .where(AdvertisingCampaign.created_by == user_id)
                        .values(created_by=None)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {e}")
    
            try:
                if user.subscription:
                    logger.info(f"üîÑ –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É {user.subscription.id}")
                    await db.execute(
                        delete(Subscription).where(Subscription.user_id == user_id)
                    )
                    await db.flush()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
            try:
                await db.execute(
                    delete(User).where(User.id == user_id)
                )
                await db.commit()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await db.rollback()
                return False
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (ID: {user_id}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await db.rollback()
            return False
    
    async def get_user_statistics(self, db: AsyncSession) -> Dict[str, Any]:
        try:
            stats = await get_users_statistics(db)
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {
                "total_users": 0,
                "active_users": 0,
                "blocked_users": 0,
                "new_today": 0,
                "new_week": 0,
                "new_month": 0
            }
    
    async def cleanup_inactive_users(
        self,
        db: AsyncSession,
        months: int = None
    ) -> int:
        try:
            if months is None:
                months = settings.INACTIVE_USER_DELETE_MONTHS
            
            inactive_users = await get_inactive_users(db, months)
            deleted_count = 0
            
            for user in inactive_users:
                success = await self.delete_user_account(db, user.id, 0) 
                if success:
                    deleted_count += 1
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0
    
    async def get_user_activity_summary(
        self,
        db: AsyncSession,
        user_id: int
    ) -> Dict[str, Any]:
        try:
            user = await get_user_by_id(db, user_id)
            if not user:
                return {}
            
            subscription = await get_subscription_by_user_id(db, user_id)
            transactions_count = await get_user_transactions_count(db, user_id)
            
            days_since_registration = (datetime.utcnow() - user.created_at).days
            
            days_since_activity = (datetime.utcnow() - user.last_activity).days if user.last_activity else None
            
            return {
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "username": user.username,
                "full_name": user.full_name,
                "status": user.status,
                "language": user.language,
                "balance_kopeks": user.balance_kopeks,
                "registration_date": user.created_at,
                "last_activity": user.last_activity,
                "days_since_registration": days_since_registration,
                "days_since_activity": days_since_activity,
                "has_subscription": subscription is not None,
                "subscription_active": subscription.is_active if subscription else False,
                "subscription_trial": subscription.is_trial if subscription else False,
                "transactions_count": transactions_count,
                "referrer_id": user.referred_by_id,
                "referral_code": user.referral_code
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    async def get_users_by_criteria(
        self,
        db: AsyncSession,
        criteria: Dict[str, Any]
    ) -> List[User]:
        try:
            status = criteria.get('status')
            has_subscription = criteria.get('has_subscription')
            is_trial = criteria.get('is_trial')
            min_balance = criteria.get('min_balance', 0)
            max_balance = criteria.get('max_balance')
            days_inactive = criteria.get('days_inactive')
            
            registered_after = criteria.get('registered_after')
            registered_before = criteria.get('registered_before')
            
            users = await get_users_list(db, offset=0, limit=10000, status=status)
            
            filtered_users = []
            for user in users:
                if user.balance_kopeks < min_balance:
                    continue
                if max_balance and user.balance_kopeks > max_balance:
                    continue
                
                if registered_after and user.created_at < registered_after:
                    continue
                if registered_before and user.created_at > registered_before:
                    continue
                
                if days_inactive and user.last_activity:
                    inactive_threshold = datetime.utcnow() - timedelta(days=days_inactive)
                    if user.last_activity > inactive_threshold:
                        continue
                
                filtered_users.append(user)
            
            return filtered_users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {e}")
            return []
