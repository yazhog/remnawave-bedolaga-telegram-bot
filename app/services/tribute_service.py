import logging
import json
from typing import Optional, Dict, Any
from datetime import datetime

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.config import settings
from app.database.database import get_db
from app.database.models import Transaction, TransactionType, PaymentMethod
from app.database.crud.transaction import (
    create_transaction, get_transaction_by_external_id, complete_transaction
)
from app.database.crud.user import get_user_by_telegram_id
from app.external.tribute import TributeService as TributeAPI
from app.services.payment_service import PaymentService
from app.utils.user_utils import format_referrer_info

logger = logging.getLogger(__name__)


class TributeService:
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.tribute_api = TributeAPI()
    
    async def create_payment_link(
        self,
        user_id: int,
        amount_kopeks: int,
        description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
    ) -> Optional[str]:
        
        if not settings.TRIBUTE_ENABLED:
            logger.warning("Tribute –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return None
        
        try:
            payment_url = await self.tribute_api.create_payment_link(
                user_id=user_id,
                amount_kopeks=amount_kopeks,
                description=description
            )
            
            if not payment_url:
                return None
            
            return payment_url
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Tribute –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    async def process_webhook(
        self,
        payload: str
    ) -> Dict[str, Any]:
        
        try:
            webhook_data = json.loads(payload)
        except json.JSONDecodeError:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ Tribute webhook")
            return {"status": "error", "reason": "invalid_json"}
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω Tribute webhook: {json.dumps(webhook_data, ensure_ascii=False)}")
        
        processed_data = await self.tribute_api.process_webhook(webhook_data)
        if not processed_data:
            return {"status": "ignored", "reason": "invalid_data"}
        
        event_type = processed_data.get("event_type", "payment")
        status = processed_data.get("status")
        
        if event_type == "payment" and status == "paid":
            await self._handle_successful_payment(processed_data)
        elif event_type == "payment" and status == "failed":
            await self._handle_failed_payment(processed_data)
        elif event_type == "refund":
            await self._handle_refund(processed_data)
        
        return {"status": "ok", "event": event_type}
    
    async def _handle_successful_payment(self, payment_data: Dict[str, Any]):
        try:
            user_telegram_id = payment_data["user_id"] 
            amount_kopeks = payment_data["amount_kopeks"]
            payment_id = payment_data["payment_id"]
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π Tribute –ø–ª–∞—Ç–µ–∂: user_telegram_id={user_telegram_id}, amount={amount_kopeks}, payment_id={payment_id}")
            
            async for session in get_db():
                user = await get_user_by_telegram_id(session, user_telegram_id)
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance_kopeks} –∫–æ–ø")
                
                from app.database.crud.transaction import check_tribute_payment_duplicate
                
                duplicate_transaction = await check_tribute_payment_duplicate(
                    session, payment_id, amount_kopeks, user_telegram_id
                )
                
                if duplicate_transaction:
                    logger.warning(f"–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á:")
                    logger.warning(f"   Transaction ID: {duplicate_transaction.id}")
                    logger.warning(f"   Amount: {duplicate_transaction.amount_kopeks} –∫–æ–ø")
                    logger.warning(f"   Created: {duplicate_transaction.created_at}")
                    logger.warning(f"   External ID: {duplicate_transaction.external_id}")
                    logger.warning(f"–ü–ª–∞—Ç–µ–∂ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω - —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç —Å–≤–µ–∂–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
                    return
                
                from app.database.crud.transaction import create_unique_tribute_transaction
                
                transaction = await create_unique_tribute_transaction(
                    db=session,
                    user_id=user.id,
                    payment_id=payment_id,
                    amount_kopeks=amount_kopeks,
                    description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Tribute: {amount_kopeks/100}‚ÇΩ (ID: {payment_id})"
                )

                old_balance = user.balance_kopeks
                was_first_topup = not user.has_made_first_topup

                user.balance_kopeks += amount_kopeks
                user.updated_at = datetime.utcnow()

                promo_group = getattr(user, "promo_group", None)
                subscription = getattr(user, "subscription", None)
                referrer_info = format_referrer_info(user)
                topup_status = "üÜï –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if was_first_topup else "üîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"

                await session.commit()

                try:
                    from app.services.referral_service import process_referral_topup
                    await process_referral_topup(session, user.id, amount_kopeks, self.bot)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Tribute: {e}")

                if was_first_topup and not user.has_made_first_topup:
                    user.has_made_first_topup = True
                    await session.commit()

                await session.refresh(user)

                logger.info(
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {old_balance} -> {user.balance_kopeks} –∫–æ–ø (+{amount_kopeks})"
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: {transaction.id}")

                if was_first_topup:
                    logger.info(f"–û—Ç–º–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —Ç–æ–ø–∞–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")


                try:
                    from app.services.admin_notification_service import AdminNotificationService
                    notification_service = AdminNotificationService(self.bot)
                    await notification_service.send_balance_topup_notification(
                        user,
                        transaction,
                        old_balance,
                        topup_status=topup_status,
                        referrer_info=referrer_info,
                        subscription=subscription,
                        promo_group=promo_group,
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ Tribute –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
                
                await self._send_success_notification(user_telegram_id, amount_kopeks)
                
                logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Tribute –ø–ª–∞—Ç–µ–∂: {amount_kopeks/100}‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                break
                
        except Exception as e:
            logger.error(f"‚åò –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ Tribute –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
    
    async def _handle_failed_payment(self, payment_data: Dict[str, Any]):
        
        try:
            user_id = payment_data["user_id"]
            payment_id = payment_data["payment_id"]
            
            async for session in get_db():
                transaction = await get_transaction_by_external_id(
                    session, f"donation_{payment_id}", PaymentMethod.TRIBUTE
                )
                
                if transaction:
                    transaction.description = f"{transaction.description} (–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω)"
                    await session.commit()
                
                await self._send_failure_notification(user_id)
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π Tribute –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ Tribute –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def _handle_refund(self, refund_data: Dict[str, Any]):
        
        try:
            user_id = refund_data["user_id"]
            amount_kopeks = refund_data["amount_kopeks"]
            payment_id = refund_data["payment_id"]
            
            async for session in get_db():
                await create_transaction(
                    db=session,
                    user_id=user_id,
                    type=TransactionType.REFUND,
                    amount_kopeks=-amount_kopeks, 
                    description=f"–í–æ–∑–≤—Ä–∞—Ç Tribute –ø–ª–∞—Ç–µ–∂–∞ {payment_id}",
                    payment_method=PaymentMethod.TRIBUTE,
                    external_id=f"refund_{payment_id}",
                    is_completed=True
                )
                
                user = await get_user_by_telegram_id(session, user_id)
                if user and user.balance_kopeks >= amount_kopeks:
                    user.balance_kopeks -= amount_kopeks
                    await session.commit()
                
                await self._send_refund_notification(user_id, amount_kopeks)
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç Tribute: {amount_kopeks/100}‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ Tribute: {e}")
    
    async def _send_success_notification(self, user_id: int, amount_kopeks: int):

        try:
            amount_rubles = amount_kopeks / 100

            async for session in get_db():
                user = await get_user_by_telegram_id(session, user_id)
                break

            payment_service = PaymentService(self.bot)
            keyboard = await payment_service.build_topup_success_keyboard(user)

            text = (
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"üí∞ –°—É–º–º–∞: {int(amount_rubles)} ‚ÇΩ\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: Tribute\n"
                f"üéâ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üôè"
            )

            await self.bot.send_message(
                user_id,
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")


    async def _send_failure_notification(self, user_id: int):
        
        try:
            text = (
                "‚åò **–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª**\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Tribute –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–∞–Ω–∫–∞\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="menu_balance")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]
            ])
            
            await self.bot.send_message(
                user_id,
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")
    
    async def _send_refund_notification(self, user_id: int, amount_kopeks: int):
        
        try:
            amount_rubles = amount_kopeks / 100
            
            text = (
                f"üîÑ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n\n"
                f"üí∞ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {int(amount_rubles)} ‚ÇΩ\n"
                f"üí≥ –°–ø–æ—Å–æ–±: Tribute\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            await self.bot.send_message(
                user_id,
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
    
    async def force_process_payment(
        self, 
        payment_id: str, 
        user_id: int, 
        amount_kopeks: int,
        description: str = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Tribute –ø–ª–∞—Ç–µ–∂–∞"
    ) -> bool:
        
        try:
            logger.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: payment_id={payment_id}, user_id={user_id}, amount={amount_kopeks}")
            
            async for session in get_db():
                user = await get_user_by_telegram_id(session, user_id)
                if not user:
                    logger.error(f"‚åò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                external_id = f"force_donation_{payment_id}_{int(datetime.utcnow().timestamp())}"
                
                transaction = await create_transaction(
                    db=session,
                    user_id=user.id,
                    type=TransactionType.DEPOSIT,
                    amount_kopeks=amount_kopeks,
                    description=description,
                    payment_method=PaymentMethod.TRIBUTE,
                    external_id=external_id,
                    is_completed=True
                )
                
                old_balance = user.balance_kopeks
                user.balance_kopeks += amount_kopeks
                user.updated_at = datetime.utcnow()
                
                await session.commit()
                
                logger.info(f"üí∞ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: {old_balance} -> {user.balance_kopeks} –∫–æ–ø")
                
                await self._send_success_notification(user_id, amount_kopeks)
                
                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚åò –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
            return False
    
    async def get_payment_status(self, payment_id: str) -> Optional[Dict[str, Any]]:
        return await self.tribute_api.get_payment_status(payment_id)
    
    async def create_refund(
        self,
        payment_id: str,
        amount_kopeks: Optional[int] = None,
        reason: str = "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"
    ) -> Optional[Dict[str, Any]]:
        return await self.tribute_api.refund_payment(payment_id, amount_kopeks, reason)
