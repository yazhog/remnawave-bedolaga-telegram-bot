import logging
from aiogram import Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.services.version_service import version_service
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)


def get_updates_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                callback_data="admin_updates_check"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏",
                callback_data="admin_updates_info"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                url=f"https://github.com/{version_service.repo}/releases"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_version_info_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_updates_info"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º",
                callback_data="admin_updates"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@admin_required
@error_handler
async def show_updates_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        version_info = await version_service.get_version_info()
        
        current_version = version_info['current_version']
        has_updates = version_info['has_updates']
        total_newer = version_info['total_newer']
        last_check = version_info['last_check']
        
        status_icon = "üÜï" if has_updates else "‚úÖ"
        status_text = f"–î–æ—Å—Ç—É–ø–Ω–æ {total_newer} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π" if has_updates else "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"
        
        last_check_text = ""
        if last_check:
            last_check_text = f"\nüïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check.strftime('%d.%m.%Y %H:%M')}"
        
        message = f"""üîÑ <b>–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô</b>

üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{current_version}</code>
{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üîó <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {version_service.repo}{last_check_text}

‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö."""
        
        await callback.message.edit_text(
            message,
            reply_markup=get_updates_keyboard(db_user.language),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", show_alert=True)


@admin_required
@error_handler
async def check_updates(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    try:
        has_updates, newer_releases = await version_service.check_for_updates(force=True)
        
        if not has_updates:
            message = f"""‚úÖ <b>–û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–´</b>

üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{version_service.current_version}</code>
üéØ <b>–°—Ç–∞—Ç—É—Å:</b> –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è

üîó <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {version_service.repo}"""
            
        else:
            updates_list = []
            for i, release in enumerate(newer_releases[:5]): 
                icon = version_service.format_version_display(release).split()[0]
                updates_list.append(
                    f"{i+1}. {icon} <code>{release.tag_name}</code> ‚Ä¢ {release.formatted_date}"
                )
            
            updates_text = "\n".join(updates_list)
            more_text = f"\n\nüìã –ò –µ—â–µ {len(newer_releases) - 5} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..." if len(newer_releases) > 5 else ""
            
            message = f"""üÜï <b>–ù–ê–ô–î–ï–ù–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø</b>

üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{version_service.current_version}</code>
üéØ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b> {len(newer_releases)}

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏:</b>
{updates_text}{more_text}

üîó <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {version_service.repo}"""
        
        keyboard = get_updates_keyboard(db_user.language)
        
        if has_updates:
            keyboard.inline_keyboard.insert(-2, [
                InlineKeyboardButton(
                    text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–µ—Ä—Å–∏—è—Ö",
                    callback_data="admin_updates_info"
                )
            ])
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º GitHub.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{version_service.current_version}</code>",
            reply_markup=get_updates_keyboard(db_user.language),
            parse_mode="HTML"
        )


@admin_required
@error_handler
async def show_version_info(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.answer("üìã –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏—è—Ö...")
    
    try:
        version_info = await version_service.get_version_info()
        
        current_version = version_info['current_version']
        current_release = version_info['current_release']
        newer_releases = version_info['newer_releases']
        has_updates = version_info['has_updates']
        last_check = version_info['last_check']
        repo_url = version_info['repo_url']
        
        current_info = f"üì¶ <b>–¢–ï–ö–£–©–ê–Ø –í–ï–†–°–ò–Ø</b>\n\n"
        
        if current_release:
            current_info += f"üè∑Ô∏è <b>–í–µ—Ä—Å–∏—è:</b> <code>{current_release.tag_name}</code>\n"
            current_info += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:</b> {current_release.formatted_date}\n"
            if current_release.short_description:
                current_info += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{current_release.short_description}\n"
        else:
            current_info += f"üè∑Ô∏è <b>–í–µ—Ä—Å–∏—è:</b> <code>{current_version}</code>\n"
            current_info += f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        message_parts = [current_info]
        
        if has_updates and newer_releases:
            updates_info = f"\nüÜï <b>–î–û–°–¢–£–ü–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø</b>\n\n"
            
            for i, release in enumerate(newer_releases):
                icon = "üî•" if i == 0 else "üì¶"
                if release.prerelease:
                    icon = "üß™"
                elif release.is_dev:
                    icon = "üîß"
                
                updates_info += f"{icon} <b>{release.tag_name}</b>\n"
                updates_info += f"   üìÖ {release.formatted_date}\n"
                if release.short_description:
                    updates_info += f"   üìù {release.short_description}\n"
                updates_info += "\n"
            
            message_parts.append(updates_info.rstrip())
        
        system_info = f"\nüîß <b>–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô</b>\n\n"
        system_info += f"üîó <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> {version_service.repo}\n"
        system_info += f"‚ö° <b>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if version_service.enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        system_info += f"üïê <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> –ö–∞–∂–¥—ã–π —á–∞—Å\n"
        
        if last_check:
            system_info += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_check.strftime('%d.%m.%Y %H:%M')}\n"
        
        message_parts.append(system_info.rstrip())
        
        final_message = "\n".join(message_parts)
        
        if len(final_message) > 4000:
            final_message = final_message[:3900] + "\n\n... (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞)"
        
        await callback.message.edit_text(
            final_message,
            reply_markup=get_version_info_keyboard(db_user.language),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏—è—Ö: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏—è—Ö.\n\n"
            f"üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{version_service.current_version}</code>",
            reply_markup=get_version_info_keyboard(db_user.language),
            parse_mode="HTML"
        )


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_updates_menu,
        F.data == "admin_updates"
    )
    
    dp.callback_query.register(
        check_updates,
        F.data == "admin_updates_check"
    )
    
    dp.callback_query.register(
        show_version_info,
        F.data == "admin_updates_info"
    )
