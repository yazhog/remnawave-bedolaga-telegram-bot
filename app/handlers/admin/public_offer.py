import html
import logging
from datetime import datetime

from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.localization.texts import get_texts
from app.services.public_offer_service import PublicOfferService
from app.states import AdminStates
from app.utils.decorators import admin_required, error_handler
from app.utils.validators import validate_html_tags, get_html_help_text

logger = logging.getLogger(__name__)


def _format_timestamp(value: datetime | None) -> str:
    if not value:
        return ""
    try:
        return value.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return ""


async def _build_overview(
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    offer = await PublicOfferService.get_offer(
        db,
        db_user.language,
        fallback=False,
    )

    normalized_language = PublicOfferService.normalize_language(db_user.language)
    has_content = bool(offer and offer.content and offer.content.strip())

    description = texts.t(
        "ADMIN_PUBLIC_OFFER_DESCRIPTION",
        "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Ñ–æ¬ª.",
    )

    status_text = texts.t(
        "ADMIN_PUBLIC_OFFER_STATUS_DISABLED",
        "‚ö†Ô∏è –ü–æ–∫–∞–∑ –æ—Ñ–µ—Ä—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
    )
    if offer and offer.is_enabled and has_content:
        status_text = texts.t(
            "ADMIN_PUBLIC_OFFER_STATUS_ENABLED",
            "‚úÖ –û—Ñ–µ—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        )
    elif offer and offer.is_enabled:
        status_text = texts.t(
            "ADMIN_PUBLIC_OFFER_STATUS_ENABLED_EMPTY",
            "‚ö†Ô∏è –û—Ñ–µ—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—ë –Ω–µ —É–≤–∏–¥—è—Ç.",
        )

    updated_at = _format_timestamp(getattr(offer, "updated_at", None))
    updated_block = ""
    if updated_at:
        updated_block = texts.t(
            "ADMIN_PUBLIC_OFFER_UPDATED_AT",
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}",
        ).format(timestamp=updated_at)

    preview_block = texts.t(
        "ADMIN_PUBLIC_OFFER_PREVIEW_EMPTY",
        "–¢–µ–∫—Å—Ç –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω.",
    )
    if has_content:
        preview_title = texts.t(
            "ADMIN_PUBLIC_OFFER_PREVIEW_TITLE",
            "<b>–ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞:</b>",
        )
        preview_raw = offer.content.strip()
        preview_trimmed = preview_raw[:400]
        if len(preview_raw) > 400:
            preview_trimmed += "..."
        preview_block = (
            f"{preview_title}\n"
            f"<code>{html.escape(preview_trimmed)}</code>"
        )

    language_block = texts.t(
        "ADMIN_PUBLIC_OFFER_LANGUAGE",
        "–Ø–∑—ã–∫: <code>{lang}</code>",
    ).format(lang=normalized_language)

    header = texts.t(
        "ADMIN_PUBLIC_OFFER_HEADER",
        "üìÑ <b>–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞</b>",
    )
    actions_prompt = texts.t(
        "ADMIN_PUBLIC_OFFER_ACTION_PROMPT",
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    )

    message_parts = [
        header,
        description,
        language_block,
        status_text,
    ]

    if updated_block:
        message_parts.append(updated_block)

    message_parts.append(preview_block)
    message_parts.append(actions_prompt)

    overview_text = "\n\n".join(part for part in message_parts if part)

    buttons: list[list[types.InlineKeyboardButton]] = []

    buttons.append([
        types.InlineKeyboardButton(
            text=texts.t(
                "ADMIN_PUBLIC_OFFER_EDIT_BUTTON",
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
            ),
            callback_data="admin_public_offer_edit",
        )
    ])

    if has_content:
        buttons.append([
            types.InlineKeyboardButton(
                text=texts.t(
                    "ADMIN_PUBLIC_OFFER_VIEW_BUTTON",
                    "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç",
                ),
                callback_data="admin_public_offer_view",
            )
        ])

    toggle_text = texts.t(
        "ADMIN_PUBLIC_OFFER_ENABLE_BUTTON",
        "‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑",
    )
    if offer and offer.is_enabled:
        toggle_text = texts.t(
            "ADMIN_PUBLIC_OFFER_DISABLE_BUTTON",
            "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑",
        )

    buttons.append([
        types.InlineKeyboardButton(
            text=toggle_text,
            callback_data="admin_public_offer_toggle",
        )
    ])

    buttons.append([
        types.InlineKeyboardButton(
            text=texts.t(
                "ADMIN_PUBLIC_OFFER_HTML_HELP",
                "‚ÑπÔ∏è HTML –ø–æ–º–æ—â—å",
            ),
            callback_data="admin_public_offer_help",
        )
    ])

    buttons.append([
        types.InlineKeyboardButton(
            text=texts.BACK,
            callback_data="admin_submenu_settings",
        )
    ])

    return overview_text, types.InlineKeyboardMarkup(inline_keyboard=buttons), offer


@admin_required
@error_handler
async def show_public_offer_management(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    overview_text, markup, _ = await _build_overview(db_user, db)

    await callback.message.edit_text(
        overview_text,
        reply_markup=markup,
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_public_offer(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    updated_offer = await PublicOfferService.toggle_enabled(db, db_user.language)
    logger.info(
        "–ê–¥–º–∏–Ω %s –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –ø–æ–∫–∞–∑ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã: %s",
        db_user.telegram_id,
        "enabled" if updated_offer.is_enabled else "disabled",
    )
    status_message = (
        texts.t("ADMIN_PUBLIC_OFFER_ENABLED", "‚úÖ –û—Ñ–µ—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        if updated_offer.is_enabled
        else texts.t("ADMIN_PUBLIC_OFFER_DISABLED", "üö´ –û—Ñ–µ—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    )

    overview_text, markup, _ = await _build_overview(db_user, db)
    await callback.message.edit_text(
        overview_text,
        reply_markup=markup,
    )
    await callback.answer(status_message)


@admin_required
@error_handler
async def start_edit_public_offer(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)

    offer = await PublicOfferService.get_offer(
        db,
        db_user.language,
        fallback=False,
    )

    current_preview = ""
    if offer and offer.content:
        preview = offer.content.strip()[:400]
        if len(offer.content.strip()) > 400:
            preview += "..."
        current_preview = (
            texts.t(
                "ADMIN_PUBLIC_OFFER_CURRENT_PREVIEW",
                "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–ø—Ä–µ–≤—å—é):",
            )
            + f"\n<code>{html.escape(preview)}</code>\n\n"
        )

    prompt = texts.t(
        "ADMIN_PUBLIC_OFFER_EDIT_PROMPT",
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.",
    )

    hint = texts.t(
        "ADMIN_PUBLIC_OFFER_EDIT_HINT",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /html_help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–≥–∞–º.",
    )

    message_text = (
        f"üìù <b>{texts.t('ADMIN_PUBLIC_OFFER_EDIT_TITLE', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã')}</b>\n\n"
        f"{current_preview}{prompt}\n\n{hint}"
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_PUBLIC_OFFER_HTML_HELP",
                        "‚ÑπÔ∏è HTML –ø–æ–º–æ—â—å",
                    ),
                    callback_data="admin_public_offer_help",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_PUBLIC_OFFER_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"),
                    callback_data="admin_public_offer_cancel",
                )
            ],
        ]
    )

    await callback.message.edit_text(message_text, reply_markup=keyboard)
    await state.set_state(AdminStates.editing_public_offer)
    await callback.answer()


@admin_required
@error_handler
async def cancel_edit_public_offer(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    await state.clear()
    overview_text, markup, _ = await _build_overview(db_user, db)
    await callback.message.edit_text(
        overview_text,
        reply_markup=markup,
    )
    await callback.answer(
        get_texts(db_user.language).t(
            "ADMIN_PUBLIC_OFFER_EDIT_CANCELLED",
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
    )


@admin_required
@error_handler
async def process_public_offer_edit(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    new_text = message.text or ""

    if len(new_text) > 4000:
        await message.answer(
            texts.t(
                "ADMIN_PUBLIC_OFFER_TOO_LONG",
                "‚ùå –¢–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            )
        )
        return

    is_valid, error_message = validate_html_tags(new_text)
    if not is_valid:
        await message.answer(
            texts.t(
                "ADMIN_PUBLIC_OFFER_HTML_ERROR",
                "‚ùå –û—à–∏–±–∫–∞ –≤ HTML: {error}",
            ).format(error=error_message)
        )
        return

    await PublicOfferService.save_offer(db, db_user.language, new_text)
    logger.info(
        "–ê–¥–º–∏–Ω %s –æ–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã (%d —Å–∏–º–≤–æ–ª–æ–≤)",
        db_user.telegram_id,
        len(new_text),
    )
    await state.clear()

    success_text = texts.t(
        "ADMIN_PUBLIC_OFFER_SAVED",
        "‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
    )

    reply_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_PUBLIC_OFFER_BACK_BUTTON",
                        "‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—Ñ–µ—Ä—Ç—ã",
                    ),
                    callback_data="admin_public_offer",
                )
            ]
        ]
    )

    await message.answer(success_text, reply_markup=reply_markup)


@admin_required
@error_handler
async def view_public_offer(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    offer = await PublicOfferService.get_offer(
        db,
        db_user.language,
        fallback=False,
    )

    if not offer or not offer.content or not offer.content.strip():
        await callback.answer(
            texts.t(
                "ADMIN_PUBLIC_OFFER_PREVIEW_EMPTY_ALERT",
                "–¢–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.",
            ),
            show_alert=True,
        )
        return

    content = offer.content.strip()
    max_length = 3800
    pages = PublicOfferService.split_content_into_pages(
        content,
        max_length=max_length,
    )

    if not pages:
        await callback.answer(
            texts.t(
                "ADMIN_PUBLIC_OFFER_PREVIEW_EMPTY_ALERT",
                "–¢–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.",
            ),
            show_alert=True,
        )
        return

    preview = pages[0]
    truncated = len(pages) > 1

    header = texts.t(
        "ADMIN_PUBLIC_OFFER_VIEW_TITLE",
        "üëÄ <b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã</b>",
    )

    note = ""
    if truncated:
        note = texts.t(
            "ADMIN_PUBLIC_OFFER_VIEW_TRUNCATED",
            "\n\n‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â—ë–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–µ–Ω—é.",
        )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_PUBLIC_OFFER_BACK_BUTTON",
                        "‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—Ñ–µ—Ä—Ç—ã",
                    ),
                    callback_data="admin_public_offer",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_PUBLIC_OFFER_EDIT_BUTTON",
                        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
                    ),
                    callback_data="admin_public_offer_edit",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        f"{header}\n\n{preview}{note}",
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def show_public_offer_html_help(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    help_text = get_html_help_text()

    current_state = await state.get_state()

    buttons: list[list[types.InlineKeyboardButton]] = []

    if current_state == AdminStates.editing_public_offer.state:
        buttons.append([
            types.InlineKeyboardButton(
                text=texts.t(
                    "ADMIN_PUBLIC_OFFER_RETURN_TO_EDIT",
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
                ),
                callback_data="admin_public_offer_edit",
            )
        ])

    buttons.append([
        types.InlineKeyboardButton(
            text=texts.t(
                "ADMIN_PUBLIC_OFFER_BACK_BUTTON",
                "‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—Ñ–µ—Ä—Ç—ã",
            ),
            callback_data="admin_public_offer",
        )
    ])

    await callback.message.edit_text(
        help_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons),
    )
    await callback.answer()


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(
        show_public_offer_management,
        F.data == "admin_public_offer",
    )
    dp.callback_query.register(
        toggle_public_offer,
        F.data == "admin_public_offer_toggle",
    )
    dp.callback_query.register(
        start_edit_public_offer,
        F.data == "admin_public_offer_edit",
    )
    dp.callback_query.register(
        cancel_edit_public_offer,
        F.data == "admin_public_offer_cancel",
    )
    dp.callback_query.register(
        view_public_offer,
        F.data == "admin_public_offer_view",
    )
    dp.callback_query.register(
        show_public_offer_html_help,
        F.data == "admin_public_offer_help",
    )

    dp.message.register(
        process_public_offer_edit,
        AdminStates.editing_public_offer,
    )
