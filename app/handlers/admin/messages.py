import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, or_

from app.config import settings
from app.states import AdminStates
from app.database.models import (
    User,
    UserStatus,
    Subscription,
    SubscriptionStatus,
    BroadcastHistory,
)
from app.keyboards.admin import (
    get_admin_messages_keyboard, get_broadcast_target_keyboard,
    get_custom_criteria_keyboard, get_broadcast_history_keyboard,
    get_admin_pagination_keyboard, get_broadcast_media_keyboard,
    get_media_confirm_keyboard, get_updated_message_buttons_selector_keyboard_with_media,
    BROADCAST_BUTTON_ROWS, DEFAULT_BROADCAST_BUTTONS,
    get_broadcast_button_config, get_broadcast_button_labels
)
from app.localization.texts import get_texts
from app.database.crud.user import get_users_list
from app.database.crud.subscription import get_expiring_subscriptions
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)

BUTTON_ROWS = BROADCAST_BUTTON_ROWS
DEFAULT_SELECTED_BUTTONS = DEFAULT_BROADCAST_BUTTONS


def get_message_buttons_selector_keyboard(language: str = "ru") -> types.InlineKeyboardMarkup:
    return get_updated_message_buttons_selector_keyboard(list(DEFAULT_SELECTED_BUTTONS), language)


def get_updated_message_buttons_selector_keyboard(selected_buttons: list, language: str = "ru") -> types.InlineKeyboardMarkup:
    return get_updated_message_buttons_selector_keyboard_with_media(selected_buttons, False, language)


def create_broadcast_keyboard(selected_buttons: list, language: str = "ru") -> Optional[types.InlineKeyboardMarkup]:
    selected_buttons = selected_buttons or []
    keyboard: list[list[types.InlineKeyboardButton]] = []
    button_config_map = get_broadcast_button_config(language)

    for row in BUTTON_ROWS:
        row_buttons: list[types.InlineKeyboardButton] = []
        for button_key in row:
            if button_key not in selected_buttons:
                continue
            button_config = button_config_map[button_key]
            row_buttons.append(
                types.InlineKeyboardButton(
                    text=button_config["text"],
                    callback_data=button_config["callback"]
                )
            )
        if row_buttons:
            keyboard.append(row_buttons)

    if not keyboard:
        return None

    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


@admin_required
@error_handler
async def show_messages_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    text = """
üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

- <b>–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- <b>–ü–æ –ø–æ–¥–ø–∏—Å–∫–∞–º</b> - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–¥–ø–∏—Å–∫–∏
- <b>–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b> - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
- <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫

‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏!
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_messages_keyboard(db_user.language),
        parse_mode="HTML"  
    )
    await callback.answer()


@admin_required
@error_handler
async def show_broadcast_targets(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_broadcast_target_keyboard(db_user.language),
        parse_mode="HTML" 
    )
    await callback.answer()


@admin_required
@error_handler
async def show_messages_history(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    page = 1
    if '_page_' in callback.data:
        page = int(callback.data.split('_page_')[1])
    
    limit = 10
    offset = (page - 1) * limit
    
    stmt = select(BroadcastHistory).order_by(BroadcastHistory.created_at.desc()).offset(offset).limit(limit)
    result = await db.execute(stmt)
    broadcasts = result.scalars().all()
    
    count_stmt = select(func.count(BroadcastHistory.id))
    count_result = await db.execute(count_stmt)
    total_count = count_result.scalar() or 0
    total_pages = (total_count + limit - 1) // limit
    
    if not broadcasts:
        text = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>

‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë –∑–¥–µ—Å—å.
"""
        keyboard = [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_messages")]]
    else:
        text = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
        
        for broadcast in broadcasts:
            status_emoji = "‚úÖ" if broadcast.status == "completed" else "‚ùå" if broadcast.status == "failed" else "‚è≥"
            success_rate = round((broadcast.sent_count / broadcast.total_count * 100), 1) if broadcast.total_count > 0 else 0
            
            message_preview = broadcast.message_text[:100] + "..." if len(broadcast.message_text) > 100 else broadcast.message_text
            
            import html
            message_preview = html.escape(message_preview) 
            
            text += f"""
{status_emoji} <b>{broadcast.created_at.strftime('%d.%m.%Y %H:%M')}</b>
üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {broadcast.sent_count}/{broadcast.total_count} ({success_rate}%)
üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {get_target_name(broadcast.target_type)}
üë§ –ê–¥–º–∏–Ω: {broadcast.admin_name}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_preview}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
        
        keyboard = get_broadcast_history_keyboard(page, total_pages, db_user.language).inline_keyboard
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_custom_broadcast(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    
    stats = await get_users_statistics(db)
    
    text = f"""
üìù <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>

üë• <b>–ü–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today']} —á–µ–ª.
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']} —á–µ–ª.
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['month']} —á–µ–ª.

üíº <b>–ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']} —á–µ–ª.
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7+ –¥–Ω–µ–π: {stats['inactive_week']} —á–µ–ª.
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 30+ –¥–Ω–µ–π: {stats['inactive_month']} —á–µ–ª.

üîó <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É:</b>
‚Ä¢ –ß–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['referrals']} —á–µ–ª.
‚Ä¢ –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['direct']} —á–µ–ª.

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_custom_criteria_keyboard(db_user.language),
        parse_mode="HTML" 
    )
    await callback.answer()


@admin_required
@error_handler
async def select_custom_criteria(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    criteria = callback.data.replace('criteria_', '')
    
    criteria_names = {
        "today": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "week": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü",
        "active_today": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "inactive_week": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7+ –¥–Ω–µ–π",
        "inactive_month": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 30+ –¥–Ω–µ–π",
        "referrals": "–ü—Ä–∏—à–µ–¥—à–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        "direct": "–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    }
    
    user_count = await get_custom_users_count(db, criteria)
    
    await state.update_data(broadcast_target=f"custom_{criteria}")
    
    await callback.message.edit_text(
        f"üì® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üéØ <b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {criteria_names.get(criteria, criteria)}\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_messages")]
        ]),
        parse_mode="HTML" 
    )
    
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()


@admin_required
@error_handler
async def select_broadcast_target(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    raw_target = callback.data[len("broadcast_"):]
    target_aliases = {
        "no_sub": "no",
    }
    target = target_aliases.get(raw_target, raw_target)

    target_names = {
        "all": "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "active": "–° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "trial": "–° —Ç—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "no": "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "expiring": "–° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "expired": "–° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "active_zero": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë",
        "trial_zero": "–¢—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë",
    }
    
    user_count = await get_target_users_count(db, target)
    
    await state.update_data(broadcast_target=target)
    
    await callback.message.edit_text(
        f"üì® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_names.get(target, target)}\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_messages")]
        ]),
        parse_mode="HTML" 
    )
    
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()


@admin_required
@error_handler
async def process_broadcast_message(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    broadcast_text = message.text
    
    if len(broadcast_text) > 4000:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(broadcast_message=broadcast_text)
    
    await message.answer(
        "üñºÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
        "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞:",
        reply_markup=get_broadcast_media_keyboard(db_user.language),
        parse_mode="HTML"
    )

@admin_required
@error_handler
async def handle_media_selection(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    if callback.data == "skip_media":
        await state.update_data(has_media=False)
        await show_button_selector_callback(callback, db_user, state)
        return
    
    media_type = callback.data.replace('add_media_', '')
    
    media_instructions = {
        "photo": "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        "video": "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        "document": "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    }
    
    await state.update_data(
        media_type=media_type,
        waiting_for_media=True
    )
    
    await callback.message.edit_text(
        f"{media_instructions.get(media_type, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª:')}\n\n"
        f"<i>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ú–ë</i>",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_messages")]
        ]),
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_broadcast_media)
    await callback.answer()

@admin_required
@error_handler
async def process_broadcast_media(
    message: types.Message,
    db_user: User,
    state: FSMContext
):
    data = await state.get_data()
    expected_type = data.get('media_type')
    
    media_file_id = None
    media_type = None
    
    if message.photo and expected_type == "photo":
        media_file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video and expected_type == "video":
        media_file_id = message.video.file_id
        media_type = "video"
    elif message.document and expected_type == "document":
        media_file_id = message.document.file_id
        media_type = "document"
    else:
        await message.answer(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {expected_type} –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
        return
    
    await state.update_data(
        has_media=True,
        media_file_id=media_file_id,
        media_type=media_type,
        media_caption=message.caption
    )
    
    await show_media_preview(message, db_user, state)

async def show_media_preview(
    message: types.Message,
    db_user: User,
    state: FSMContext
):
    data = await state.get_data()
    media_type = data.get('media_type')
    media_file_id = data.get('media_file_id')
    
    preview_text = f"üñºÔ∏è <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n" \
                   f"üìé <b>–¢–∏–ø:</b> {media_type}\n" \
                   f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n" \
                   f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    
    # –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –ø–∞—Ç—á–∏–Ω–≥–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    # —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    from app.utils.message_patch import _original_answer
    
    if media_type == "photo" and media_file_id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
        await message.bot.send_photo(
            chat_id=message.chat.id,
            photo=media_file_id,
            caption=preview_text,
            reply_markup=get_media_confirm_keyboard(db_user.language),
            parse_mode="HTML"
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await _original_answer(message, preview_text, 
                             reply_markup=get_media_confirm_keyboard(db_user.language), 
                             parse_mode="HTML")

@admin_required
@error_handler
async def handle_media_confirmation(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    action = callback.data
    
    if action == "confirm_media":
        await show_button_selector_callback(callback, db_user, state)
    elif action == "replace_media":
        data = await state.get_data()
        media_type = data.get('media_type', 'photo')
        await handle_media_selection(callback, db_user, state)
    elif action == "skip_media":
        await state.update_data(
            has_media=False,
            media_file_id=None,
            media_type=None,
            media_caption=None
        )
        await show_button_selector_callback(callback, db_user, state)

@admin_required
@error_handler
async def handle_change_media(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    await callback.message.edit_text(
        "üñºÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ–¥–∏–∞:",
        reply_markup=get_broadcast_media_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def show_button_selector_callback(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    data = await state.get_data()
    has_media = data.get('has_media', False)
    selected_buttons = data.get('selected_buttons')

    if selected_buttons is None:
        selected_buttons = list(DEFAULT_SELECTED_BUTTONS)
        await state.update_data(selected_buttons=selected_buttons)
    
    media_info = ""
    if has_media:
        media_type = data.get('media_type', '—Ñ–∞–π–ª')
        media_info = f"\nüñºÔ∏è <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª:</b> {media_type} –¥–æ–±–∞–≤–ª–µ–Ω"
    
    text = f"""
üìò <b>–í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:

üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
üîó <b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</b> ‚Äî –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üì± <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
üõ†Ô∏è <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∂–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üè† <b>–ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"</b> –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.{media_info}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
"""
    
    keyboard = get_updated_message_buttons_selector_keyboard_with_media(
        selected_buttons, has_media, db_user.language
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_button_selector(
    message: types.Message,
    db_user: User,
    state: FSMContext
):
    data = await state.get_data()
    selected_buttons = data.get('selected_buttons')
    if selected_buttons is None:
        selected_buttons = list(DEFAULT_SELECTED_BUTTONS)
        await state.update_data(selected_buttons=selected_buttons)

    has_media = data.get('has_media', False)

    text = """
üìò <b>–í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:

üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
üîó <b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</b> ‚Äî –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üì± <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
üõ†Ô∏è <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∂–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üè† <b>–ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"</b> –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
"""

    keyboard = get_updated_message_buttons_selector_keyboard_with_media(
        selected_buttons, has_media, db_user.language
    )

    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@admin_required
@error_handler
async def toggle_button_selection(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    button_type = callback.data.replace('btn_', '')
    data = await state.get_data()
    selected_buttons = data.get('selected_buttons')
    if selected_buttons is None:
        selected_buttons = list(DEFAULT_SELECTED_BUTTONS)
    else:
        selected_buttons = list(selected_buttons)

    if button_type in selected_buttons:
        selected_buttons.remove(button_type)
    else:
        selected_buttons.append(button_type)

    await state.update_data(selected_buttons=selected_buttons)

    has_media = data.get('has_media', False)
    keyboard = get_updated_message_buttons_selector_keyboard_with_media(
        selected_buttons, has_media, db_user.language
    )

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@admin_required
@error_handler
async def confirm_button_selection(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    target = data.get('broadcast_target')
    message_text = data.get('broadcast_message')
    selected_buttons = data.get('selected_buttons')
    if selected_buttons is None:
        selected_buttons = list(DEFAULT_SELECTED_BUTTONS)
        await state.update_data(selected_buttons=selected_buttons)
    has_media = data.get('has_media', False)
    media_type = data.get('media_type')
    
    user_count = await get_target_users_count(db, target) if not target.startswith('custom_') else await get_custom_users_count(db, target.replace('custom_', ''))
    target_display = get_target_display_name(target)
    
    media_info = ""
    if has_media:
        media_type_names = {
            "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "video": "–í–∏–¥–µ–æ",
            "document": "–î–æ–∫—É–º–µ–Ω—Ç"
        }
        media_info = f"\nüñºÔ∏è <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª:</b> {media_type_names.get(media_type, media_type)}"
    
    ordered_keys = [button_key for row in BUTTON_ROWS for button_key in row]
    button_labels = get_broadcast_button_labels(db_user.language)
    selected_names = [button_labels[key] for key in ordered_keys if key in selected_buttons]
    if selected_names:
        buttons_info = f"\nüìò <b>–ö–Ω–æ–ø–∫–∏:</b> {', '.join(selected_names)}"
    else:
        buttons_info = "\nüìò <b>–ö–Ω–æ–ø–∫–∏:</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    
    preview_text = f"""
üì® <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_display}
üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_text}{media_info}

{buttons_info}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin_confirm_broadcast"),
            types.InlineKeyboardButton(text="üìò –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="edit_buttons")
        ]
    ]
    
    if has_media:
        keyboard.append([
            types.InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="change_media")
        ])
    
    keyboard.append([
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_messages")
    ])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if has_media and media_type == "photo":
        media_file_id = data.get('media_file_id')
        if media_file_id:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=media_file_id,
                caption=preview_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç file_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            await callback.message.edit_text(
                preview_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await callback.message.edit_text(
            preview_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    
    await callback.answer()
@admin_required
@error_handler
async def confirm_broadcast(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    target = data.get('broadcast_target')
    message_text = data.get('broadcast_message')
    selected_buttons = data.get('selected_buttons')
    if selected_buttons is None:
        selected_buttons = list(DEFAULT_SELECTED_BUTTONS)
    has_media = data.get('has_media', False)
    media_type = data.get('media_type')
    media_file_id = data.get('media_file_id')
    media_caption = data.get('media_caption')
    
    await callback.message.edit_text(
        "üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        reply_markup=None,
        parse_mode="HTML" 
    )
    
    if target.startswith('custom_'):
        users = await get_custom_users(db, target.replace('custom_', ''))
    else:
        users = await get_target_users(db, target)
    
    broadcast_history = BroadcastHistory(
        target_type=target,
        message_text=message_text,
        has_media=has_media,
        media_type=media_type,
        media_file_id=media_file_id,
        media_caption=media_caption,
        total_count=len(users),
        sent_count=0,
        failed_count=0,
        admin_id=db_user.id,
        admin_name=db_user.full_name,
        status="in_progress"
    )
    db.add(broadcast_history)
    await db.commit()
    await db.refresh(broadcast_history)
    
    sent_count = 0
    failed_count = 0
    
    broadcast_keyboard = create_broadcast_keyboard(selected_buttons, db_user.language)
    
    for user in users:
        try:
            if has_media and media_file_id:
                if media_type == "photo":
                    await callback.bot.send_photo(
                        chat_id=user.telegram_id,
                        photo=media_file_id,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=broadcast_keyboard
                    )
                elif media_type == "video":
                    await callback.bot.send_video(
                        chat_id=user.telegram_id,
                        video=media_file_id,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=broadcast_keyboard
                    )
                elif media_type == "document":
                    await callback.bot.send_document(
                        chat_id=user.telegram_id,
                        document=media_file_id,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=broadcast_keyboard
                    )
            else:
                await callback.bot.send_message(
                    chat_id=user.telegram_id,
                    text=message_text,
                    parse_mode="HTML",
                    reply_markup=broadcast_keyboard
                )
            sent_count += 1
            
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
                
        except Exception as e:
            failed_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    broadcast_history.sent_count = sent_count
    broadcast_history.failed_count = failed_count
    broadcast_history.status = "completed" if failed_count == 0 else "partial"
    broadcast_history.completed_at = datetime.utcnow()
    await db.commit()
    
    media_info = ""
    if has_media:
        media_info = f"\nüñºÔ∏è <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª:</b> {media_type}"
    
    result_text = f"""
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
- –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(sent_count / len(users) * 100, 1) if users else 0}%{media_info}

<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {db_user.full_name}
"""
    
    await callback.message.edit_text(
        result_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì® –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="admin_messages")]
        ]),
        parse_mode="HTML" 
    )
    
    await state.clear()
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {db_user.telegram_id}: {sent_count}/{len(users)} (–º–µ–¥–∏–∞: {has_media})")


async def get_target_users_count(db: AsyncSession, target: str) -> int:
    users = await get_target_users(db, target)
    return len(users)


async def get_target_users(db: AsyncSession, target: str) -> list:
    users = await get_users_list(db, offset=0, limit=10000, status=UserStatus.ACTIVE)

    if target == "all":
        return users

    if target == "active":
        return [
            user
            for user in users
            if user.subscription
            and user.subscription.is_active
            and not user.subscription.is_trial
        ]

    if target == "trial":
        return [
            user
            for user in users
            if user.subscription and user.subscription.is_trial
        ]

    if target == "no":
        return [
            user
            for user in users
            if not user.subscription or not user.subscription.is_active
        ]

    if target == "expiring":
        expiring_subs = await get_expiring_subscriptions(db, 3)
        return [sub.user for sub in expiring_subs if sub.user]

    if target == "expired":
        now = datetime.utcnow()
        expired_statuses = {
            SubscriptionStatus.EXPIRED.value,
            SubscriptionStatus.DISABLED.value,
        }
        expired_users = []
        for user in users:
            subscription = user.subscription
            if subscription:
                if subscription.status in expired_statuses:
                    expired_users.append(user)
                    continue
                if subscription.end_date <= now and not subscription.is_active:
                    expired_users.append(user)
                    continue
            elif user.has_had_paid_subscription:
                expired_users.append(user)
        return expired_users

    if target == "active_zero":
        return [
            user
            for user in users
            if user.subscription
            and not user.subscription.is_trial
            and user.subscription.is_active
            and (user.subscription.traffic_used_gb or 0) <= 0
        ]

    if target == "trial_zero":
        return [
            user
            for user in users
            if user.subscription
            and user.subscription.is_trial
            and user.subscription.is_active
            and (user.subscription.traffic_used_gb or 0) <= 0
        ]

    if target == "zero":
        return [
            user
            for user in users
            if user.subscription
            and user.subscription.is_active
            and (user.subscription.traffic_used_gb or 0) <= 0
        ]

    return []


async def get_custom_users_count(db: AsyncSession, criteria: str) -> int:
    users = await get_custom_users(db, criteria)
    return len(users)


async def get_custom_users(db: AsyncSession, criteria: str) -> list:
    now = datetime.utcnow()
    today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)
    
    if criteria == "today":
        stmt = select(User).where(
            and_(User.status == "active", User.created_at >= today)
        )
    elif criteria == "week":
        stmt = select(User).where(
            and_(User.status == "active", User.created_at >= week_ago)
        )
    elif criteria == "month":
        stmt = select(User).where(
            and_(User.status == "active", User.created_at >= month_ago)
        )
    elif criteria == "active_today":
        stmt = select(User).where(
            and_(User.status == "active", User.last_activity >= today)
        )
    elif criteria == "inactive_week":
        stmt = select(User).where(
            and_(User.status == "active", User.last_activity < week_ago)
        )
    elif criteria == "inactive_month":
        stmt = select(User).where(
            and_(User.status == "active", User.last_activity < month_ago)
        )
    elif criteria == "referrals":
        stmt = select(User).where(
            and_(User.status == "active", User.referred_by_id.isnot(None))
        )
    elif criteria == "direct":
        stmt = select(User).where(
            and_(
                User.status == "active", 
                User.referred_by_id.is_(None)
            )
        )
    else:
        return []
    
    result = await db.execute(stmt)
    return result.scalars().all()


async def get_users_statistics(db: AsyncSession) -> dict:
    now = datetime.utcnow()
    today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)
    
    stats = {}
    
    stats['today'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.created_at >= today)
        )
    ) or 0
    
    stats['week'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.created_at >= week_ago)
        )
    ) or 0
    
    stats['month'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.created_at >= month_ago)
        )
    ) or 0
    
    stats['active_today'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.last_activity >= today)
        )
    ) or 0
    
    stats['inactive_week'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.last_activity < week_ago)
        )
    ) or 0
    
    stats['inactive_month'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.last_activity < month_ago)
        )
    ) or 0
    
    stats['referrals'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(User.status == "active", User.referred_by_id.isnot(None))
        )
    ) or 0
    
    stats['direct'] = await db.scalar(
        select(func.count(User.id)).where(
            and_(
                User.status == "active", 
                User.referred_by_id.is_(None)
            )
        )
    ) or 0
    
    return stats


def get_target_name(target_type: str) -> str:
    names = {
        "all": "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "active": "–° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "trial": "–° —Ç—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "no": "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "sub": "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "expiring": "–° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "expired": "–° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "active_zero": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë",
        "trial_zero": "–¢—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë",
        "zero": "–ü–æ–¥–ø–∏—Å–∫–∞, —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë",
        "custom_today": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "custom_week": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "custom_month": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü",
        "custom_active_today": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "custom_inactive_week": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7+ –¥–Ω–µ–π",
        "custom_inactive_month": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 30+ –¥–Ω–µ–π",
        "custom_referrals": "–ß–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        "custom_direct": "–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    }
    return names.get(target_type, target_type)


def get_target_display_name(target: str) -> str:
    return get_target_name(target)


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_messages_menu, F.data == "admin_messages")
    dp.callback_query.register(show_broadcast_targets, F.data.in_(["admin_msg_all", "admin_msg_by_sub"]))
    dp.callback_query.register(select_broadcast_target, F.data.startswith("broadcast_"))
    dp.callback_query.register(confirm_broadcast, F.data == "admin_confirm_broadcast")
    
    dp.callback_query.register(show_messages_history, F.data.startswith("admin_msg_history"))
    dp.callback_query.register(show_custom_broadcast, F.data == "admin_msg_custom")
    dp.callback_query.register(select_custom_criteria, F.data.startswith("criteria_"))
    
    dp.callback_query.register(toggle_button_selection, F.data.startswith("btn_"))
    dp.callback_query.register(confirm_button_selection, F.data == "buttons_confirm")
    dp.callback_query.register(show_button_selector_callback, F.data == "edit_buttons")
    dp.callback_query.register(handle_media_selection, F.data.startswith("add_media_"))
    dp.callback_query.register(handle_media_selection, F.data == "skip_media")
    dp.callback_query.register(handle_media_confirmation, F.data.in_(["confirm_media", "replace_media"]))
    dp.callback_query.register(handle_change_media, F.data == "change_media")
    dp.message.register(process_broadcast_message, AdminStates.waiting_for_broadcast_message)
    dp.message.register(process_broadcast_media, AdminStates.waiting_for_broadcast_media)
