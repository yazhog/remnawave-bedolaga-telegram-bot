import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.config import settings
from app.database.database import get_db
from app.services.monitoring_service import monitoring_service
from app.utils.decorators import admin_required
from app.utils.pagination import paginate_list
from app.keyboards.admin import get_monitoring_keyboard, get_admin_main_keyboard
from app.localization.texts import get_texts
from app.services.notification_settings_service import NotificationSettingsService
from app.states import AdminStates

logger = logging.getLogger(__name__)
router = Router()


def _format_toggle(enabled: bool) -> str:
    return "üü¢ –í–∫–ª" if enabled else "üî¥ –í—ã–∫–ª"


def _build_notification_settings_view(language: str):
    texts = get_texts(language)
    config = NotificationSettingsService.get_config()

    second_percent = NotificationSettingsService.get_second_wave_discount_percent()
    second_hours = NotificationSettingsService.get_second_wave_valid_hours()
    third_percent = NotificationSettingsService.get_third_wave_discount_percent()
    third_hours = NotificationSettingsService.get_third_wave_valid_hours()
    third_days = NotificationSettingsService.get_third_wave_trigger_days()

    trial_1h_status = _format_toggle(config["trial_inactive_1h"].get("enabled", True))
    trial_24h_status = _format_toggle(config["trial_inactive_24h"].get("enabled", True))
    trial_channel_status = _format_toggle(
        config["trial_channel_unsubscribed"].get("enabled", True)
    )
    expired_1d_status = _format_toggle(config["expired_1d"].get("enabled", True))
    second_wave_status = _format_toggle(config["expired_second_wave"].get("enabled", True))
    third_wave_status = _format_toggle(config["expired_third_wave"].get("enabled", True))

    summary_text = (
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        f"‚Ä¢ 1 —á–∞—Å –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞: {trial_1h_status}\n"
        f"‚Ä¢ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞: {trial_24h_status}\n"
        f"‚Ä¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞: {trial_channel_status}\n"
        f"‚Ä¢ 1 –¥–µ–Ω—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expired_1d_status}\n"
        f"‚Ä¢ 2-3 –¥–Ω—è (—Å–∫–∏–¥–∫–∞ {second_percent}% / {second_hours} —á): {second_wave_status}\n"
        f"‚Ä¢ {third_days} –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ {third_percent}% / {third_hours} —á): {third_wave_status}"
    )

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{trial_1h_status} ‚Ä¢ 1 —á–∞—Å –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞", callback_data="admin_mon_notify_toggle_trial_1h")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: 1 —á–∞—Å –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞", callback_data="admin_mon_notify_preview_trial_1h")],
        [InlineKeyboardButton(text=f"{trial_24h_status} ‚Ä¢ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞", callback_data="admin_mon_notify_toggle_trial_24h")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞", callback_data="admin_mon_notify_preview_trial_24h")],
        [InlineKeyboardButton(text=f"{trial_channel_status} ‚Ä¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞", callback_data="admin_mon_notify_toggle_trial_channel")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞", callback_data="admin_mon_notify_preview_trial_channel")],
        [InlineKeyboardButton(text=f"{expired_1d_status} ‚Ä¢ 1 –¥–µ–Ω—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è", callback_data="admin_mon_notify_toggle_expired_1d")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: 1 –¥–µ–Ω—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è", callback_data="admin_mon_notify_preview_expired_1d")],
        [InlineKeyboardButton(text=f"{second_wave_status} ‚Ä¢ 2-3 –¥–Ω—è —Å–æ —Å–∫–∏–¥–∫–æ–π", callback_data="admin_mon_notify_toggle_expired_2d")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: —Å–∫–∏–¥–∫–∞ 2-3 –¥–µ–Ω—å", callback_data="admin_mon_notify_preview_expired_2d")],
        [InlineKeyboardButton(text=f"‚úèÔ∏è –°–∫–∏–¥–∫–∞ 2-3 –¥–Ω—è: {second_percent}%", callback_data="admin_mon_notify_edit_2d_percent")],
        [InlineKeyboardButton(text=f"‚è±Ô∏è –°—Ä–æ–∫ —Å–∫–∏–¥–∫–∏ 2-3 –¥–Ω—è: {second_hours} —á", callback_data="admin_mon_notify_edit_2d_hours")],
        [InlineKeyboardButton(text=f"{third_wave_status} ‚Ä¢ {third_days} –¥–Ω–µ–π —Å–æ —Å–∫–∏–¥–∫–æ–π", callback_data="admin_mon_notify_toggle_expired_nd")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç: —Å–∫–∏–¥–∫–∞ —Å–ø—É—Å—Ç—è –¥–Ω–∏", callback_data="admin_mon_notify_preview_expired_nd")],
        [InlineKeyboardButton(text=f"‚úèÔ∏è –°–∫–∏–¥–∫–∞ {third_days} –¥–Ω–µ–π: {third_percent}%", callback_data="admin_mon_notify_edit_nd_percent")],
        [InlineKeyboardButton(text=f"‚è±Ô∏è –°—Ä–æ–∫ —Å–∫–∏–¥–∫–∏ {third_days} –¥–Ω–µ–π: {third_hours} —á", callback_data="admin_mon_notify_edit_nd_hours")],
        [InlineKeyboardButton(text=f"üìÜ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {third_days} –¥–Ω.", callback_data="admin_mon_notify_edit_nd_threshold")],
        [InlineKeyboardButton(text="üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã", callback_data="admin_mon_notify_preview_all")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mon_settings")],
    ])

    return summary_text, keyboard


def _build_notification_preview_message(language: str, notification_type: str):
    texts = get_texts(language)
    now = datetime.now()
    price_30_days = settings.format_price(settings.PRICE_30_DAYS)

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    header = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"

    if notification_type == "trial_inactive_1h":
        template = texts.get(
            "TRIAL_INACTIVE_1H",
            (
                "‚è≥ <b>–ü—Ä–æ—à—ë–ª —á–∞—Å, –∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—Ç</b>\n\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∑–∞–ø—É—Å–∫–æ–º ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."
            ),
        )
        message = template.format(
            price=price_30_days,
            end_date=(now + timedelta(days=settings.TRIAL_DURATION_DAYS)).strftime("%d.%m.%Y %H:%M"),
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=texts.t("CONNECT_BUTTON", "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
                        callback_data="subscription_connect",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("MY_SUBSCRIPTION_BUTTON", "üì± –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"),
                        callback_data="menu_subscription",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUPPORT_BUTTON", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                        callback_data="menu_support",
                    )
                ],
            ]
        )
    elif notification_type == "trial_inactive_24h":
        template = texts.get(
            "TRIAL_INACTIVE_24H",
            (
                "‚è≥ <b>–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ VPN</b>\n\n"
                "–ü—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –Ω–æ —Ç—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω."
                "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è."
            ),
        )
        message = template.format(
            price=price_30_days,
            end_date=(now + timedelta(days=1)).strftime("%d.%m.%Y %H:%M"),
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=texts.t("CONNECT_BUTTON", "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
                        callback_data="subscription_connect",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("MY_SUBSCRIPTION_BUTTON", "üì± –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"),
                        callback_data="menu_subscription",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUPPORT_BUTTON", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                        callback_data="menu_support",
                    )
                ],
            ]
        )
    elif notification_type == "trial_channel_unsubscribed":
        template = texts.get(
            "TRIAL_CHANNEL_UNSUBSCRIBED",
            (
                "üö´ <b>–î–æ—Å—Ç—É–ø –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø–æ—ç—Ç–æ–º—É —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´{check_button}¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø."
            ),
        )
        check_button = texts.t("CHANNEL_CHECK_BUTTON", "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
        message = template.format(check_button=check_button)
        buttons: list[list[InlineKeyboardButton]] = []
        if settings.CHANNEL_LINK:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=texts.t("CHANNEL_SUBSCRIBE_BUTTON", "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
                        url=settings.CHANNEL_LINK,
                    )
                ]
            )
        buttons.append(
            [
                InlineKeyboardButton(
                    text=check_button,
                    callback_data="sub_channel_check",
                )
            ]
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    elif notification_type == "expired_1d":
        template = texts.get(
            "SUBSCRIPTION_EXPIRED_1D",
            (
                "‚õî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>\n\n"
                "–î–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω {end_date}. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å."
            ),
        )
        message = template.format(
            end_date=(now - timedelta(days=1)).strftime("%d.%m.%Y %H:%M"),
            price=price_30_days,
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=texts.t("SUBSCRIPTION_EXTEND", "üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
                        callback_data="subscription_extend",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("BALANCE_TOPUP", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                        callback_data="balance_topup",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUPPORT_BUTTON", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                        callback_data="menu_support",
                    )
                ],
            ]
        )
    elif notification_type == "expired_2d":
        percent = NotificationSettingsService.get_second_wave_discount_percent()
        valid_hours = NotificationSettingsService.get_second_wave_valid_hours()
        template = texts.get(
            "SUBSCRIPTION_EXPIRED_SECOND_WAVE",
            (
                "üî• <b>–°–∫–∏–¥–∫–∞ {percent}% –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>\n\n"
                "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É. "
                "–û–Ω–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –≤–∞—à–µ–π –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø–æ–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expires_at}."
            ),
        )
        message = template.format(
            percent=percent,
            expires_at=(now + timedelta(hours=valid_hours)).strftime("%d.%m.%Y %H:%M"),
            trigger_days=3,
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É",
                        callback_data="claim_discount_preview",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUBSCRIPTION_EXTEND", "üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
                        callback_data="subscription_extend",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("BALANCE_TOPUP", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                        callback_data="balance_topup",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUPPORT_BUTTON", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                        callback_data="menu_support",
                    )
                ],
            ]
        )
    elif notification_type == "expired_nd":
        percent = NotificationSettingsService.get_third_wave_discount_percent()
        valid_hours = NotificationSettingsService.get_third_wave_valid_hours()
        trigger_days = NotificationSettingsService.get_third_wave_trigger_days()
        template = texts.get(
            "SUBSCRIPTION_EXPIRED_THIRD_WAVE",
            (
                "üéÅ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ {percent}%</b>\n\n"
                "–ü—Ä–æ—à–ª–æ {trigger_days} –¥–Ω–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É. "
                "–û–Ω–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø–æ–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expires_at}."
            ),
        )
        message = template.format(
            percent=percent,
            trigger_days=trigger_days,
            expires_at=(now + timedelta(hours=valid_hours)).strftime("%d.%m.%Y %H:%M"),
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É",
                        callback_data="claim_discount_preview",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUBSCRIPTION_EXTEND", "üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
                        callback_data="subscription_extend",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("BALANCE_TOPUP", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                        callback_data="balance_topup",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=texts.t("SUPPORT_BUTTON", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                        callback_data="menu_support",
                    )
                ],
            ]
        )
    else:
        raise ValueError(f"Unsupported notification type: {notification_type}")

    footer = "\n\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.</i>"
    return header + message + footer, keyboard


async def _send_notification_preview(bot, chat_id: int, language: str, notification_type: str) -> None:
    message, keyboard = _build_notification_preview_message(language, notification_type)
    await bot.send_message(
        chat_id,
        message,
        parse_mode="HTML",
        reply_markup=keyboard,
    )


async def _render_notification_settings(callback: CallbackQuery) -> None:
    language = (callback.from_user.language_code or settings.DEFAULT_LANGUAGE)
    text, keyboard = _build_notification_settings_view(language)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


async def _render_notification_settings_for_state(
    bot,
    chat_id: int,
    message_id: int,
    language: str,
    business_connection_id: str | None = None,
) -> None:
    text, keyboard = _build_notification_settings_view(language)

    edit_kwargs = {
        "text": text,
        "chat_id": chat_id,
        "message_id": message_id,
        "parse_mode": "HTML",
        "reply_markup": keyboard,
    }

    if business_connection_id:
        edit_kwargs["business_connection_id"] = business_connection_id

    try:
        await bot.edit_message_text(**edit_kwargs)
    except TelegramBadRequest as exc:
        if "no text in the message to edit" in (exc.message or "").lower():
            caption_kwargs = {
                "chat_id": chat_id,
                "message_id": message_id,
                "caption": text,
                "parse_mode": "HTML",
                "reply_markup": keyboard,
            }

            if business_connection_id:
                caption_kwargs["business_connection_id"] = business_connection_id

            await bot.edit_message_caption(**caption_kwargs)
        else:
            raise

@router.callback_query(F.data == "admin_monitoring")
@admin_required
async def admin_monitoring_menu(callback: CallbackQuery):
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            last_update = status['last_update'].strftime('%H:%M:%S') if status['last_update'] else "–ù–∏–∫–æ–≥–¥–∞"
            
            text = f"""
üîç <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}
‚öôÔ∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {settings.MONITORING_INTERVAL} –º–∏–Ω

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {status['stats_24h']['total_events']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {status['stats_24h']['success_rate']}%

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
            keyboard = get_monitoring_keyboard(language)
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "admin_mon_settings")
@admin_required
async def admin_monitoring_settings(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        global_status = "üü¢ –í–∫–ª—é—á–µ–Ω—ã" if NotificationSettingsService.are_notifications_globally_enabled() else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
        second_percent = NotificationSettingsService.get_second_wave_discount_percent()
        third_percent = NotificationSettingsService.get_third_wave_discount_percent()
        third_days = NotificationSettingsService.get_third_wave_trigger_days()

        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b> {global_status}\n"
            f"‚Ä¢ –°–∫–∏–¥–∫–∞ 2-3 –¥–Ω—è: {second_percent}%\n"
            f"‚Ä¢ –°–∫–∏–¥–∫–∞ –ø–æ—Å–ª–µ {third_days} –¥–Ω–µ–π: {third_percent}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_mon_notify_settings")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_submenu_settings")],
        ])

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_settings")
@admin_required
async def admin_notify_settings(callback: CallbackQuery):
    try:
        await _render_notification_settings(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_trial_1h")
@admin_required
async def toggle_trial_1h_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_trial_inactive_1h_enabled()
    NotificationSettingsService.set_trial_inactive_1h_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_trial_1h")
@admin_required
async def preview_trial_1h_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "trial_inactive_1h")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send trial 1h preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_trial_24h")
@admin_required
async def toggle_trial_24h_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_trial_inactive_24h_enabled()
    NotificationSettingsService.set_trial_inactive_24h_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_trial_24h")
@admin_required
async def preview_trial_24h_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "trial_inactive_24h")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send trial 24h preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_trial_channel")
@admin_required
async def toggle_trial_channel_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_trial_channel_unsubscribed_enabled()
    NotificationSettingsService.set_trial_channel_unsubscribed_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_trial_channel")
@admin_required
async def preview_trial_channel_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "trial_channel_unsubscribed")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send trial channel preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_expired_1d")
@admin_required
async def toggle_expired_1d_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_expired_1d_enabled()
    NotificationSettingsService.set_expired_1d_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_expired_1d")
@admin_required
async def preview_expired_1d_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "expired_1d")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send expired 1d preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_expired_2d")
@admin_required
async def toggle_second_wave_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_second_wave_enabled()
    NotificationSettingsService.set_second_wave_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_expired_2d")
@admin_required
async def preview_second_wave_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "expired_2d")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send second wave preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_toggle_expired_nd")
@admin_required
async def toggle_third_wave_notification(callback: CallbackQuery):
    enabled = NotificationSettingsService.is_third_wave_enabled()
    NotificationSettingsService.set_third_wave_enabled(not enabled)
    await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if not enabled else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ")
    await _render_notification_settings(callback)


@router.callback_query(F.data == "admin_mon_notify_preview_expired_nd")
@admin_required
async def preview_third_wave_notification(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        await _send_notification_preview(callback.bot, callback.from_user.id, language, "expired_nd")
        await callback.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as exc:
        logger.error("Failed to send third wave preview: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_mon_notify_preview_all")
@admin_required
async def preview_all_notifications(callback: CallbackQuery):
    try:
        language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
        chat_id = callback.from_user.id
        for notification_type in [
            "trial_inactive_1h",
            "trial_inactive_24h",
            "trial_channel_unsubscribed",
            "expired_1d",
            "expired_2d",
            "expired_nd",
        ]:
            await _send_notification_preview(callback.bot, chat_id, language, notification_type)
        await callback.answer("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as exc:
        logger.error("Failed to send all notification previews: %s", exc)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã", show_alert=True)


async def _start_notification_value_edit(
    callback: CallbackQuery,
    state: FSMContext,
    setting_key: str,
    field: str,
    prompt_key: str,
    default_prompt: str,
):
    language = callback.from_user.language_code or settings.DEFAULT_LANGUAGE
    await state.set_state(AdminStates.editing_notification_value)
    await state.update_data(
        notification_setting_key=setting_key,
        notification_setting_field=field,
        settings_message_chat=callback.message.chat.id,
        settings_message_id=callback.message.message_id,
        settings_business_connection_id=(
            str(getattr(callback.message, "business_connection_id", None))
            if getattr(callback.message, "business_connection_id", None) is not None
            else None
        ),
        settings_language=language,
    )
    texts = get_texts(language)
    await callback.answer()
    await callback.message.answer(texts.get(prompt_key, default_prompt))


@router.callback_query(F.data == "admin_mon_notify_edit_2d_percent")
@admin_required
async def edit_second_wave_percent(callback: CallbackQuery, state: FSMContext):
    await _start_notification_value_edit(
        callback,
        state,
        "expired_second_wave",
        "percent",
        "NOTIFY_PROMPT_SECOND_PERCENT",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2-3 –¥–Ω—è (0-100):",
    )


@router.callback_query(F.data == "admin_mon_notify_edit_2d_hours")
@admin_required
async def edit_second_wave_hours(callback: CallbackQuery, state: FSMContext):
    await _start_notification_value_edit(
        callback,
        state,
        "expired_second_wave",
        "hours",
        "NOTIFY_PROMPT_SECOND_HOURS",
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏ (1-168):",
    )


@router.callback_query(F.data == "admin_mon_notify_edit_nd_percent")
@admin_required
async def edit_third_wave_percent(callback: CallbackQuery, state: FSMContext):
    await _start_notification_value_edit(
        callback,
        state,
        "expired_third_wave",
        "percent",
        "NOTIFY_PROMPT_THIRD_PERCENT",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–∑–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (0-100):",
    )


@router.callback_query(F.data == "admin_mon_notify_edit_nd_hours")
@admin_required
async def edit_third_wave_hours(callback: CallbackQuery, state: FSMContext):
    await _start_notification_value_edit(
        callback,
        state,
        "expired_third_wave",
        "hours",
        "NOTIFY_PROMPT_THIRD_HOURS",
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏ (1-168):",
    )


@router.callback_query(F.data == "admin_mon_notify_edit_nd_threshold")
@admin_required
async def edit_third_wave_threshold(callback: CallbackQuery, state: FSMContext):
    await _start_notification_value_edit(
        callback,
        state,
        "expired_third_wave",
        "trigger",
        "NOTIFY_PROMPT_THIRD_DAYS",
        "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? (–º–∏–Ω–∏–º—É–º 2):",
    )


@router.callback_query(F.data == "admin_mon_start")
@admin_required
async def start_monitoring_callback(callback: CallbackQuery):
    try:
        if monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not monitoring_service.bot:
            monitoring_service.bot = callback.bot
        
        asyncio.create_task(monitoring_service.start_monitoring())
        
        await callback.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_stop")
@admin_required
async def stop_monitoring_callback(callback: CallbackQuery):
    try:
        if not monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        monitoring_service.stop_monitoring()
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_force_check")
@admin_required
async def force_check_callback(callback: CallbackQuery):
    try:
        await callback.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        async for db in get_db():
            results = await monitoring_service.force_check_subscriptions(db)
            
            text = f"""
‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expired']}
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expiring']}
‚Ä¢ –ì–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç–µ: {results['autopay_ready']}

üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%H:%M:%S')}

–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("admin_mon_logs"))
@admin_required
async def monitoring_logs_callback(callback: CallbackQuery):
    try:
        page = 1
        if "_page_" in callback.data:
            page = int(callback.data.split("_page_")[1])
        
        async for db in get_db():
            all_logs = await monitoring_service.get_monitoring_logs(db, limit=1000)
            
            if not all_logs:
                text = "üìã <b>–õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç—ã</b>\n\n–°–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
                keyboard = get_monitoring_logs_back_keyboard()
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                return
            
            per_page = 8
            paginated_logs = paginate_list(all_logs, page=page, per_page=per_page)
            
            text = f"üìã <b>–õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b> (—Å—Ç—Ä. {page}/{paginated_logs.total_pages})\n\n"
            
            for log in paginated_logs.items:
                icon = "‚úÖ" if log['is_success'] else "‚ùå"
                time_str = log['created_at'].strftime('%m-%d %H:%M')
                event_type = log['event_type'].replace('_', ' ').title()
                
                message = log['message']
                if len(message) > 45:
                    message = message[:45] + "..."
                
                text += f"{icon} <code>{time_str}</code> {event_type}\n"
                text += f"   üìÑ {message}\n\n"
            
            total_success = sum(1 for log in all_logs if log['is_success'])
            total_failed = len(all_logs) - total_success
            success_rate = round(total_success / len(all_logs) * 100, 1) if all_logs else 0
            
            text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(all_logs)}\n"
            text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {total_success}\n"
            text += f"‚Ä¢ –û—à–∏–±–æ–∫: {total_failed}\n"
            text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%"
            
            keyboard = get_monitoring_logs_keyboard(page, paginated_logs.total_pages)
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "admin_mon_clear_logs")
@admin_required
async def clear_logs_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            deleted_count = await monitoring_service.cleanup_old_logs(db, days=0) 
            
            if deleted_count > 0:
                await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
            else:
                await callback.answer("‚ÑπÔ∏è –õ–æ–≥–∏ —É–∂–µ –ø—É—Å—Ç—ã")
            
            await monitoring_logs_callback(callback)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_test_notifications")
@admin_required
async def test_notifications_callback(callback: CallbackQuery):
    try:
        test_message = f"""
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if monitoring_service.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if settings.ENABLE_NOTIFICATIONS else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
"""
        
        await callback.bot.send_message(
            callback.from_user.id,
            test_message,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_statistics")
@admin_required
async def monitoring_statistics_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            from app.database.crud.subscription import get_subscriptions_statistics
            sub_stats = await get_subscriptions_statistics(db)
            
            mon_status = await monitoring_service.get_monitoring_status(db)
            
            week_ago = datetime.now() - timedelta(days=7)
            week_logs = await monitoring_service.get_monitoring_logs(db, limit=1000)
            week_logs = [log for log in week_logs if log['created_at'] >= week_ago]
            
            week_success = sum(1 for log in week_logs if log['is_success'])
            week_errors = len(week_logs) - week_success
            
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üì± <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {sub_stats['total_subscriptions']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sub_stats['active_subscriptions']}
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö: {sub_stats['trial_subscriptions']}
‚Ä¢ –ü–ª–∞—Ç–Ω—ã—Ö: {sub_stats['paid_subscriptions']}

üìà <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {mon_status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {mon_status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {mon_status['stats_24h']['success_rate']}%

üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(week_logs)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {week_success}
‚Ä¢ –û—à–∏–±–æ–∫: {week_errors}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(week_success/len(week_logs)*100, 1) if week_logs else 0}%

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.MONITORING_INTERVAL} –º–∏–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª' if getattr(settings, 'ENABLE_NOTIFICATIONS', True) else 'üî¥ –í—ã–∫–ª'}
‚Ä¢ –ê–≤—Ç–æ–æ–ø–ª–∞—Ç–∞: {', '.join(map(str, settings.get_autopay_warning_days()))} –¥–Ω–µ–π
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", show_alert=True)


def get_monitoring_logs_keyboard(current_page: int, total_pages: int):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    if total_pages > 1:
        nav_row = []
        
        if current_page > 1:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"admin_mon_logs_page_{current_page - 1}"
            ))
        
        nav_row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}", 
            callback_data="current_page"
        ))
        
        if current_page < total_pages:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"admin_mon_logs_page_{current_page + 1}"
            ))
        
        keyboard.append(nav_row)
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mon_logs"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_mon_clear_logs")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_monitoring_logs_back_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mon_logs"),
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="admin_mon_logs_filters")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_mon_clear_logs")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
    ])


@router.message(Command("monitoring"))
@admin_required
async def monitoring_command(message: Message):
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            text = f"""
üîç <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üìà <b>–°–æ–±—ã—Ç–∏—è –∑–∞ 24—á:</b> {status['stats_24h']['total_events']}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {status['stats_24h']['success_rate']}%

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
"""
            
            await message.answer(text, parse_mode="HTML")
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /monitoring: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(AdminStates.editing_notification_value)
async def process_notification_value_input(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await state.clear()
        await message.answer("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        return

    raw_value = (message.text or "").strip()
    try:
        value = int(raw_value)
    except (TypeError, ValueError):
        language = data.get("settings_language") or message.from_user.language_code or settings.DEFAULT_LANGUAGE
        texts = get_texts(language)
        await message.answer(texts.get("NOTIFICATION_VALUE_INVALID", "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."))
        return

    key = data.get("notification_setting_key")
    field = data.get("notification_setting_field")
    language = data.get("settings_language") or message.from_user.language_code or settings.DEFAULT_LANGUAGE
    texts = get_texts(language)

    success = False
    if key == "expired_second_wave" and field == "percent":
        success = NotificationSettingsService.set_second_wave_discount_percent(value)
    elif key == "expired_second_wave" and field == "hours":
        success = NotificationSettingsService.set_second_wave_valid_hours(value)
    elif key == "expired_third_wave" and field == "percent":
        success = NotificationSettingsService.set_third_wave_discount_percent(value)
    elif key == "expired_third_wave" and field == "hours":
        success = NotificationSettingsService.set_third_wave_valid_hours(value)
    elif key == "expired_third_wave" and field == "trigger":
        success = NotificationSettingsService.set_third_wave_trigger_days(value)

    if not success:
        await message.answer(texts.get("NOTIFICATION_VALUE_INVALID", "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return

    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=texts.get("BACK", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
                    callback_data="admin_mon_notify_settings",
                )
            ]
        ]
    )

    await message.answer(
        texts.get("NOTIFICATION_VALUE_UPDATED", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
        reply_markup=back_keyboard,
    )

    chat_id = data.get("settings_message_chat")
    message_id = data.get("settings_message_id")
    business_connection_id = data.get("settings_business_connection_id")
    if chat_id and message_id:
        await _render_notification_settings_for_state(
            message.bot,
            chat_id,
            message_id,
            language,
            business_connection_id=business_connection_id,
        )

    await state.clear()


def register_handlers(dp):
    dp.include_router(router)