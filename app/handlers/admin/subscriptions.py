import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from app.states import AdminStates
from app.database.models import User
from app.keyboards.admin import get_admin_subscriptions_keyboard
from app.localization.texts import get_texts
from app.database.crud.subscription import (
    get_expiring_subscriptions, get_subscriptions_statistics, get_expired_subscriptions,
    get_all_subscriptions
)
from app.services.subscription_service import SubscriptionService
from app.utils.decorators import admin_required, error_handler
from app.utils.formatters import format_datetime, format_time_ago


def get_country_flag(country_name: str) -> str:
    flags = {
        'USA': 'üá∫üá∏', 'United States': 'üá∫üá∏', 'US': 'üá∫üá∏',
        'Germany': 'üá©üá™', 'DE': 'üá©üá™', 'Deutschland': 'üá©üá™',
        'Netherlands': 'üá≥üá±', 'NL': 'üá≥üá±', 'Holland': 'üá≥üá±',
        'United Kingdom': 'üá¨üáß', 'UK': 'üá¨üáß', 'GB': 'üá¨üáß',
        'Japan': 'üáØüáµ', 'JP': 'üáØüáµ',
        'France': 'üá´üá∑', 'FR': 'üá´üá∑',
        'Canada': 'üá®üá¶', 'CA': 'üá®üá¶',
        'Russia': 'üá∑üá∫', 'RU': 'üá∑üá∫',
        'Singapore': 'üá∏üá¨', 'SG': 'üá∏üá¨',
    }
    return flags.get(country_name, 'üåç')


async def get_users_by_countries(db: AsyncSession) -> dict:
    try:
        result = await db.execute(
            select(User.preferred_location, func.count(User.id))
            .where(User.preferred_location.isnot(None))
            .group_by(User.preferred_location)
        )
        
        stats = {}
        for location, count in result.fetchall():
            if location:
                stats[location] = count
        
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º: {e}")
        return {}

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_subscriptions_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    stats = await get_subscriptions_statistics(db)
    
    text = f"""
üì± <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ: {stats['total_subscriptions']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_subscriptions']}
- –ü–ª–∞—Ç–Ω—ã—Ö: {stats['paid_subscriptions']}
- –¢—Ä–∏–∞–ª—å–Ω—ã—Ö: {stats['trial_subscriptions']}

üìà <b>–ü—Ä–æ–¥–∞–∂–∏:</b>
- –°–µ–≥–æ–¥–Ω—è: {stats['purchased_today']}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['purchased_week']}
- –ó–∞ –º–µ—Å—è—Ü: {stats['purchased_month']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_subs_list"),
            types.InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ", callback_data="admin_subs_expiring")
        ],
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_subs_stats"),
            types.InlineKeyboardButton(text="üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="admin_subs_countries")
        ],
        [
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_subscriptions_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    page: int = 1
):
    
    subscriptions, total_count = await get_all_subscriptions(db, page=page, limit=10)
    total_pages = (total_count + 9) // 10 
    
    if not subscriptions:
        text = "üì± <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        text = f"üì± <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ: {total_count} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{total_pages}\n\n"
        
        for i, sub in enumerate(subscriptions, 1 + (page - 1) * 10):
            user_info = f"ID{sub.user.telegram_id}" if sub.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            sub_type = "üéÅ" if sub.is_trial else "üíé"
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            text += f"{i}. {sub_type} {user_info}\n"
            text += f"   {status} | –î–æ: {format_datetime(sub.end_date)}\n"
            if sub.device_limit > 0:
                text += f"   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {sub.device_limit}\n"
            text += "\n"
    
    keyboard = []
    
    if total_pages > 1:
        nav_row = []
        if page > 1:
            nav_row.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data=f"admin_subs_list_page_{page-1}"
            ))
        
        nav_row.append(types.InlineKeyboardButton(
            text=f"{page}/{total_pages}", callback_data="current_page"
        ))
        
        if page < total_pages:
            nav_row.append(types.InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data=f"admin_subs_list_page_{page+1}"
            ))
        
        keyboard.append(nav_row)
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_subs_list")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_expiring_subscriptions(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    expiring_3d = await get_expiring_subscriptions(db, 3)
    expiring_1d = await get_expiring_subscriptions(db, 1)
    expired = await get_expired_subscriptions(db)
    
    text = f"""
‚è∞ <b>–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –ò—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è: {len(expiring_3d)}
- –ò—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞: {len(expiring_1d)}
- –£–∂–µ –∏—Å—Ç–µ–∫–ª–∏: {len(expired)}

<b>–ò—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è:</b>
"""
    
    for sub in expiring_3d[:5]:
        user_info = f"ID{sub.user.telegram_id}" if sub.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        sub_type = "üéÅ" if sub.is_trial else "üíé"
        text += f"{sub_type} {user_info} - {format_datetime(sub.end_date)}\n"
    
    if len(expiring_3d) > 5:
        text += f"... –∏ –µ—â–µ {len(expiring_3d) - 5}\n"
    
    text += f"\n<b>–ò—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞:</b>\n"
    for sub in expiring_1d[:5]:
        user_info = f"ID{sub.user.telegram_id}" if sub.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        sub_type = "üéÅ" if sub.is_trial else "üíé"
        text += f"{sub_type} {user_info} - {format_datetime(sub.end_date)}\n"
    
    if len(expiring_1d) > 5:
        text += f"... –∏ –µ—â–µ {len(expiring_1d) - 5}\n"
    
    keyboard = [
        [types.InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="admin_send_expiry_reminders")],
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_subs_expiring")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_subscriptions_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    stats = await get_subscriptions_statistics(db)
    
    expiring_3d = await get_expiring_subscriptions(db, 3)
    expiring_7d = await get_expiring_subscriptions(db, 7)
    expired = await get_expired_subscriptions(db)
    
    text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>

<b>üì± –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['total_subscriptions']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_subscriptions']}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_subscriptions'] - stats['active_subscriptions']}

<b>üíé –ü–æ —Ç–∏–ø–∞–º:</b>
‚Ä¢ –ü–ª–∞—Ç–Ω—ã—Ö: {stats['paid_subscriptions']}
‚Ä¢ –¢—Ä–∏–∞–ª—å–Ω—ã—Ö: {stats['trial_subscriptions']}

<b>üìà –ü—Ä–æ–¥–∞–∂–∏:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['purchased_today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['purchased_week']}  
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['purchased_month']}

<b>‚è∞ –ò—Å—Ç–µ—á–µ–Ω–∏–µ:</b>
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è: {len(expiring_3d)}
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π: {len(expiring_7d)}
‚Ä¢ –£–∂–µ –∏—Å—Ç–µ–∫–ª–∏: {len(expired)}

<b>üí∞ –ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –ò–∑ —Ç—Ä–∏–∞–ª–∞ –≤ –ø–ª–∞—Ç–Ω—É—é: {stats.get('trial_to_paid_conversion', 0)}%
‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–π: {stats.get('renewals_count', 0)}
"""
    
    keyboard = [
       # [
       #     types.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_subs_export"),
       #     types.InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_subs_charts")
       # ],
       # [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_subs_stats")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_countries_management(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    try:
        from app.services.remnawave_service import RemnaWaveService
        remnawave_service = RemnaWaveService()
        
        nodes_data = await remnawave_service.get_all_nodes()
        squads_data = await remnawave_service.get_all_squads() 
        
        text = "üåç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏</b>\n\n"
        
        if nodes_data:
            text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:</b>\n"
            countries = {}
            
            for node in nodes_data:
                country_code = node.get('country_code', 'XX')  
                country_name = country_code
                
                if country_name not in countries:
                    countries[country_name] = []
                countries[country_name].append(node)
            
            for country, nodes in countries.items():
                active_nodes = len([n for n in nodes if n.get('is_connected') and n.get('is_node_online')])
                total_nodes = len(nodes)
                
                country_flag = get_country_flag(country)
                text += f"{country_flag} {country}: {active_nodes}/{total_nodes} —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
                
                total_users_online = sum(n.get('users_online', 0) or 0 for n in nodes)
                if total_users_online > 0:
                    text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {total_users_online}\n"
        else:
            text += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"
        
        if squads_data:
            text += f"\n<b>–í—Å–µ–≥–æ —Å–∫–≤–∞–¥–æ–≤:</b> {len(squads_data)}\n"
            
            total_members = sum(squad.get('members_count', 0) for squad in squads_data)
            text += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–∫–≤–∞–¥–∞—Ö:</b> {total_members}\n"
            
            text += "\n<b>–°–∫–≤–∞–¥—ã:</b>\n"
            for squad in squads_data[:5]: 
                name = squad.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                members = squad.get('members_count', 0)
                inbounds = squad.get('inbounds_count', 0)
                text += f"‚Ä¢ {name}: {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {inbounds} inbound(s)\n"
            
            if len(squads_data) > 5:
                text += f"... –∏ –µ—â–µ {len(squads_data) - 5} —Å–∫–≤–∞–¥–æ–≤\n"
        
        user_stats = await get_users_by_countries(db)
        if user_stats:
            text += "\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:</b>\n"
            for country, count in user_stats.items():
                country_flag = get_country_flag(country)
                text += f"{country_flag} {country}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö: {e}")
        text = f"""
üåç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏</b>

‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö.

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RemnaWave API.

<b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b> {str(e)}
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_subs_countries")
        ],
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥", callback_data="admin_rw_nodes"),
            types.InlineKeyboardButton(text="üîß –°–∫–≤–∞–¥—ã", callback_data="admin_rw_squads")
        ],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def send_expiry_reminders(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.message.edit_text(
        "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.",
        reply_markup=None
    )
    
    expiring_subs = await get_expiring_subscriptions(db, 1)
    sent_count = 0
    
    for subscription in expiring_subs:
        if subscription.user:
            try:
                user = subscription.user
                days_left = max(1, subscription.days_left)
                
                reminder_text = f"""
‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–µ–Ω—å(–∞).

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º.

üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
"""
                
                await callback.bot.send_message(
                    chat_id=user.telegram_id,
                    text=reminder_text
                )
                sent_count += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}: {e}")
    
    await callback.message.edit_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count} –∏–∑ {len(expiring_subs)}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subs_expiring")]
        ])
    )
    await callback.answer()


@admin_required
@error_handler  
async def handle_subscriptions_pagination(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    page = int(callback.data.split('_')[-1])
    await show_subscriptions_list(callback, db_user, db, page)


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_subscriptions_menu, F.data == "admin_subscriptions")
    dp.callback_query.register(show_subscriptions_list, F.data == "admin_subs_list")
    dp.callback_query.register(show_expiring_subscriptions, F.data == "admin_subs_expiring")
    dp.callback_query.register(show_subscriptions_stats, F.data == "admin_subs_stats")
    dp.callback_query.register(show_countries_management, F.data == "admin_subs_countries")
    dp.callback_query.register(send_expiry_reminders, F.data == "admin_send_expiry_reminders")
    
    dp.callback_query.register(
        handle_subscriptions_pagination, 
        F.data.startswith("admin_subs_list_page_")
    )
