import logging
from datetime import datetime
from html import escape
from pathlib import Path

from aiogram import Dispatcher, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)

LOG_PREVIEW_LIMIT = 2300


def _resolve_log_path() -> Path:
    log_path = Path(settings.LOG_FILE)
    if not log_path.is_absolute():
        log_path = Path.cwd() / log_path
    return log_path


def _format_preview_block(text: str) -> str:
    escaped_text = escape(text) if text else ""
    return f"<blockquote expandable><pre><code>{escaped_text}</code></pre></blockquote>"


def _build_logs_message(log_path: Path) -> str:
    if not log_path.exists():
        message = (
            "üßæ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>\n\n"
            f"–§–∞–π–ª <code>{log_path}</code> –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.\n"
            "–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏."
        )
        return message

    try:
        content = log_path.read_text(encoding="utf-8", errors="ignore")
    except Exception as error:  # pragma: no cover - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º —á—Ç–µ–Ω–∏—è
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ %s: %s", log_path, error)
        message = (
            "‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª <code>{log_path}</code>."
        )
        return message

    total_length = len(content)
    stats = log_path.stat()
    updated_at = datetime.fromtimestamp(stats.st_mtime)

    if not content:
        preview_text = "–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç."
        truncated = False
    else:
        preview_text = content[-LOG_PREVIEW_LIMIT:]
        truncated = total_length > LOG_PREVIEW_LIMIT

    details_lines = [
        "üßæ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>",
        "",
        f"üìÅ <b>–§–∞–π–ª:</b> <code>{log_path}</code>",
        f"üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {updated_at.strftime('%d.%m.%Y %H:%M:%S')}",
        f"üßÆ <b>–†–∞–∑–º–µ—Ä:</b> {total_length} —Å–∏–º–≤–æ–ª–æ–≤",
        (
            f"üëá –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {LOG_PREVIEW_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤."
            if truncated
            else "üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."
        ),
        "",
        _format_preview_block(preview_text),
    ]

    return "\n".join(details_lines)


def _get_logs_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_system_logs_refresh")],
            [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ª–æ–≥", callback_data="admin_system_logs_download")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_submenu_system")],
        ]
    )


@admin_required
@error_handler
async def show_system_logs(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    log_path = _resolve_log_path()
    message = _build_logs_message(log_path)

    reply_markup = _get_logs_keyboard()
    await callback.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def refresh_system_logs(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    log_path = _resolve_log_path()
    message = _build_logs_message(log_path)

    reply_markup = _get_logs_keyboard()
    await callback.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def download_system_logs(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    log_path = _resolve_log_path()

    if not log_path.exists() or not log_path.is_file():
        await callback.answer("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await callback.answer("‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥...")

        document = FSInputFile(log_path)
        stats = log_path.stat()
        updated_at = datetime.fromtimestamp(stats.st_mtime).strftime("%d.%m.%Y %H:%M:%S")
        caption = (
            f"üßæ –õ–æ–≥-—Ñ–∞–π–ª <code>{log_path.name}</code>\n"
            f"üìÅ –ü—É—Ç—å: <code>{log_path}</code>\n"
            f"üïí –û–±–Ω–æ–≤–ª–µ–Ω: {updated_at}"
        )
        await callback.message.answer_document(document=document, caption=caption, parse_mode="HTML")
    except Exception as error:  # pragma: no cover - –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ %s: %s", log_path, error)
        await callback.message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
        )


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(
        show_system_logs,
        F.data == "admin_system_logs",
    )
    dp.callback_query.register(
        refresh_system_logs,
        F.data == "admin_system_logs_refresh",
    )
    dp.callback_query.register(
        download_system_logs,
        F.data == "admin_system_logs_download",
    )
