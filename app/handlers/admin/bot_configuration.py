import html
import io
import logging
import math
import time
from datetime import datetime
from typing import Dict, Iterable, List, Optional, Tuple

from aiogram import Dispatcher, F, types
from aiogram.filters import BaseFilter, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import SystemSetting, User
from app.localization.texts import get_texts
from app.config import settings
from app.services.remnawave_service import RemnaWaveService
from app.services.payment_service import PaymentService
from app.services.tribute_service import TributeService
from app.services.system_settings_service import (
    ReadOnlySettingError,
    bot_configuration_service,
)
from app.states import BotConfigStates
from app.utils.decorators import admin_required, error_handler
from app.utils.currency_converter import currency_converter
from app.external.telegram_stars import TelegramStarsService


CATEGORY_PAGE_SIZE = 10
SETTINGS_PAGE_SIZE = 8

CATEGORY_GROUP_METADATA: Dict[str, Dict[str, object]] = {
    "core": {
        "title": "ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ",
        "description": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã.",
        "icon": "ü§ñ",
        "categories": ("CORE", "CHANNEL"),
    },
    "support": {
        "title": "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "description": "–ö–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–µ–∂–∏–º—ã —Ç–∏–∫–µ—Ç–æ–≤, SLA –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
        "icon": "üí¨",
        "categories": ("SUPPORT",),
    },
    "payments": {
        "title": "üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "description": "YooKassa, CryptoBot, MulenPay, PAL24, Tribute –∏ Telegram Stars.",
        "icon": "üí≥",
        "categories": ("PAYMENT", "YOOKASSA", "CRYPTOBOT", "MULENPAY", "PAL24", "TRIBUTE", "TELEGRAM"),
    },
    "subscriptions": {
        "title": "üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—ã",
        "description": "–¢–∞—Ä–∏—Ñ—ã, –ø–µ—Ä–∏–æ–¥—ã, –ª–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ.",
        "icon": "üìÖ",
        "categories": ("SUBSCRIPTIONS_CORE", "PERIODS", "SUBSCRIPTION_PRICES", "TRAFFIC", "TRAFFIC_PACKAGES", "AUTOPAY"),
    },
    "trial": {
        "title": "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        "description": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.",
        "icon": "üéÅ",
        "categories": ("TRIAL",),
    },
    "referral": {
        "title": "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "description": "–ë–æ–Ω—É—Å—ã, –ø–æ—Ä–æ–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        "icon": "üë•",
        "categories": ("REFERRAL",),
    },
    "notifications": {
        "title": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –æ—Ç—á–µ—Ç—ã.",
        "icon": "üîî",
        "categories": ("NOTIFICATIONS", "ADMIN_NOTIFICATIONS", "ADMIN_REPORTS"),
    },
    "interface": {
        "title": "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥",
        "description": "–õ–æ–≥–æ—Ç–∏–ø, —Ç–µ–∫—Å—Ç—ã, —è–∑—ã–∫–∏, miniapp –∏ deep links.",
        "icon": "üé®",
        "categories": ("INTERFACE_BRANDING", "INTERFACE_SUBSCRIPTION", "CONNECT_BUTTON", "MINIAPP", "HAPP", "SKIP", "LOCALIZATION", "ADDITIONAL"),
    },
    "database": {
        "title": "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "description": "–†–µ–∂–∏–º –±–∞–∑—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL, SQLite –∏ Redis.",
        "icon": "üíæ",
        "categories": ("DATABASE", "POSTGRES", "SQLITE", "REDIS"),
    },
    "remnawave": {
        "title": "üåê RemnaWave API",
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å RemnaWave: URL, –∫–ª—é—á–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
        "icon": "üåê",
        "categories": ("REMNAWAVE",),
    },
    "server": {
        "title": "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤",
        "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤, SLA –∏ –≤–Ω–µ—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.",
        "icon": "üìä",
        "categories": ("SERVER_STATUS", "MONITORING"),
    },
    "maintenance": {
        "title": "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "description": "–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç, –±—ç–∫–∞–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.",
        "icon": "üîß",
        "categories": ("MAINTENANCE", "BACKUP", "VERSION"),
    },
    "advanced": {
        "title": "‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ",
        "description": "Web API, webhook, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏.",
        "icon": "‚ö°",
        "categories": ("WEB_API", "WEBHOOK", "LOG", "DEBUG"),
    },
    "external_admin": {
        "title": "üõ°Ô∏è –í–Ω–µ—à–Ω—è—è –∞–¥–º–∏–Ω–∫–∞",
        "description": "–¢–æ–∫–µ–Ω, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–Ω–µ—à–Ω—è—è –∞–¥–º–∏–Ω–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã.",
        "icon": "üõ°Ô∏è",
        "categories": ("EXTERNAL_ADMIN",),
    },
}

CATEGORY_GROUP_ORDER: Tuple[str, ...] = (
    "core",
    "support",
    "payments",
    "subscriptions",
    "trial",
    "referral",
    "notifications",
    "interface",
    "database",
    "remnawave",
    "server",
    "maintenance",
    "advanced",
    "external_admin",
)

CATEGORY_GROUP_DEFINITIONS: Tuple[Tuple[str, str, Tuple[str, ...]], ...] = tuple(
    (
        group_key,
        str(CATEGORY_GROUP_METADATA[group_key]["title"]),
        tuple(CATEGORY_GROUP_METADATA[group_key]["categories"]),
    )
    for group_key in CATEGORY_GROUP_ORDER
)

CATEGORY_TO_GROUP: Dict[str, str] = {}
for _group_key, _title, _category_keys in CATEGORY_GROUP_DEFINITIONS:
    for _category_key in _category_keys:
        CATEGORY_TO_GROUP[_category_key] = _group_key

CATEGORY_FALLBACK_KEY = "other"
CATEGORY_FALLBACK_TITLE = "üì¶ –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

PRESET_CONFIGS: Dict[str, Dict[str, object]] = {
    "recommended": {
        "ENABLE_NOTIFICATIONS": True,
        "ADMIN_NOTIFICATIONS_ENABLED": True,
        "ADMIN_REPORTS_ENABLED": True,
        "MONITORING_INTERVAL": 60,
        "TRIAL_DURATION_DAYS": 3,
    },
    "minimal": {
        "ENABLE_NOTIFICATIONS": False,
        "ADMIN_NOTIFICATIONS_ENABLED": False,
        "ADMIN_REPORTS_ENABLED": False,
        "TRIAL_DURATION_DAYS": 0,
        "REFERRAL_NOTIFICATIONS_ENABLED": False,
    },
    "secure": {
        "MAINTENANCE_AUTO_ENABLE": True,
        "ADMIN_NOTIFICATIONS_ENABLED": True,
        "ADMIN_REPORTS_ENABLED": True,
        "REFERRAL_MINIMUM_TOPUP_KOPEKS": 100000,
        "SERVER_STATUS_MODE": "disabled",
    },
    "testing": {
        "DEBUG": True,
        "ENABLE_NOTIFICATIONS": False,
        "TRIAL_DURATION_DAYS": 7,
        "SERVER_STATUS_MODE": "disabled",
        "ADMIN_NOTIFICATIONS_ENABLED": False,
    },
}

PRESET_METADATA: Dict[str, Dict[str, str]] = {
    "recommended": {
        "title": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "description": "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.",
    },
    "minimal": {
        "title": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "description": "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
    },
    "secure": {
        "title": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "description": "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.",
    },
    "testing": {
        "title": "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
    },
}


def _get_group_meta(group_key: str) -> Dict[str, object]:
    return CATEGORY_GROUP_METADATA.get(group_key, {})


def _get_group_description(group_key: str) -> str:
    meta = _get_group_meta(group_key)
    return str(meta.get("description", ""))


def _get_group_icon(group_key: str) -> str:
    meta = _get_group_meta(group_key)
    return str(meta.get("icon", "‚öôÔ∏è"))


def _get_group_status(group_key: str) -> Tuple[str, str]:
    key = group_key
    if key == "payments":
        payment_statuses = {
            "YooKassa": settings.is_yookassa_enabled(),
            "CryptoBot": settings.is_cryptobot_enabled(),
            "MulenPay": settings.is_mulenpay_enabled(),
            "PAL24": settings.is_pal24_enabled(),
            "Tribute": settings.TRIBUTE_ENABLED,
            "Stars": settings.TELEGRAM_STARS_ENABLED,
        }
        active = sum(1 for value in payment_statuses.values() if value)
        total = len(payment_statuses)
        if active == 0:
            return "üî¥", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"
        if active < total:
            return "üü°", f"–ê–∫—Ç–∏–≤–Ω–æ {active} –∏–∑ {total}"
        return "üü¢", "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã"

    if key == "remnawave":
        api_ready = bool(
            settings.REMNAWAVE_API_URL
            and (
                settings.REMNAWAVE_API_KEY
                or (settings.REMNAWAVE_USERNAME and settings.REMNAWAVE_PASSWORD)
            )
        )
        return ("üü¢", "API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ") if api_ready else ("üü°", "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL –∏ –∫–ª—é—á–∏")

    if key == "server":
        mode = (settings.SERVER_STATUS_MODE or "").lower()
        monitoring_active = mode not in {"", "disabled"}
        if monitoring_active:
            return "üü¢", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
        if settings.MONITORING_INTERVAL:
            return "üü°", "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç—ã"
        return "‚ö™", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω"

    if key == "maintenance":
        if settings.MAINTENANCE_MODE:
            return "üü°", "–†–µ–∂–∏–º –¢–û –≤–∫–ª—é—á–µ–Ω"
        return "üü¢", "–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º"

    if key == "notifications":
        user_on = settings.is_notifications_enabled()
        admin_on = settings.is_admin_notifications_enabled()
        if user_on and admin_on:
            return "üü¢", "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
        if user_on or admin_on:
            return "üü°", "–ß–∞—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞"
        return "‚ö™", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"

    if key == "trial":
        if settings.TRIAL_DURATION_DAYS > 0:
            return "üü¢", f"{settings.TRIAL_DURATION_DAYS} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
        return "‚ö™", "–¢—Ä–∏–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω"

    if key == "referral":
        active = (
            settings.REFERRAL_COMMISSION_PERCENT
            or settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS
            or settings.REFERRAL_INVITER_BONUS_KOPEKS
            or settings.get_referred_user_reward_kopeks()
        )
        return ("üü¢", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–Ω–∞") if active else ("‚ö™", "–ë–æ–Ω—É—Å—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")

    if key == "core":
        token_ok = bool(getattr(settings, "BOT_TOKEN", ""))
        channel_ok = bool(settings.CHANNEL_LINK or not settings.CHANNEL_IS_REQUIRED_SUB)
        if token_ok and channel_ok:
            return "üü¢", "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        return "üü°", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"

    if key == "subscriptions":
        price_ready = settings.PRICE_30_DAYS > 0 and settings.AVAILABLE_SUBSCRIPTION_PERIODS
        return ("üü¢", "–¢–∞—Ä–∏—Ñ—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã") if price_ready else ("‚ö™", "–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ü–µ–Ω—ã")

    if key == "database":
        mode = (settings.DATABASE_MODE or "auto").lower()
        if mode == "postgresql":
            return "üü¢", "PostgreSQL"
        if mode == "sqlite":
            return "üü°", "SQLite —Ä–µ–∂–∏–º"
        return "üü¢", "–ê–≤—Ç–æ —Ä–µ–∂–∏–º"

    if key == "interface":
        branding = bool(settings.ENABLE_LOGO_MODE or settings.MINIAPP_CUSTOM_URL)
        return ("üü¢", "–ë—Ä–µ–Ω–¥–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω") if branding else ("‚ö™", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    return "üü¢", "–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ"


def _get_setting_icon(definition, current_value: object) -> str:
    key_upper = definition.key.upper()

    if definition.python_type is bool:
        return "‚úÖ" if bool(current_value) else "‚ùå"

    if bot_configuration_service.has_choices(definition.key):
        return "üìã"

    if isinstance(current_value, (int, float)):
        return "üî¢"

    if isinstance(current_value, str):
        if not current_value.strip():
            return "‚ö™"
        if "URL" in key_upper:
            return "üîó"
        if any(keyword in key_upper for keyword in ("TOKEN", "SECRET", "PASSWORD", "KEY")):
            return "üîí"

    if any(keyword in key_upper for keyword in ("TIME", "HOUR", "MINUTE")):
        return "‚è±"
    if "DAYS" in key_upper:
        return "üìÜ"
    if "GB" in key_upper or "TRAFFIC" in key_upper:
        return "üìä"

    return "‚öôÔ∏è"


def _render_dashboard_overview() -> str:
    grouped = _get_grouped_categories()
    total_settings = 0
    total_overrides = 0

    for group_key, _title, items in grouped:
        for category_key, _label, count in items:
            total_settings += count
            definitions = bot_configuration_service.get_settings_for_category(category_key)
            total_overrides += sum(
                1 for definition in definitions if bot_configuration_service.has_override(definition.key)
            )

    lines: List[str] = [
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>",
        "",
        f"–í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: <b>{total_settings}</b> ‚Ä¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: <b>{total_overrides}</b>",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        "",
    ]

    for group_key, title, items in grouped:
        status_icon, status_text = _get_group_status(group_key)
        description = _get_group_description(group_key) if group_key != CATEGORY_FALLBACK_KEY else "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        total = sum(count for _, _, count in items)
        lines.append(f"{status_icon} <b>{title}</b> ‚Äî {status_text}")
        if description:
            lines.append(f"   {description}")
        lines.append(f"   –ù–∞—Å—Ç—Ä–æ–µ–∫: {total}")
        lines.append("")

    lines.append("üîç –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∫–ª—é—á—É.")
    return "\n".join(lines).strip()


def _build_group_category_index() -> Dict[str, List[str]]:
    mapping: Dict[str, List[str]] = {}
    for group_key, _title, items in _get_grouped_categories():
        mapping[group_key] = [category_key for category_key, _label, _count in items]
    return mapping


def _perform_settings_search(query: str) -> List[Dict[str, object]]:
    normalized = query.strip().lower()
    if not normalized:
        return []

    categories = bot_configuration_service.get_categories()
    group_category_index = _build_group_category_index()
    results: List[Dict[str, object]] = []

    for category_key, _label, _count in categories:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        group_key = CATEGORY_TO_GROUP.get(category_key, CATEGORY_FALLBACK_KEY)
        available_categories = group_category_index.get(group_key, [])
        if category_key in available_categories:
            category_index = available_categories.index(category_key)
            category_page = category_index // CATEGORY_PAGE_SIZE + 1
        else:
            category_page = 1

        for definition_index, definition in enumerate(definitions):
            fields = [definition.key.lower(), definition.display_name.lower()]
            guidance = bot_configuration_service.get_setting_guidance(definition.key)
            fields.extend(
                [
                    guidance.get("description", "").lower(),
                    guidance.get("format", "").lower(),
                    str(guidance.get("dependencies", "")).lower(),
                ]
            )

            if not any(normalized in field for field in fields if field):
                continue

            settings_page = definition_index // SETTINGS_PAGE_SIZE + 1
            results.append(
                {
                    "key": definition.key,
                    "name": definition.display_name,
                    "category_key": category_key,
                    "category_label": definition.category_label,
                    "group_key": group_key,
                    "category_page": category_page,
                    "settings_page": settings_page,
                    "token": bot_configuration_service.get_callback_token(definition.key),
                    "value": bot_configuration_service.format_value_human(
                        definition.key,
                        bot_configuration_service.get_current_value(definition.key),
                    ),
                }
            )

    results.sort(key=lambda item: item["name"].lower())
    return results[:20]


def _build_search_results_keyboard(results: List[Dict[str, object]]) -> types.InlineKeyboardMarkup:
    rows: List[List[types.InlineKeyboardButton]] = []
    for result in results:
        group_key = str(result["group_key"])
        category_page = int(result["category_page"])
        settings_page = int(result["settings_page"])
        token = str(result["token"])
        text = f"{result['name']}"
        if len(text) > 60:
            text = text[:59] + "‚Ä¶"
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=text,
                    callback_data=(
                        f"botcfg_setting:{group_key}:{category_page}:{settings_page}:{token}"
                    ),
                )
            ]
        )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="admin_bot_config",
            )
        ]
    )
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _parse_env_content(content: str) -> Dict[str, Optional[str]]:
    parsed: Dict[str, Optional[str]] = {}
    for raw_line in content.splitlines():
        line = raw_line.strip()
        if not line or line.startswith("#"):
            continue
        if "=" not in line:
            continue
        key, value = line.split("=", 1)
        parsed[key.strip()] = value.strip()
    return parsed


@admin_required
@error_handler
async def start_settings_search(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.set_state(BotConfigStates.waiting_for_search_query)
    await state.update_data(botcfg_origin="bot_config")

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –∫–ª—é—á–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. \n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>yookassa</code> –∏–ª–∏ <code>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</code>.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å", show_alert=False)


@admin_required
@error_handler
async def handle_search_query(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    if message.chat.type != "private":
        return

    data = await state.get_data()
    if data.get("botcfg_origin") != "bot_config":
        return

    query = (message.text or "").strip()
    results = _perform_settings_search(query)

    if results:
        keyboard = _build_search_results_keyboard(results)
        lines = [
            "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>",
            f"–ó–∞–ø—Ä–æ—Å: <code>{html.escape(query)}</code>",
            "",
        ]
        for index, item in enumerate(results, start=1):
            lines.append(
                f"{index}. {item['name']} ‚Äî {item['value']} ({item['category_label']})"
            )
        text = "\n".join(lines)
    else:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        callback_data="botcfg_action:search",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                    )
                ],
            ]
        )
        text = (
            "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            f"–ó–∞–ø—Ä–æ—Å: <code>{html.escape(query)}</code>\n\n"
            "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
        )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    await state.clear()


@admin_required
@error_handler
async def show_presets(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    lines = [
        "üéØ <b>–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</b>",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –µ–≥–æ –∫ –±–æ—Ç—É.",
        "",
    ]
    for key, meta in PRESET_METADATA.items():
        lines.append(f"‚Ä¢ <b>{meta['title']}</b> ‚Äî {meta['description']}")
    text = "\n".join(lines)

    buttons: List[types.InlineKeyboardButton] = []
    for key, meta in PRESET_METADATA.items():
        buttons.append(
            types.InlineKeyboardButton(
                text=meta["title"], callback_data=f"botcfg_preset:{key}"
            )
        )

    rows: List[List[types.InlineKeyboardButton]] = []
    for chunk in _chunk(buttons, 2):
        rows.append(list(chunk))
    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
            )
        ]
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await callback.answer()


def _format_preset_preview(preset_key: str) -> Tuple[str, List[str]]:
    config = PRESET_CONFIGS.get(preset_key, {})
    meta = PRESET_METADATA.get(preset_key, {"title": preset_key, "description": ""})
    title = meta["title"]
    description = meta.get("description", "")

    lines = [f"üéØ <b>{title}</b>"]
    if description:
        lines.append(description)
    lines.append("")
    lines.append("–ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")

    for index, (setting_key, new_value) in enumerate(config.items(), start=1):
        current_value = bot_configuration_service.get_current_value(setting_key)
        current_pretty = bot_configuration_service.format_value_human(setting_key, current_value)
        new_pretty = bot_configuration_service.format_value_human(setting_key, new_value)
        lines.append(
            f"{index}. <code>{setting_key}</code>\n"
            f"   –¢–µ–∫—É—â–µ–µ: {current_pretty}\n"
            f"   –ù–æ–≤–æ–µ: {new_pretty}"
        )

    return title, lines


@admin_required
@error_handler
async def preview_preset(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 1)
    preset_key = parts[1] if len(parts) > 1 else ""
    if preset_key not in PRESET_CONFIGS:
        await callback.answer("–≠—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    title, lines = _format_preset_preview(preset_key)
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"botcfg_preset_apply:{preset_key}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="botcfg_action:presets"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def apply_preset(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 1)
    preset_key = parts[1] if len(parts) > 1 else ""
    config = PRESET_CONFIGS.get(preset_key)
    if not config:
        await callback.answer("–≠—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    applied: List[str] = []
    for setting_key, value in config.items():
        try:
            await bot_configuration_service.set_value(db, setting_key, value)
            applied.append(setting_key)
        except ReadOnlySettingError:
            logging.getLogger(__name__).info(
                "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É %s –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ %s: —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è",
                setting_key,
                preset_key,
            )
        except Exception as error:
            logging.getLogger(__name__).warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç %s –¥–ª—è %s: %s",
                preset_key,
                setting_key,
                error,
            )
    await db.commit()

    title = PRESET_METADATA.get(preset_key, {}).get("title", preset_key)
    summary_lines = [
        f"‚úÖ –ü—Ä–µ—Å–µ—Ç <b>{title}</b> –ø—Ä–∏–º–µ–Ω–µ–Ω",
        "",
        f"–ò–∑–º–µ–Ω–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: <b>{len(applied)}</b>",
    ]
    if applied:
        summary_lines.append("\n".join(f"‚Ä¢ <code>{key}</code>" for key in applied))

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ö –ø—Ä–µ—Å–µ—Ç–∞–º", callback_data="botcfg_action:presets"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        "\n".join(summary_lines),
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", show_alert=False)


@admin_required
@error_handler
async def export_settings(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    categories = bot_configuration_service.get_categories()
    keys: List[str] = []
    for category_key, _label, _count in categories:
        for definition in bot_configuration_service.get_settings_for_category(category_key):
            keys.append(definition.key)

    keys = sorted(set(keys))
    lines = [
        "# RemnaWave bot configuration export",
        f"# Generated at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}",
    ]

    for setting_key in keys:
        current_value = bot_configuration_service.get_current_value(setting_key)
        raw_value = bot_configuration_service.serialize_value(setting_key, current_value)
        if raw_value is None:
            raw_value = ""
        lines.append(f"{setting_key}={raw_value}")

    content = "\n".join(lines)
    filename = f"bot-settings-{datetime.utcnow().strftime('%Y%m%d-%H%M%S')}.env"
    file = types.BufferedInputFile(content.encode("utf-8"), filename=filename)

    await callback.message.answer_document(
        document=file,
        caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        parse_mode="HTML",
    )
    await callback.answer("–§–∞–π–ª –≥–æ—Ç–æ–≤", show_alert=False)


@admin_required
@error_handler
async def start_import_settings(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.set_state(BotConfigStates.waiting_for_import_file)
    await state.update_data(botcfg_origin="bot_config")

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "üì• <b>–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –ø–∞—Ä—ã <code>KEY=value</code>.\n"
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    await callback.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .env", show_alert=False)


@admin_required
@error_handler
async def handle_import_message(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    if message.chat.type != "private":
        return

    data = await state.get_data()
    if data.get("botcfg_origin") != "bot_config":
        return

    content = ""
    if message.document:
        buffer = io.BytesIO()
        await message.document.download(destination=buffer)
        buffer.seek(0)
        content = buffer.read().decode("utf-8", errors="ignore")
    else:
        content = message.text or ""

    parsed = _parse_env_content(content)
    if not parsed:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç KEY=value.",
            parse_mode="HTML",
        )
        await state.clear()
        return

    applied: List[str] = []
    skipped: List[str] = []
    errors: List[str] = []

    for setting_key, raw_value in parsed.items():
        try:
            bot_configuration_service.get_definition(setting_key)
        except KeyError:
            skipped.append(setting_key)
            continue

        value_to_apply: Optional[object]
        try:
            if raw_value in {"", '""'}:
                value_to_apply = None
            else:
                value_to_apply = bot_configuration_service.deserialize_value(
                    setting_key, raw_value
                )
        except Exception as error:
            errors.append(f"{setting_key}: {error}")
            continue

        if bot_configuration_service.is_read_only(setting_key):
            skipped.append(setting_key)
            continue
        try:
            await bot_configuration_service.set_value(db, setting_key, value_to_apply)
            applied.append(setting_key)
        except ReadOnlySettingError:
            skipped.append(setting_key)

    await db.commit()

    summary_lines = [
        "üì• <b>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: <b>{len(applied)}</b>",
    ]
    if applied:
        summary_lines.append("\n".join(f"‚Ä¢ <code>{key}</code>" for key in applied))

    if skipped:
        summary_lines.append("\n–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏):")
        summary_lines.append("\n".join(f"‚Ä¢ <code>{key}</code>" for key in skipped))

    if errors:
        summary_lines.append("\n–û—à–∏–±–∫–∏ —Ä–∞–∑–±–æ—Ä–∞:")
        summary_lines.append("\n".join(f"‚Ä¢ {html.escape(err)}" for err in errors))

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ]
        ]
    )

    await message.answer(
        "\n".join(summary_lines), parse_mode="HTML", reply_markup=keyboard
    )
    await state.clear()


@admin_required
@error_handler
async def show_settings_history(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    result = await db.execute(
        select(SystemSetting).order_by(SystemSetting.updated_at.desc()).limit(10)
    )
    rows = result.scalars().all()

    lines = ["üïò <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>", ""]
    if rows:
        for row in rows:
            timestamp = row.updated_at or row.created_at
            ts_text = timestamp.strftime("%d.%m %H:%M") if timestamp else "‚Äî"
            try:
                parsed_value = bot_configuration_service.deserialize_value(row.key, row.value)
                formatted_value = bot_configuration_service.format_value_human(
                    row.key, parsed_value
                )
            except Exception:
                formatted_value = row.value or "‚Äî"
            lines.append(f"{ts_text} ‚Ä¢ <code>{row.key}</code> = {formatted_value}")
    else:
        lines.append("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞.")

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "\n".join(lines), parse_mode="HTML", reply_markup=keyboard
    )
    await callback.answer()


@admin_required
@error_handler
async def show_help(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    text = (
        "‚ùì <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞–Ω–µ–ª—å—é</b>\n\n"
        "‚Ä¢ –ù–∞–≤–∏–≥–∏—Ä—É–π—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        "‚Ä¢ –ó–Ω–∞—á–æ–∫ ‚ú≥Ô∏è —Ä—è–¥–æ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üîç –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .env –ø–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–º–µ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.\n"
        "‚Ä¢ –ò–º–ø–æ—Ä—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω.\n"
        "‚Ä¢ –í—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_bot_config"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        text, parse_mode="HTML", reply_markup=keyboard
    )
    await callback.answer()


async def _store_setting_context(
    state: FSMContext,
    *,
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> None:
    await state.update_data(
        setting_key=key,
        setting_group_key=group_key,
        setting_category_page=category_page,
        setting_settings_page=settings_page,
        botcfg_origin="bot_config",
        botcfg_timestamp=time.time(),
    )


class BotConfigInputFilter(BaseFilter):
    def __init__(self, timeout: float = 300.0) -> None:
        self.timeout = timeout

    async def __call__(
        self,
        message: types.Message,
        state: FSMContext,
    ) -> bool:
        if not message.text or message.text.startswith("/"):
            return False

        if message.chat.type != "private":
            return False

        data = await state.get_data()

        if data.get("botcfg_origin") != "bot_config":
            return False

        if not data.get("setting_key"):
            return False

        timestamp = data.get("botcfg_timestamp")
        if timestamp is None:
            return True

        try:
            return (time.time() - float(timestamp)) <= self.timeout
        except (TypeError, ValueError):
            return False


def _chunk(buttons: Iterable[types.InlineKeyboardButton], size: int) -> Iterable[List[types.InlineKeyboardButton]]:
    buttons_list = list(buttons)
    for index in range(0, len(buttons_list), size):
        yield buttons_list[index : index + size]


def _parse_category_payload(payload: str) -> Tuple[str, str, int, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else ""

    def _safe_int(value: str, default: int = 1) -> int:
        try:
            return max(1, int(value))
        except (TypeError, ValueError):
            return default

    category_page = _safe_int(parts[3]) if len(parts) > 3 else 1
    settings_page = _safe_int(parts[4]) if len(parts) > 4 else 1
    return group_key, category_key, category_page, settings_page


def _parse_group_payload(payload: str) -> Tuple[str, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        page = max(1, int(parts[2]))
    except (IndexError, ValueError):
        page = 1
    return group_key, page


def _get_grouped_categories() -> List[Tuple[str, str, List[Tuple[str, str, int]]]]:
    categories = bot_configuration_service.get_categories()
    categories_map = {key: (label, count) for key, label, count in categories}
    used: set[str] = set()
    grouped: List[Tuple[str, str, List[Tuple[str, str, int]]]] = []

    for group_key, title, category_keys in CATEGORY_GROUP_DEFINITIONS:
        items: List[Tuple[str, str, int]] = []
        for category_key in category_keys:
            if category_key in categories_map:
                label, count = categories_map[category_key]
                items.append((category_key, label, count))
                used.add(category_key)
        if items:
            grouped.append((group_key, title, items))

    remaining = [
        (key, label, count)
        for key, (label, count) in categories_map.items()
        if key not in used
    ]

    if remaining:
        remaining.sort(key=lambda item: item[1])
        grouped.append((CATEGORY_FALLBACK_KEY, CATEGORY_FALLBACK_TITLE, remaining))

    return grouped


def _build_groups_keyboard() -> types.InlineKeyboardMarkup:
    grouped = _get_grouped_categories()
    rows: list[list[types.InlineKeyboardButton]] = []

    for group_key, title, items in grouped:
        total = sum(count for _, _, count in items)
        status_icon, _ = _get_group_status(group_key)
        button_text = f"{status_icon} {title} ({total})"
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"botcfg_group:{group_key}:1",
                )
            ]
        )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="üîç –ù–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                callback_data="botcfg_action:search",
            ),
            types.InlineKeyboardButton(
                text="üéØ –ü—Ä–µ—Å–µ—Ç—ã",
                callback_data="botcfg_action:presets",
            ),
        ]
    )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="üì§ –≠–∫—Å–ø–æ—Ä—Ç .env",
                callback_data="botcfg_action:export",
            ),
            types.InlineKeyboardButton(
                text="üì• –ò–º–ø–æ—Ä—Ç .env",
                callback_data="botcfg_action:import",
            ),
        ]
    )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="üïò –ò—Å—Ç–æ—Ä–∏—è",
                callback_data="botcfg_action:history",
            ),
            types.InlineKeyboardButton(
                text="‚ùì –ü–æ–º–æ—â—å",
                callback_data="botcfg_action:help",
            ),
        ]
    )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_submenu_settings",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_categories_keyboard(
    group_key: str,
    group_title: str,
    categories: List[Tuple[str, str, int]],
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    total_pages = max(1, math.ceil(len(categories) / CATEGORY_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * CATEGORY_PAGE_SIZE
    end = start + CATEGORY_PAGE_SIZE
    sliced = categories[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []
    status_icon, _status_text = (
        _get_group_status(group_key)
        if group_key != CATEGORY_FALLBACK_KEY
        else ("‚ö™", "–ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    rows.append(
        [
            types.InlineKeyboardButton(
                text=f"{status_icon} {group_title}",
                callback_data="botcfg_group:noop",
            )
        ]
    )

    buttons: List[types.InlineKeyboardButton] = []
    for category_key, label, count in sliced:
        overrides = 0
        for definition in bot_configuration_service.get_settings_for_category(category_key):
            if bot_configuration_service.has_override(definition.key):
                overrides += 1
        badge = "‚ú≥Ô∏è" if overrides else "‚Ä¢"
        button_text = f"{badge} {label} ({count})"
        buttons.append(
            types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"botcfg_cat:{group_key}:{category_key}:{page}:1",
            )
        )

    for chunk in _chunk(buttons, 2):
        rows.append(list(chunk))

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"botcfg_group:{group_key}:{page - 1}",
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="botcfg_group:noop",
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"botcfg_group:{group_key}:{page + 1}",
                )
            )
        rows.append(nav_row)

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º",
                callback_data="admin_bot_config",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_settings_keyboard(
    category_key: str,
    group_key: str,
    category_page: int,
    language: str,
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    definitions = bot_configuration_service.get_settings_for_category(category_key)
    total_pages = max(1, math.ceil(len(definitions) / SETTINGS_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * SETTINGS_PAGE_SIZE
    end = start + SETTINGS_PAGE_SIZE
    sliced = definitions[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []
    texts = get_texts(language)

    if category_key == "REMNAWAVE":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üîå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    callback_data=(
                        f"botcfg_test_remnawave:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )

    test_payment_buttons: list[list[types.InlineKeyboardButton]] = []

    def _test_button(text: str, method: str) -> types.InlineKeyboardButton:
        return types.InlineKeyboardButton(
            text=text,
            callback_data=(
                f"botcfg_test_payment:{method}:{group_key}:{category_key}:{category_page}:{page}"
            ),
        )

    if category_key == "YOOKASSA":
        label = texts.t("PAYMENT_CARD_YOOKASSA", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (YooKassa)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "yookassa")])
    elif category_key == "TRIBUTE":
        label = texts.t("PAYMENT_CARD_TRIBUTE", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Tribute)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "tribute")])
    elif category_key == "MULENPAY":
        label = texts.t("PAYMENT_CARD_MULENPAY", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Mulen Pay)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "mulenpay")])
    elif category_key == "PAL24":
        label = texts.t("PAYMENT_CARD_PAL24", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (PayPalych)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "pal24")])
    elif category_key == "TELEGRAM":
        label = texts.t("PAYMENT_TELEGRAM_STARS", "‚≠ê Telegram Stars")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "stars")])
    elif category_key == "CRYPTOBOT":
        label = texts.t("PAYMENT_CRYPTOBOT", "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (CryptoBot)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "cryptobot")])

    if test_payment_buttons:
        rows.extend(test_payment_buttons)

    for definition in sliced:
        current_value = bot_configuration_service.get_current_value(definition.key)
        value_preview = bot_configuration_service.format_value_for_list(definition.key)
        icon = _get_setting_icon(definition, current_value)
        override_badge = "‚ú≥Ô∏è" if bot_configuration_service.has_override(definition.key) else "‚Ä¢"
        button_text = f"{override_badge} {icon} {definition.display_name}"
        if value_preview != "‚Äî":
            button_text += f" ¬∑ {value_preview}"
        if len(button_text) > 64:
            button_text = button_text[:63] + "‚Ä¶"
        callback_token = bot_configuration_service.get_callback_token(definition.key)
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_setting:{group_key}:{category_page}:{page}:{callback_token}"
                    ),
                )
            ]
        )

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page - 1}"
                    ),
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}", callback_data="botcfg_cat_page:noop"
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page + 1}"
                    ),
                )
            )
        rows.append(nav_row)

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=f"botcfg_group:{group_key}:{category_page}",
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_setting_keyboard(
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> types.InlineKeyboardMarkup:
    definition = bot_configuration_service.get_definition(key)
    rows: list[list[types.InlineKeyboardButton]] = []
    callback_token = bot_configuration_service.get_callback_token(key)
    is_read_only = bot_configuration_service.is_read_only(key)

    choice_options = bot_configuration_service.get_choice_options(key)
    if choice_options and not is_read_only:
        current_value = bot_configuration_service.get_current_value(key)
        choice_buttons: list[types.InlineKeyboardButton] = []
        for option in choice_options:
            choice_token = bot_configuration_service.get_choice_token(key, option.value)
            if choice_token is None:
                continue
            button_text = option.label
            if current_value == option.value and not button_text.startswith("‚úÖ"):
                button_text = f"‚úÖ {button_text}"
            choice_buttons.append(
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_choice:{group_key}:{category_page}:{settings_page}:{callback_token}:{choice_token}"
                    ),
                )
            )

        for chunk in _chunk(choice_buttons, 2):
            rows.append(list(chunk))

    if definition.python_type is bool and not is_read_only:
        rows.append([
            types.InlineKeyboardButton(
                text="üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å",
                callback_data=(
                    f"botcfg_toggle:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    if not is_read_only:
        rows.append([
            types.InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                callback_data=(
                    f"botcfg_edit:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    if bot_configuration_service.has_override(key) and not is_read_only:
        rows.append([
            types.InlineKeyboardButton(
                text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å",
                callback_data=(
                    f"botcfg_reset:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    if is_read_only:
        rows.append([
            types.InlineKeyboardButton(
                text="üîí –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è",
                callback_data="botcfg_group:noop",
            )
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=(
                f"botcfg_cat:{group_key}:{definition.category_key}:{category_page}:{settings_page}"
            ),
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _render_setting_text(key: str) -> str:
    summary = bot_configuration_service.get_setting_summary(key)
    guidance = bot_configuration_service.get_setting_guidance(key)

    lines = [
        f"üß© <b>{summary['name']}</b>",
        f"üîë <b>–ö–ª—é—á:</b> <code>{summary['key']}</code>",
        f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {summary['category_label']}",
        f"üìù <b>–¢–∏–ø:</b> {guidance['type']}",
        f"üìå <b>–¢–µ–∫—É—â–µ–µ:</b> {summary['current']}",
        f"üì¶ <b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {summary['original']}",
        f"‚ú≥Ô∏è <b>–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:</b> {'–î–∞' if summary['has_override'] else '–ù–µ—Ç'}",
        *(
            ["üîí <b>–†–µ–∂–∏–º:</b> –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"]
            if summary.get("is_read_only")
            else []
        ),
        "",
        f"üìò <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {guidance['description']}",
        f"üìê <b>–§–æ—Ä–º–∞—Ç:</b> {guidance['format']}",
        f"üí° <b>–ü—Ä–∏–º–µ—Ä:</b> {guidance['example']}",
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> {guidance['warning']}",
        f"üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b> {guidance['dependencies']}",
    ]

    choices = bot_configuration_service.get_choice_options(key)
    if choices:
        current_raw = bot_configuration_service.get_current_value(key)
        lines.append("")
        lines.append("üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>")
        for option in choices:
            marker = "‚úÖ" if current_raw == option.value else "‚Ä¢"
            value_display = bot_configuration_service.format_value_human(key, option.value)
            description = option.description or ""
            if description:
                lines.append(
                    f"{marker} {option.label} ‚Äî <code>{value_display}</code>\n   {description}"
                )
            else:
                lines.append(f"{marker} {option.label} ‚Äî <code>{value_display}</code>")

    return "\n".join(lines)


@admin_required
@error_handler
async def show_bot_config_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.clear()
    keyboard = _build_groups_keyboard()
    overview = _render_dashboard_overview()
    await callback.message.edit_text(
        overview,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_group(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, page = _parse_group_payload(callback.data)
    grouped = _get_grouped_categories()
    group_lookup = {key: (title, items) for key, title, items in grouped}

    if group_key not in group_lookup:
        await callback.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    group_title, items = group_lookup[group_key]
    keyboard = _build_categories_keyboard(group_key, group_title, items, page)
    status_icon, status_text = _get_group_status(group_key)
    description = _get_group_description(group_key)
    lines = [f"{status_icon} <b>{group_title}</b>"]
    if description:
        lines.append(description)
    if status_text:
        lines.append(f"–°—Ç–∞—Ç—É—Å: {status_text}")
    lines.append("")
    lines.append("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
    await callback.message.edit_text(
        "\n".join(lines),
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_category(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, category_key, category_page, settings_page = _parse_category_payload(
        callback.data
    )
    definitions = bot_configuration_service.get_settings_for_category(category_key)

    if not definitions:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return

    category_label = definitions[0].category_label
    category_description = bot_configuration_service.get_category_description(category_key)
    group_meta = _get_group_meta(group_key)
    group_title = str(group_meta.get("title", group_key))
    keyboard = _build_settings_keyboard(
        category_key,
        group_key,
        category_page,
        db_user.language,
        settings_page,
    )
    text_lines = [
        f"üóÇ <b>{category_label}</b>",
        f"–ù–∞–≤–∏–≥–∞—Ü–∏—è: üè† –ì–ª–∞–≤–Ω–æ–µ ‚Üí {group_title} ‚Üí {category_label}",
    ]
    if category_description:
        text_lines.append(category_description)
    text_lines.append("")
    text_lines.append("üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await callback.message.edit_text(
        "\n".join(text_lines),
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def test_remnawave_connection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else "REMNAWAVE"

    try:
        category_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        settings_page = 1

    service = RemnaWaveService()
    result = await service.test_api_connection()

    status = result.get("status")
    message: str

    if status == "connected":
        message = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    elif status == "not_configured":
        message = f"‚ö†Ô∏è {result.get('message', 'RemnaWave API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}"
    else:
        base_message = result.get("message", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        status_code = result.get("status_code")
        if status_code:
            message = f"‚ùå {base_message} (HTTP {status_code})"
        else:
            message = f"‚ùå {base_message}"

    definitions = bot_configuration_service.get_settings_for_category(category_key)
    if definitions:
        keyboard = _build_settings_keyboard(
            category_key,
            group_key,
            category_page,
            db_user.language,
            settings_page,
        )
        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            # ignore inability to refresh markup, main result shown in alert
            pass

    await callback.answer(message, show_alert=True)


@admin_required
@error_handler
async def test_payment_provider(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 6)
    method = parts[1] if len(parts) > 1 else ""
    group_key = parts[2] if len(parts) > 2 else CATEGORY_FALLBACK_KEY
    category_key = parts[3] if len(parts) > 3 else "PAYMENT"

    try:
        category_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[5])) if len(parts) > 5 else 1
    except ValueError:
        settings_page = 1

    language = db_user.language
    texts = get_texts(language)
    payment_service = PaymentService(callback.bot)

    message_text: str

    async def _refresh_markup() -> None:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        if definitions:
            keyboard = _build_settings_keyboard(
                category_key,
                group_key,
                category_page,
                language,
                settings_page,
            )
            try:
                await callback.message.edit_reply_markup(reply_markup=keyboard)
            except Exception:
                pass

    if method == "yookassa":
        if not settings.is_yookassa_enabled():
            await callback.answer("‚ùå YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞", show_alert=True)
            return

        amount_kopeks = 10 * 100
        description = settings.get_balance_payment_description(amount_kopeks)
        payment_result = await payment_service.create_yookassa_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–∞–¥–º–∏–Ω): {description}",
            metadata={
                "user_telegram_id": str(db_user.telegram_id),
                "purpose": "admin_test_payment",
                "provider": "yookassa",
            },
        )

        if not payment_result or not payment_result.get("confirmation_url"):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa", show_alert=True)
            await _refresh_markup()
            return

        confirmation_url = payment_result["confirmation_url"]
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî ID: {payment_result['yookassa_payment_id']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                        url=confirmation_url,
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_yookassa_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ YooKassa –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "tribute":
        if not settings.TRIBUTE_ENABLED:
            await callback.answer("‚ùå Tribute –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        tribute_service = TributeService(callback.bot)
        try:
            payment_url = await tribute_service.create_payment_link(
                user_id=db_user.telegram_id,
                amount_kopeks=10 * 100,
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Tribute (–∞–¥–º–∏–Ω)",
            )
        except Exception:
            payment_url = None

        if not payment_url:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ Tribute", show_alert=True)
            await _refresh_markup()
            return

        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Tribute</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(10 * 100)}\n"
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                        url=payment_url,
                    )
                ]
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ Tribute –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "mulenpay":
        if not settings.is_mulenpay_enabled():
            await callback.answer("‚ùå MulenPay –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_kopeks = 1 * 100
        payment_result = await payment_service.create_mulenpay_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay (–∞–¥–º–∏–Ω)",
            language=language,
        )

        if not payment_result or not payment_result.get("payment_url"):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ MulenPay", show_alert=True)
            await _refresh_markup()
            return

        payment_url = payment_result["payment_url"]
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî ID: {payment_result['mulen_payment_id']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                        url=payment_url,
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_mulenpay_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ MulenPay –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "pal24":
        if not settings.is_pal24_enabled():
            await callback.answer("‚ùå PayPalych –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_kopeks = 10 * 100
        payment_result = await payment_service.create_pal24_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ PayPalych (–∞–¥–º–∏–Ω)",
            language=language or "ru",
        )

        if not payment_result:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPalych", show_alert=True)
            await _refresh_markup()
            return

        sbp_url = (
            payment_result.get("sbp_url")
            or payment_result.get("transfer_url")
            or payment_result.get("link_url")
        )
        card_url = payment_result.get("card_url")
        fallback_url = payment_result.get("link_page_url") or payment_result.get("link_url")

        if not (sbp_url or card_url or fallback_url):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPalych", show_alert=True)
            await _refresh_markup()
            return

        if not sbp_url:
            sbp_url = fallback_url

        default_sbp_text = texts.t(
            "PAL24_SBP_PAY_BUTTON",
            "üè¶ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ PayPalych (–°–ë–ü)",
        )
        sbp_button_text = settings.get_pal24_sbp_button_text(default_sbp_text)

        default_card_text = texts.t(
            "PAL24_CARD_PAY_BUTTON",
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π (PayPalych)",
        )
        card_button_text = settings.get_pal24_card_button_text(default_card_text)

        pay_rows: list[list[types.InlineKeyboardButton]] = []
        if sbp_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=sbp_button_text,
                    url=sbp_url,
                )
            ])

        if card_url and card_url != sbp_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=card_button_text,
                    url=card_url,
                )
            ])

        if not pay_rows and fallback_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=sbp_button_text,
                    url=fallback_url,
                )
            ])

        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ PayPalych</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî Bill ID: {payment_result['bill_id']}"
        )
        keyboard_rows = pay_rows + [
            [
                types.InlineKeyboardButton(
                    text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data=f"check_pal24_{payment_result['local_payment_id']}",
                )
            ],
        ]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ PayPalych –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "stars":
        if not settings.TELEGRAM_STARS_ENABLED:
            await callback.answer("‚ùå Telegram Stars –æ—Ç–∫–ª—é—á–µ–Ω—ã", show_alert=True)
            return

        stars_rate = settings.get_stars_rate()
        amount_kopeks = max(1, int(round(stars_rate * 100)))
        payload = f"admin_stars_test_{db_user.id}_{int(time.time())}"
        try:
            invoice_link = await payment_service.create_stars_invoice(
                amount_kopeks=amount_kopeks,
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars (–∞–¥–º–∏–Ω)",
                payload=payload,
            )
        except Exception:
            invoice_link = None

        if not invoice_link:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ Telegram Stars", show_alert=True)
            await _refresh_markup()
            return

        stars_amount = TelegramStarsService.calculate_stars_from_rubles(amount_kopeks / 100)
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"‚≠ê –ö –æ–ø–ª–∞—Ç–µ: {stars_amount}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t("PAYMENT_TELEGRAM_STARS", "‚≠ê –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç"),
                        url=invoice_link,
                    )
                ]
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "cryptobot":
        if not settings.is_cryptobot_enabled():
            await callback.answer("‚ùå CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_rubles = 100.0
        try:
            current_rate = await currency_converter.get_usd_to_rub_rate()
        except Exception:
            current_rate = None

        if not current_rate or current_rate <= 0:
            current_rate = 100.0

        amount_usd = round(amount_rubles / current_rate, 2)
        if amount_usd < 1:
            amount_usd = 1.0

        payment_result = await payment_service.create_cryptobot_payment(
            db=db,
            user_id=db_user.id,
            amount_usd=amount_usd,
            asset=settings.CRYPTOBOT_DEFAULT_ASSET,
            description=f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ CryptoBot {amount_rubles:.0f} ‚ÇΩ ({amount_usd:.2f} USD)",
            payload=f"admin_cryptobot_test_{db_user.id}_{int(time.time())}",
        )

        if not payment_result:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ CryptoBot", show_alert=True)
            await _refresh_markup()
            return

        payment_url = (
            payment_result.get("bot_invoice_url")
            or payment_result.get("mini_app_invoice_url")
            or payment_result.get("web_app_invoice_url")
        )

        if not payment_url:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É CryptoBot", show_alert=True)
            await _refresh_markup()
            return

        amount_kopeks = int(amount_rubles * 100)
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ CryptoBot</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {texts.format_price(amount_kopeks)}\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {amount_usd:.2f} USD\n"
            f"ü™ô –ê–∫—Ç–∏–≤: {payment_result['asset']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="ü™ô –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç", url=payment_url)
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_cryptobot_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ CryptoBot –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    await _refresh_markup()


@admin_required
@error_handler
async def show_bot_config_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer()


@admin_required
@error_handler
async def start_edit_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    if bot_configuration_service.is_read_only(key):
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    definition = bot_configuration_service.get_definition(key)

    summary = bot_configuration_service.get_setting_summary(key)
    texts = get_texts(db_user.language)

    instructions = [
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary['name']}",
        f"–ö–ª—é—á: <code>{summary['key']}</code>",
        f"–¢–∏–ø: {summary['type']}",
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {summary['current']}",
        "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
    ]

    if definition.is_optional:
        instructions.append("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 'none' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    instructions.append("–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'cancel'.")

    await callback.message.edit_text(
        "\n".join(instructions),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.BACK,
                        callback_data=(
                            f"botcfg_setting:{group_key}:{category_page}:{settings_page}:{token}"
                        ),
                    )
                ]
            ]
        ),
    )

    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await state.set_state(BotConfigStates.waiting_for_value)
    await callback.answer()


@admin_required
@error_handler
async def handle_edit_setting(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = data.get("setting_category_page", 1)
    settings_page = data.get("setting_settings_page", 1)

    if not key:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    if bot_configuration_service.is_read_only(key):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        await state.clear()
        return

    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    try:
        await bot_configuration_service.set_value(db, key, value)
    except ReadOnlySettingError:
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        await state.clear()
        return
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard)
    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def handle_direct_setting_input(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()

    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = int(data.get("setting_category_page", 1) or 1)
    settings_page = int(data.get("setting_settings_page", 1) or 1)

    if not key:
        return

    if bot_configuration_service.is_read_only(key):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        await state.clear()
        return

    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    try:
        await bot_configuration_service.set_value(db, key, value)
    except ReadOnlySettingError:
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        await state.clear()
        return
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard)

    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def reset_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    if bot_configuration_service.is_read_only(key):
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    try:
        await bot_configuration_service.reset_value(db, key)
    except ReadOnlySettingError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–°–±—Ä–æ—à–µ–Ω–æ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


@admin_required
@error_handler
async def toggle_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    if bot_configuration_service.is_read_only(key):
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    current = bot_configuration_service.get_current_value(key)
    new_value = not bool(current)
    try:
        await bot_configuration_service.set_value(db, key, new_value)
    except ReadOnlySettingError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def apply_setting_choice(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    choice_token = parts[5] if len(parts) > 5 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    if bot_configuration_service.is_read_only(key):
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return

    try:
        value = bot_configuration_service.resolve_choice_token(key, choice_token)
    except KeyError:
        await callback.answer("–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    try:
        await bot_configuration_service.set_value(db, key, value)
    except ReadOnlySettingError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è", show_alert=True)
        return
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(
        show_bot_config_menu,
        F.data == "admin_bot_config",
    )
    dp.callback_query.register(
        start_settings_search,
        F.data == "botcfg_action:search",
    )
    dp.callback_query.register(
        show_presets,
        F.data == "botcfg_action:presets",
    )
    dp.callback_query.register(
        apply_preset,
        F.data.startswith("botcfg_preset_apply:"),
    )
    dp.callback_query.register(
        preview_preset,
        F.data.startswith("botcfg_preset:") & (~F.data.startswith("botcfg_preset_apply:")),
    )
    dp.callback_query.register(
        export_settings,
        F.data == "botcfg_action:export",
    )
    dp.callback_query.register(
        start_import_settings,
        F.data == "botcfg_action:import",
    )
    dp.callback_query.register(
        show_settings_history,
        F.data == "botcfg_action:history",
    )
    dp.callback_query.register(
        show_help,
        F.data == "botcfg_action:help",
    )
    dp.callback_query.register(
        show_bot_config_group,
        F.data.startswith("botcfg_group:") & (~F.data.endswith(":noop")),
    )
    dp.callback_query.register(
        show_bot_config_category,
        F.data.startswith("botcfg_cat:"),
    )
    dp.callback_query.register(
        test_remnawave_connection,
        F.data.startswith("botcfg_test_remnawave:"),
    )
    dp.callback_query.register(
        test_payment_provider,
        F.data.startswith("botcfg_test_payment:"),
    )
    dp.callback_query.register(
        show_bot_config_setting,
        F.data.startswith("botcfg_setting:"),
    )
    dp.callback_query.register(
        start_edit_setting,
        F.data.startswith("botcfg_edit:"),
    )
    dp.callback_query.register(
        reset_setting,
        F.data.startswith("botcfg_reset:"),
    )
    dp.callback_query.register(
        toggle_setting,
        F.data.startswith("botcfg_toggle:"),
    )
    dp.callback_query.register(
        apply_setting_choice,
        F.data.startswith("botcfg_choice:"),
    )
    dp.message.register(
        handle_direct_setting_input,
        StateFilter(None),
        F.text,
        BotConfigInputFilter(),
    )
    dp.message.register(
        handle_edit_setting,
        BotConfigStates.waiting_for_value,
    )
    dp.message.register(
        handle_search_query,
        BotConfigStates.waiting_for_search_query,
    )
    dp.message.register(
        handle_import_message,
        BotConfigStates.waiting_for_import_file,
    )

