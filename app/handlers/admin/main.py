import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.admin import (
    get_admin_main_keyboard,
    get_admin_users_submenu_keyboard,
    get_admin_promo_submenu_keyboard,
    get_admin_communications_submenu_keyboard,
    get_admin_support_submenu_keyboard,
    get_admin_settings_submenu_keyboard,
    get_admin_system_submenu_keyboard
)
from app.localization.texts import get_texts
from app.handlers.admin import support_settings as support_settings_handlers
from app.utils.decorators import admin_required, error_handler
from app.services.support_settings_service import SupportSettingsService
from app.database.crud.rules import clear_all_rules, get_rules_statistics
from app.localization.texts import clear_rules_cache
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database.crud.ticket import TicketCRUD

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_admin_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    admin_text = texts.ADMIN_PANEL
    try:
        from app.services.remnawave_service import RemnaWaveService
        remnawave_service = RemnaWaveService()
        stats = await remnawave_service.get_system_statistics()
        system_stats = stats.get("system", {})
        users_online = system_stats.get("users_online", 0)
        users_today = system_stats.get("users_last_day", 0)
        users_week = system_stats.get("users_last_week", 0)
        admin_text = admin_text.replace(
            "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            (
                f"\n\n- üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {users_online}"
                f"\n- üìÖ –û–Ω–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è: {users_today}"
                f"\n- üóìÔ∏è –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {users_week}"
                "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            ),
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Remnawave –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
    
    await callback.message.edit_text(
        admin_text,
        reply_markup=get_admin_main_keyboard(db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_users_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    await callback.message.edit_text(
        texts.t("ADMIN_USERS_SUBMENU_TITLE", "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏**\n\n") +
        texts.t("ADMIN_SUBMENU_SELECT_SECTION", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"),
        reply_markup=get_admin_users_submenu_keyboard(db_user.language),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_promo_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    await callback.message.edit_text(
        texts.t("ADMIN_PROMO_SUBMENU_TITLE", "üí∞ **–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n") +
        texts.t("ADMIN_SUBMENU_SELECT_SECTION", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"),
        reply_markup=get_admin_promo_submenu_keyboard(db_user.language),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_communications_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    await callback.message.edit_text(
        texts.t("ADMIN_COMMUNICATIONS_SUBMENU_TITLE", "üì® **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏**\n\n") +
        texts.t("ADMIN_COMMUNICATIONS_SUBMENU_DESCRIPTION", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"),
        reply_markup=get_admin_communications_submenu_keyboard(db_user.language),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_support_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    # Moderators have access only to tickets and not to settings
    is_moderator_only = (not settings.is_admin(callback.from_user.id) and SupportSettingsService.is_moderator(callback.from_user.id))
    
    kb = get_admin_support_submenu_keyboard(db_user.language)
    if is_moderator_only:
        # Rebuild keyboard to include only tickets and back to main menu
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=texts.t("ADMIN_SUPPORT_TICKETS", "üé´ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"), callback_data="admin_tickets")],
            [InlineKeyboardButton(text=texts.BACK, callback_data="back_to_menu")]
        ])
    await callback.message.edit_text(
        texts.t("ADMIN_SUPPORT_SUBMENU_TITLE", "üõü **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n") + (
            texts.t("ADMIN_SUPPORT_SUBMENU_DESCRIPTION_MODERATOR", "–î–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç–∞–º.")
            if is_moderator_only
            else texts.t("ADMIN_SUPPORT_SUBMENU_DESCRIPTION", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
        ),
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await callback.answer()


# Moderator panel entry (from main menu quick button)
async def show_moderator_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts.t("ADMIN_SUPPORT_TICKETS", "üé´ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"), callback_data="admin_tickets")],
        [InlineKeyboardButton(text=texts.t("BACK_TO_MAIN_MENU_BUTTON", "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(
        texts.t("ADMIN_SUPPORT_MODERATION_TITLE", "üßë‚Äç‚öñÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>") + "\n\n" +
        texts.t("ADMIN_SUPPORT_MODERATION_DESCRIPTION", "–î–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏."),
        parse_mode="HTML",
        reply_markup=kb
    )
    await callback.answer()


@admin_required
@error_handler
async def show_support_audit(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    # pagination
    page = 1
    if callback.data.startswith("admin_support_audit_page_"):
        try:
            page = int(callback.data.split("_")[-1])
        except Exception:
            page = 1
    per_page = 10
    total = await TicketCRUD.count_support_audit(db)
    total_pages = max(1, (total + per_page - 1) // per_page)
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    offset = (page - 1) * per_page
    logs = await TicketCRUD.list_support_audit(db, limit=per_page, offset=offset)

    lines = [texts.t("ADMIN_SUPPORT_AUDIT_TITLE", "üßæ <b>–ê—É–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤</b>"), ""]
    if not logs:
        lines.append(texts.t("ADMIN_SUPPORT_AUDIT_EMPTY", "–ü–æ–∫–∞ –ø—É—Å—Ç–æ"))
    else:
        for log in logs:
            role = (
                texts.t("ADMIN_SUPPORT_AUDIT_ROLE_MODERATOR", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                if getattr(log, 'is_moderator', False)
                else texts.t("ADMIN_SUPPORT_AUDIT_ROLE_ADMIN", "–ê–¥–º–∏–Ω")
            )
            ts = log.created_at.strftime('%d.%m.%Y %H:%M') if getattr(log, 'created_at', None) else ''
            action_map = {
                'close_ticket': texts.t("ADMIN_SUPPORT_AUDIT_ACTION_CLOSE_TICKET", "–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞"),
                'block_user_timed': texts.t("ADMIN_SUPPORT_AUDIT_ACTION_BLOCK_TIMED", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–≤—Ä–µ–º—è)"),
                'block_user_perm': texts.t("ADMIN_SUPPORT_AUDIT_ACTION_BLOCK_PERM", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞)"),
                'unblock_user': texts.t("ADMIN_SUPPORT_AUDIT_ACTION_UNBLOCK", "–°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∞"),
            }
            action_text = action_map.get(log.action, log.action)
            ticket_part = f" —Ç–∏–∫–µ—Ç #{log.ticket_id}" if log.ticket_id else ""
            details = log.details or {}
            extra = ""
            if log.action == 'block_user_timed' and 'minutes' in details:
                extra = f" ({details['minutes']} –º–∏–Ω)"
            lines.append(f"{ts} ‚Ä¢ {role} <code>{log.actor_telegram_id}</code> ‚Äî {action_text}{ticket_part}{extra}")

    # keyboard with pagination
    nav_row = []
    if total_pages > 1:
        if page > 1:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_support_audit_page_{page-1}"))
        nav_row.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page"))
        if page < total_pages:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_support_audit_page_{page+1}"))

    kb_rows = []
    if nav_row:
        kb_rows.append(nav_row)
    kb_rows.append([InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_support")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    await callback.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=kb)
    await callback.answer()


@admin_required
@error_handler
async def show_settings_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    await callback.message.edit_text(
        texts.t("ADMIN_SETTINGS_SUBMENU_TITLE", "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n") +
        texts.t("ADMIN_SETTINGS_SUBMENU_DESCRIPTION", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Remnawave, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"),
        reply_markup=get_admin_settings_submenu_keyboard(db_user.language),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_required
@error_handler
async def show_system_submenu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    await callback.message.edit_text(
        texts.t("ADMIN_SYSTEM_SUBMENU_TITLE", "üõ†Ô∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**\n\n") +
        texts.t("ADMIN_SYSTEM_SUBMENU_DESCRIPTION", "–û—Ç—á–µ—Ç—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ª–æ–≥–∏, —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"),
        reply_markup=get_admin_system_submenu_keyboard(db_user.language),
        parse_mode="Markdown"
    )
    await callback.answer()



@admin_required
@error_handler
async def clear_rules_command(
    message: types.Message,
    db_user: User,
    db: AsyncSession
):
    try:
        stats = await get_rules_statistics(db)
        
        if stats['total_active'] == 0:
            await message.reply(
                "‚ÑπÔ∏è <b>–ü—Ä–∞–≤–∏–ª–∞ —É–∂–µ –æ—á–∏—â–µ–Ω—ã</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            return
        
        success = await clear_all_rules(db, db_user.language)
        
        if success:
            clear_rules_cache()
            
            await message.reply(
                f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –û—á–∏—â–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {stats['total_active']}\n"
                f"‚Ä¢ –Ø–∑—ã–∫: {db_user.language}\n"
                f"‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª: {db_user.full_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            
            logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id} ({db_user.full_name})")
        else:
            await message.reply(
                "‚ö†Ô∏è <b>–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥–æ–π: {e}")
        await message.reply(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )


@admin_required
@error_handler
async def rules_stats_command(
    message: types.Message,
    db_user: User,
    db: AsyncSession
):
    try:
        stats = await get_rules_statistics(db)
        
        if 'error' in stats:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            return
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        text += f"üìã <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {stats['total_active']}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {stats['total_all_time']}\n"
        text += f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤: {stats['total_languages']}\n\n"
        
        if stats['languages']:
            text += f"üåê <b>–ü–æ —è–∑—ã–∫–∞–º:</b>\n"
            for lang, lang_stats in stats['languages'].items():
                text += f"‚Ä¢ <code>{lang}</code>: {lang_stats['active_count']} –ø—Ä–∞–≤–∏–ª, "
                text += f"{lang_stats['content_length']} —Å–∏–º–≤–æ–ª–æ–≤\n"
                if lang_stats['last_updated']:
                    text += f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lang_stats['last_updated'].strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        
        await message.reply(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
        await message.reply(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )


@admin_required
@error_handler
async def admin_commands_help(
    message: types.Message,
    db_user: User,
    db: AsyncSession
):
    help_text = """
üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏:</b>
‚Ä¢ <code>/clear_rules</code> - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ <code>/rules_stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª

<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:</b>
‚Ä¢ <code>/admin_help</code> - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>üì± –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ —Ç—Ä–µ–±—É—é—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.
"""
    
    await message.reply(help_text)


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(
        show_admin_panel,
        F.data == "admin_panel"
    )
    
    dp.callback_query.register(
        show_users_submenu,
        F.data == "admin_submenu_users"
    )
    
    dp.callback_query.register(
        show_promo_submenu,
        F.data == "admin_submenu_promo"
    )
    
    dp.callback_query.register(
        show_communications_submenu,
        F.data == "admin_submenu_communications"
    )
    
    dp.callback_query.register(
        show_support_submenu,
        F.data == "admin_submenu_support"
    )
    dp.callback_query.register(
        show_support_audit,
        F.data.in_(["admin_support_audit"]) | F.data.startswith("admin_support_audit_page_")
    )
    
    dp.callback_query.register(
        show_settings_submenu,
        F.data == "admin_submenu_settings"
    )
    
    dp.callback_query.register(
        show_system_submenu,
        F.data == "admin_submenu_system"
    )
    dp.callback_query.register(
        show_moderator_panel,
        F.data == "moderator_panel"
    )
    # Support settings module
    support_settings_handlers.register_handlers(dp)
    
    dp.message.register(
        clear_rules_command,
        Command("clear_rules")
    )
    
    dp.message.register(
        rules_stats_command,
        Command("rules_stats")
    )
    
    dp.message.register(
        admin_commands_help,
        Command("admin_help")
    )