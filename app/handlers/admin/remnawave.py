import logging
import math
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from app.states import SquadRenameStates, SquadCreateStates, SquadMigrationStates
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.database.crud.server_squad import (
    count_active_users_for_squad,
    get_all_server_squads,
    get_server_squad_by_uuid,
)
from app.keyboards.admin import (
   get_admin_remnawave_keyboard, get_sync_options_keyboard,
   get_node_management_keyboard, get_confirmation_keyboard,
   get_squad_management_keyboard, get_squad_edit_keyboard
)
from app.localization.texts import get_texts
from app.services.remnawave_service import RemnaWaveService, RemnaWaveConfigurationError
from app.utils.decorators import admin_required, error_handler
from app.utils.formatters import format_bytes, format_datetime

logger = logging.getLogger(__name__)

squad_inbound_selections = {}
squad_create_data = {}

MIGRATION_PAGE_SIZE = 8


def _format_migration_server_label(texts, server) -> str:
    status = (
        texts.t("ADMIN_SQUAD_MIGRATION_STATUS_AVAILABLE", "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
        if getattr(server, "is_available", True)
        else texts.t("ADMIN_SQUAD_MIGRATION_STATUS_UNAVAILABLE", "üö´ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    )
    return texts.t(
        "ADMIN_SQUAD_MIGRATION_SERVER_LABEL",
        "{name} ‚Äî üë• {users} ({status})",
    ).format(name=server.display_name, users=server.current_users, status=status)


def _build_migration_keyboard(
    texts,
    squads,
    page: int,
    total_pages: int,
    stage: str,
    *,
    exclude_uuid: str = None,
):
    prefix = "admin_migration_source" if stage == "source" else "admin_migration_target"
    rows = []
    has_items = False

    button_template = texts.t(
        "ADMIN_SQUAD_MIGRATION_SQUAD_BUTTON",
        "üåç {name} ‚Äî üë• {users} ({status})",
    )

    for squad in squads:
        if exclude_uuid and squad.squad_uuid == exclude_uuid:
            continue

        has_items = True
        status = (
            texts.t("ADMIN_SQUAD_MIGRATION_STATUS_AVAILABLE_SHORT", "‚úÖ")
            if getattr(squad, "is_available", True)
            else texts.t("ADMIN_SQUAD_MIGRATION_STATUS_UNAVAILABLE_SHORT", "üö´")
        )
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=button_template.format(
                        name=squad.display_name,
                        users=squad.current_users,
                        status=status,
                    ),
                    callback_data=f"{prefix}_{squad.squad_uuid}",
                )
            ]
        )

    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"{prefix}_page_{page - 1}",
                )
            )
        nav_buttons.append(
            types.InlineKeyboardButton(
                text=texts.t(
                    "ADMIN_SQUAD_MIGRATION_PAGE",
                    "–°—Ç—Ä. {page}/{pages}",
                ).format(page=page, pages=total_pages),
                callback_data="admin_migration_page_info",
            )
        )
        if page < total_pages:
            nav_buttons.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"{prefix}_page_{page + 1}",
                )
            )
        rows.append(nav_buttons)

    rows.append(
        [
            types.InlineKeyboardButton(
                text=texts.CANCEL,
                callback_data="admin_migration_cancel",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows), has_items


async def _fetch_migration_page(
    db: AsyncSession,
    page: int,
):
    squads, total = await get_all_server_squads(
        db,
        page=max(1, page),
        limit=MIGRATION_PAGE_SIZE,
    )
    total_pages = max(1, math.ceil(total / MIGRATION_PAGE_SIZE))

    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
        squads, total = await get_all_server_squads(
            db,
            page=page,
            limit=MIGRATION_PAGE_SIZE,
        )
        total_pages = max(1, math.ceil(total / MIGRATION_PAGE_SIZE))

    return squads, page, total_pages


@admin_required
@error_handler
async def show_squad_migration_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    texts = get_texts(db_user.language)

    await state.clear()

    squads, page, total_pages = await _fetch_migration_page(db, page=1)
    keyboard, has_items = _build_migration_keyboard(
        texts,
        squads,
        page,
        total_pages,
        "source",
    )

    message = (
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECT_SOURCE",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å:",
        )
    )

    if not has_items:
        message += (
            "\n\n"
            + texts.t(
                "ADMIN_SQUAD_MIGRATION_NO_OPTIONS",
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
            )
        )

    await state.set_state(SquadMigrationStates.selecting_source)

    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def paginate_migration_source(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    if await state.get_state() != SquadMigrationStates.selecting_source:
        await callback.answer()
        return

    try:
        page = int(callback.data.split("_page_")[-1])
    except (ValueError, IndexError):
        await callback.answer()
        return

    squads, page, total_pages = await _fetch_migration_page(db, page=page)
    texts = get_texts(db_user.language)
    keyboard, has_items = _build_migration_keyboard(
        texts,
        squads,
        page,
        total_pages,
        "source",
    )

    message = (
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECT_SOURCE",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å:",
        )
    )

    if not has_items:
        message += (
            "\n\n"
            + texts.t(
                "ADMIN_SQUAD_MIGRATION_NO_OPTIONS",
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
            )
        )

    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_migration_source_selection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    if await state.get_state() != SquadMigrationStates.selecting_source:
        await callback.answer()
        return

    if "_page_" in callback.data:
        await callback.answer()
        return

    source_uuid = callback.data.replace("admin_migration_source_", "", 1)

    texts = get_texts(db_user.language)
    server = await get_server_squad_by_uuid(db, source_uuid)

    if not server:
        await callback.answer(
            texts.t(
                "ADMIN_SQUAD_MIGRATION_SQUAD_NOT_FOUND",
                "–°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            ),
            show_alert=True,
        )
        return

    await state.update_data(
        source_uuid=server.squad_uuid,
        source_display=_format_migration_server_label(texts, server),
    )

    squads, page, total_pages = await _fetch_migration_page(db, page=1)
    keyboard, has_items = _build_migration_keyboard(
        texts,
        squads,
        page,
        total_pages,
        "target",
        exclude_uuid=server.squad_uuid,
    )

    message = (
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECTED_SOURCE",
            "–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
        ).format(source=_format_migration_server_label(texts, server))
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECT_TARGET",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å:",
        )
    )

    if not has_items:
        message += (
            "\n\n"
            + texts.t(
                "ADMIN_SQUAD_MIGRATION_TARGET_EMPTY",
                "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–∫–≤–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞. –û—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–∫–≤–∞–¥—ã.",
            )
        )

    await state.set_state(SquadMigrationStates.selecting_target)

    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def paginate_migration_target(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    if await state.get_state() != SquadMigrationStates.selecting_target:
        await callback.answer()
        return

    try:
        page = int(callback.data.split("_page_")[-1])
    except (ValueError, IndexError):
        await callback.answer()
        return

    data = await state.get_data()
    source_uuid = data.get("source_uuid")
    if not source_uuid:
        await callback.answer()
        return

    texts = get_texts(db_user.language)

    squads, page, total_pages = await _fetch_migration_page(db, page=page)
    keyboard, has_items = _build_migration_keyboard(
        texts,
        squads,
        page,
        total_pages,
        "target",
        exclude_uuid=source_uuid,
    )

    source_display = data.get("source_display") or source_uuid

    message = (
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECTED_SOURCE",
            "–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
        ).format(source=source_display)
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECT_TARGET",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å:",
        )
    )

    if not has_items:
        message += (
            "\n\n"
            + texts.t(
                "ADMIN_SQUAD_MIGRATION_TARGET_EMPTY",
                "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–∫–≤–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞. –û—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–∫–≤–∞–¥—ã.",
            )
        )

    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_migration_target_selection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    current_state = await state.get_state()
    if current_state != SquadMigrationStates.selecting_target:
        await callback.answer()
        return

    if "_page_" in callback.data:
        await callback.answer()
        return

    data = await state.get_data()
    source_uuid = data.get("source_uuid")

    if not source_uuid:
        await callback.answer()
        return

    target_uuid = callback.data.replace("admin_migration_target_", "", 1)

    texts = get_texts(db_user.language)

    if target_uuid == source_uuid:
        await callback.answer(
            texts.t(
                "ADMIN_SQUAD_MIGRATION_SAME_SQUAD",
                "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Å–∫–≤–∞–¥.",
            ),
            show_alert=True,
        )
        return

    target_server = await get_server_squad_by_uuid(db, target_uuid)
    if not target_server:
        await callback.answer(
            texts.t(
                "ADMIN_SQUAD_MIGRATION_SQUAD_NOT_FOUND",
                "–°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            ),
            show_alert=True,
        )
        return

    source_display = data.get("source_display") or source_uuid

    users_to_move = await count_active_users_for_squad(db, source_uuid)

    await state.update_data(
        target_uuid=target_server.squad_uuid,
        target_display=_format_migration_server_label(texts, target_server),
        migration_count=users_to_move,
    )

    await state.set_state(SquadMigrationStates.confirming)

    message_lines = [
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>"),
        "",
        texts.t(
            "ADMIN_SQUAD_MIGRATION_CONFIRM_DETAILS",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–µ–∑–¥–∞:",
        ),
        texts.t(
            "ADMIN_SQUAD_MIGRATION_CONFIRM_SOURCE",
            "‚Ä¢ –ò–∑: {source}",
        ).format(source=source_display),
        texts.t(
            "ADMIN_SQUAD_MIGRATION_CONFIRM_TARGET",
            "‚Ä¢ –í: {target}",
        ).format(target=_format_migration_server_label(texts, target_server)),
        texts.t(
            "ADMIN_SQUAD_MIGRATION_CONFIRM_COUNT",
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –ø–µ—Ä–µ–Ω–æ—Å—É: {count}",
        ).format(count=users_to_move),
        "",
        texts.t(
            "ADMIN_SQUAD_MIGRATION_CONFIRM_PROMPT",
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        ),
    ]

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_SQUAD_MIGRATION_CONFIRM_BUTTON",
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    ),
                    callback_data="admin_migration_confirm",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_SQUAD_MIGRATION_CHANGE_TARGET",
                        "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                    ),
                    callback_data="admin_migration_change_target",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.CANCEL,
                    callback_data="admin_migration_cancel",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        "\n".join(message_lines),
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def change_migration_target(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    source_uuid = data.get("source_uuid")

    if not source_uuid:
        await callback.answer()
        return

    await state.set_state(SquadMigrationStates.selecting_target)

    texts = get_texts(db_user.language)
    squads, page, total_pages = await _fetch_migration_page(db, page=1)
    keyboard, has_items = _build_migration_keyboard(
        texts,
        squads,
        page,
        total_pages,
        "target",
        exclude_uuid=source_uuid,
    )

    source_display = data.get("source_display") or source_uuid

    message = (
        texts.t("ADMIN_SQUAD_MIGRATION_TITLE", "üöö <b>–ü–µ—Ä–µ–µ–∑–¥ —Å–∫–≤–∞–¥–æ–≤</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECTED_SOURCE",
            "–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
        ).format(source=source_display)
        + "\n\n"
        + texts.t(
            "ADMIN_SQUAD_MIGRATION_SELECT_TARGET",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å:",
        )
    )

    if not has_items:
        message += (
            "\n\n"
            + texts.t(
                "ADMIN_SQUAD_MIGRATION_TARGET_EMPTY",
                "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–∫–≤–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞. –û—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–∫–≤–∞–¥—ã.",
            )
        )

    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    await callback.answer()


@admin_required
@error_handler
async def confirm_squad_migration(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    current_state = await state.get_state()
    if current_state != SquadMigrationStates.confirming:
        await callback.answer()
        return

    data = await state.get_data()
    source_uuid = data.get("source_uuid")
    target_uuid = data.get("target_uuid")

    if not source_uuid or not target_uuid:
        await callback.answer()
        return

    texts = get_texts(db_user.language)
    remnawave_service = RemnaWaveService()

    await callback.answer(texts.t("ADMIN_SQUAD_MIGRATION_IN_PROGRESS", "–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–µ–∑–¥..."))

    try:
        result = await remnawave_service.migrate_squad_users(
            db,
            source_uuid=source_uuid,
            target_uuid=target_uuid,
        )
    except RemnaWaveConfigurationError as error:
        message = texts.t(
            "ADMIN_SQUAD_MIGRATION_API_ERROR",
            "‚ùå RemnaWave API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {error}",
        ).format(error=str(error))
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t(
                            "ADMIN_SQUAD_MIGRATION_BACK_BUTTON",
                            "‚¨ÖÔ∏è –í Remnawave",
                        ),
                        callback_data="admin_remnawave",
                    )
                ]
            ]
        )
        await callback.message.edit_text(message, reply_markup=reply_markup)
        await state.clear()
        return

    source_display = data.get("source_display") or source_uuid
    target_display = data.get("target_display") or target_uuid

    if not result.get("success"):
        error_message = result.get("message") or ""
        error_code = result.get("error") or "unexpected"
        message = texts.t(
            "ADMIN_SQUAD_MIGRATION_ERROR",
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–µ–∑–¥ (–∫–æ–¥: {code}). {details}",
        ).format(code=error_code, details=error_message)
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t(
                            "ADMIN_SQUAD_MIGRATION_BACK_BUTTON",
                            "‚¨ÖÔ∏è –í Remnawave",
                        ),
                        callback_data="admin_remnawave",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text=texts.t(
                            "ADMIN_SQUAD_MIGRATION_NEW_BUTTON",
                            "üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–µ–∑–¥",
                        ),
                        callback_data="admin_rw_migration",
                    )
                ],
            ]
        )
        await callback.message.edit_text(message, reply_markup=reply_markup)
        await state.clear()
        return

    message_lines = [
        texts.t("ADMIN_SQUAD_MIGRATION_SUCCESS_TITLE", "‚úÖ –ü–µ—Ä–µ–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω"),
        "",
        texts.t("ADMIN_SQUAD_MIGRATION_CONFIRM_SOURCE", "‚Ä¢ –ò–∑: {source}").format(
            source=source_display
        ),
        texts.t("ADMIN_SQUAD_MIGRATION_CONFIRM_TARGET", "‚Ä¢ –í: {target}").format(
            target=target_display
        ),
        "",
        texts.t(
            "ADMIN_SQUAD_MIGRATION_RESULT_TOTAL",
            "–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {count}",
        ).format(count=result.get("total", 0)),
        texts.t(
            "ADMIN_SQUAD_MIGRATION_RESULT_UPDATED",
            "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {count}",
        ).format(count=result.get("updated", 0)),
    ]

    panel_updated = result.get("panel_updated", 0)
    panel_failed = result.get("panel_failed", 0)

    if panel_updated:
        message_lines.append(
            texts.t(
                "ADMIN_SQUAD_MIGRATION_RESULT_PANEL_UPDATED",
                "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏: {count}",
            ).format(count=panel_updated)
        )
    if panel_failed:
        message_lines.append(
            texts.t(
                "ADMIN_SQUAD_MIGRATION_RESULT_PANEL_FAILED",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤ –ø–∞–Ω–µ–ª–∏: {count}",
            ).format(count=panel_failed)
        )

    reply_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_SQUAD_MIGRATION_NEW_BUTTON",
                        "üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–µ–∑–¥",
                    ),
                    callback_data="admin_rw_migration",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_SQUAD_MIGRATION_BACK_BUTTON",
                        "‚¨ÖÔ∏è –í Remnawave",
                    ),
                    callback_data="admin_remnawave",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        "\n".join(message_lines),
        reply_markup=reply_markup,
        disable_web_page_preview=True,
    )
    await state.clear()


@admin_required
@error_handler
async def cancel_squad_migration(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    await state.clear()

    message = texts.t(
        "ADMIN_SQUAD_MIGRATION_CANCELLED",
        "‚ùå –ü–µ—Ä–µ–µ–∑–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
    )

    reply_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t(
                        "ADMIN_SQUAD_MIGRATION_BACK_BUTTON",
                        "‚¨ÖÔ∏è –í Remnawave",
                    ),
                    callback_data="admin_remnawave",
                )
            ]
        ]
    )

    await callback.message.edit_text(message, reply_markup=reply_markup)
    await callback.answer()


@admin_required
@error_handler
async def handle_migration_page_info(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    await callback.answer(
        texts.t("ADMIN_SQUAD_MIGRATION_PAGE_HINT", "–≠—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."),
        show_alert=False,
    )

@admin_required
@error_handler
async def show_remnawave_menu(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   remnawave_service = RemnaWaveService()
   connection_test = await remnawave_service.test_api_connection()

   status = connection_test.get("status")
   if status == "connected":
       status_emoji = "‚úÖ"
   elif status == "not_configured":
       status_emoji = "‚ÑπÔ∏è"
   else:
       status_emoji = "‚ùå"

   api_url_display = settings.REMNAWAVE_API_URL or "‚Äî"

   text = f"""
üñ•Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Remnawave</b>

üì° <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:</b> {status_emoji} {connection_test.get("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}
üåê <b>URL:</b> <code>{api_url_display}</code>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
   
   await callback.message.edit_text(
       text,
       reply_markup=get_admin_remnawave_keyboard(db_user.language)
   )
   await callback.answer()


@admin_required
@error_handler
async def show_system_stats(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   from datetime import datetime, timedelta
   
   remnawave_service = RemnaWaveService()
   stats = await remnawave_service.get_system_statistics()
   
   if "error" in stats:
       await callback.message.edit_text(
           f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}",
           reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
               [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
           ])
       )
       await callback.answer()
       return
   
   system = stats.get("system", {})
   users_by_status = stats.get("users_by_status", {})
   server_info = stats.get("server_info", {})
   bandwidth = stats.get("bandwidth", {})
   traffic_periods = stats.get("traffic_periods", {})
   nodes_realtime = stats.get("nodes_realtime", [])
   nodes_weekly = stats.get("nodes_weekly", [])
   
   memory_total = server_info.get('memory_total', 1)
   memory_used_percent = (server_info.get('memory_used', 0) / memory_total * 100) if memory_total > 0 else 0
   
   uptime_seconds = server_info.get('uptime_seconds', 0)
   uptime_days = int(uptime_seconds // 86400)
   uptime_hours = int((uptime_seconds % 86400) // 3600)
   uptime_str = f"{uptime_days}–¥ {uptime_hours}—á"
   
   users_status_text = ""
   for status, count in users_by_status.items():
       status_emoji = {
           'ACTIVE': '‚úÖ',
           'DISABLED': '‚ùå', 
           'LIMITED': '‚ö†Ô∏è',
           'EXPIRED': '‚è∞'
       }.get(status, '‚ùì')
       users_status_text += f"  {status_emoji} {status}: {count}\n"
   
   top_nodes_text = ""
   for i, node in enumerate(nodes_weekly[:3], 1):
       top_nodes_text += f"  {i}. {node['name']}: {format_bytes(node['total_bytes'])}\n"
   
   realtime_nodes_text = ""
   for node in nodes_realtime[:3]:
       node_total = node.get('downloadBytes', 0) + node.get('uploadBytes', 0)
       if node_total > 0:
           realtime_nodes_text += f"  üì° {node.get('nodeName', 'Unknown')}: {format_bytes(node_total)}\n"
   
   def format_traffic_change(difference_str):
       if not difference_str or difference_str == '0':
           return ""
       elif difference_str.startswith('-'):
           return f" (üîª {difference_str[1:]})"
       else:
           return f" (üî∫ {difference_str})"
   
   text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Remnawave</b>

üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä:</b>
- CPU: {server_info.get('cpu_cores', 0)} —è–¥–µ—Ä ({server_info.get('cpu_physical_cores', 0)} —Ñ–∏–∑.)
- RAM: {format_bytes(server_info.get('memory_used', 0))} / {format_bytes(memory_total)} ({memory_used_percent:.1f}%)
- –°–≤–æ–±–æ–¥–Ω–æ: {format_bytes(server_info.get('memory_available', 0))}
- Uptime: {uptime_str}

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({system.get('total_users', 0)} –≤—Å–µ–≥–æ):</b>
- üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {system.get('users_online', 0)}
- üìÖ –ó–∞ —Å—É—Ç–∫–∏: {system.get('users_last_day', 0)}
- üìä –ó–∞ –Ω–µ–¥–µ–ª—é: {system.get('users_last_week', 0)}
- üí§ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏: {system.get('users_never_online', 0)}

<b>–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
{users_status_text}

üåê <b>–ù–æ–¥—ã ({system.get('nodes_online', 0)} –æ–Ω–ª–∞–π–Ω):</b>"""

   if realtime_nodes_text:
       text += f"""
<b>–†–µ–∞–ª—Ç–∞–π–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
{realtime_nodes_text}"""
   
   if top_nodes_text:
       text += f"""
<b>–¢–æ–ø –Ω–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
{top_nodes_text}"""
   
   text += f"""

üìà <b>–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {format_bytes(system.get('total_user_traffic', 0))}

üìä <b>–¢—Ä–∞—Ñ–∏–∫ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
- 2 –¥–Ω—è: {format_bytes(traffic_periods.get('last_2_days', {}).get('current', 0))}{format_traffic_change(traffic_periods.get('last_2_days', {}).get('difference', ''))}
- 7 –¥–Ω–µ–π: {format_bytes(traffic_periods.get('last_7_days', {}).get('current', 0))}{format_traffic_change(traffic_periods.get('last_7_days', {}).get('difference', ''))}
- 30 –¥–Ω–µ–π: {format_bytes(traffic_periods.get('last_30_days', {}).get('current', 0))}{format_traffic_change(traffic_periods.get('last_30_days', {}).get('difference', ''))}
- –ú–µ—Å—è—Ü: {format_bytes(traffic_periods.get('current_month', {}).get('current', 0))}{format_traffic_change(traffic_periods.get('current_month', {}).get('difference', ''))}
- –ì–æ–¥: {format_bytes(traffic_periods.get('current_year', {}).get('current', 0))}{format_traffic_change(traffic_periods.get('current_year', {}).get('difference', ''))}
"""

   if bandwidth.get('realtime_total', 0) > 0:
       text += f"""
‚ö° <b>–†–µ–∞–ª—Ç–∞–π–º —Ç—Ä–∞—Ñ–∏–∫:</b>
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {format_bytes(bandwidth.get('realtime_download', 0))}
- –ó–∞–≥—Ä—É–∑–∫–∞: {format_bytes(bandwidth.get('realtime_upload', 0))}
- –ò—Ç–æ–≥–æ: {format_bytes(bandwidth.get('realtime_total', 0))}
"""
   
   text += f"""
üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {format_datetime(stats.get('last_updated', datetime.now()))}
"""
   
   keyboard = [
       [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rw_system")],
       [types.InlineKeyboardButton(text="üìà –ù–æ–¥—ã", callback_data="admin_rw_nodes"),
        types.InlineKeyboardButton(text="üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_rw_sync")],
       [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
   ]
   
   await callback.message.edit_text(
       text,
       reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
   )
   await callback.answer()

@admin_required
@error_handler
async def show_traffic_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    from datetime import datetime, timedelta
    
    remnawave_service = RemnaWaveService()
    
    try:
        async with remnawave_service.get_api_client() as api:
            bandwidth_stats = await api.get_bandwidth_stats()
            
            realtime_usage = await api.get_nodes_realtime_usage()
            
            nodes_stats = await api.get_nodes_statistics()
            
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
            ])
        )
        await callback.answer()
        return
    
    def parse_bandwidth(bandwidth_str):
        return remnawave_service._parse_bandwidth_string(bandwidth_str)
    
    total_realtime_download = sum(node.get('downloadBytes', 0) for node in realtime_usage)
    total_realtime_upload = sum(node.get('uploadBytes', 0) for node in realtime_usage)
    total_realtime = total_realtime_download + total_realtime_upload
    
    total_download_speed = sum(node.get('downloadSpeedBps', 0) for node in realtime_usage)
    total_upload_speed = sum(node.get('uploadSpeedBps', 0) for node in realtime_usage)
    
    periods = {
        'last_2_days': bandwidth_stats.get('bandwidthLastTwoDays', {}),
        'last_7_days': bandwidth_stats.get('bandwidthLastSevenDays', {}),
        'last_30_days': bandwidth_stats.get('bandwidthLast30Days', {}),
        'current_month': bandwidth_stats.get('bandwidthCalendarMonth', {}),
        'current_year': bandwidth_stats.get('bandwidthCurrentYear', {})
    }
    
    def format_change(diff_str):
        if not diff_str or diff_str == '0':
            return ""
        elif diff_str.startswith('-'):
            return f" üîª {diff_str[1:]}"
        else:
            return f" üî∫ {diff_str}"
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ Remnawave</b>

‚ö° <b>–†–µ–∞–ª—Ç–∞–π–º –¥–∞–Ω–Ω—ã–µ:</b>
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {format_bytes(total_realtime_download)}
- –ó–∞–≥—Ä—É–∑–∫–∞: {format_bytes(total_realtime_upload)}
- –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_realtime)}

üöÄ <b>–¢–µ–∫—É—â–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏:</b>
- –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {format_bytes(total_download_speed)}/—Å
- –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {format_bytes(total_upload_speed)}/—Å
- –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {format_bytes(total_download_speed + total_upload_speed)}/—Å

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>

<b>–ó–∞ 2 –¥–Ω—è:</b>
- –¢–µ–∫—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_2_days'].get('current', '0')))}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_2_days'].get('previous', '0')))}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ:{format_change(periods['last_2_days'].get('difference', ''))}

<b>–ó–∞ 7 –¥–Ω–µ–π:</b>
- –¢–µ–∫—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_7_days'].get('current', '0')))}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_7_days'].get('previous', '0')))}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ:{format_change(periods['last_7_days'].get('difference', ''))}

<b>–ó–∞ 30 –¥–Ω–µ–π:</b>
- –¢–µ–∫—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_30_days'].get('current', '0')))}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {format_bytes(parse_bandwidth(periods['last_30_days'].get('previous', '0')))}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ:{format_change(periods['last_30_days'].get('difference', ''))}

<b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
- –¢–µ–∫—É—â–∏–π: {format_bytes(parse_bandwidth(periods['current_month'].get('current', '0')))}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {format_bytes(parse_bandwidth(periods['current_month'].get('previous', '0')))}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ:{format_change(periods['current_month'].get('difference', ''))}

<b>–¢–µ–∫—É—â–∏–π –≥–æ–¥:</b>
- –¢–µ–∫—É—â–∏–π: {format_bytes(parse_bandwidth(periods['current_year'].get('current', '0')))}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {format_bytes(parse_bandwidth(periods['current_year'].get('previous', '0')))}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ:{format_change(periods['current_year'].get('difference', ''))}
"""
    
    if realtime_usage:
        text += "\nüåê <b>–¢—Ä–∞—Ñ–∏–∫ –ø–æ –Ω–æ–¥–∞–º (—Ä–µ–∞–ª—Ç–∞–π–º):</b>\n"
        for node in sorted(realtime_usage, key=lambda x: x.get('totalBytes', 0), reverse=True):
            node_total = node.get('totalBytes', 0)
            if node_total > 0:
                text += f"- {node.get('nodeName', 'Unknown')}: {format_bytes(node_total)}\n"
    
    if nodes_stats.get('lastSevenDays'):
        text += "\nüìä <b>–¢–æ–ø –Ω–æ–¥ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
        
        nodes_weekly = {}
        for day_data in nodes_stats['lastSevenDays']:
            node_name = day_data['nodeName']
            if node_name not in nodes_weekly:
                nodes_weekly[node_name] = 0
            nodes_weekly[node_name] += int(day_data['totalBytes'])
        
        sorted_nodes = sorted(nodes_weekly.items(), key=lambda x: x[1], reverse=True)
        for i, (node_name, total_bytes) in enumerate(sorted_nodes[:5], 1):
            text += f"{i}. {node_name}: {format_bytes(total_bytes)}\n"
    
    text += f"\nüïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {format_datetime(datetime.now())}"
    
    keyboard = [
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rw_traffic")],
        [types.InlineKeyboardButton(text="üìà –ù–æ–¥—ã", callback_data="admin_rw_nodes"),
         types.InlineKeyboardButton(text="üìä –°–∏—Å—Ç–µ–º–∞", callback_data="admin_rw_system")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_nodes_management(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   remnawave_service = RemnaWaveService()
   nodes = await remnawave_service.get_all_nodes()
   
   if not nodes:
       await callback.message.edit_text(
           "üñ•Ô∏è –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
           reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
               [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
           ])
       )
       await callback.answer()
       return
   
   text = "üñ•Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏</b>\n\n"
   keyboard = []
   
   for node in nodes:
       status_emoji = "üü¢" if node["is_node_online"] else "üî¥"
       connection_emoji = "üì°" if node["is_connected"] else "üìµ"
       
       text += f"{status_emoji} {connection_emoji} <b>{node['name']}</b>\n"
       text += f"üåç {node['country_code']} ‚Ä¢ {node['address']}\n"
       text += f"üë• –û–Ω–ª–∞–π–Ω: {node['users_online'] or 0}\n\n"
       
       keyboard.append([
           types.InlineKeyboardButton(
               text=f"‚öôÔ∏è {node['name']}",
               callback_data=f"admin_node_manage_{node['uuid']}"
           )
       ])
   
   keyboard.extend([
       [types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ", callback_data="admin_restart_all_nodes")],
       [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
   ])
   
   await callback.message.edit_text(
       text,
       reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
   )
   await callback.answer()


@admin_required
@error_handler
async def show_node_details(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   node_uuid = callback.data.split('_')[-1]
   
   remnawave_service = RemnaWaveService()
   node = await remnawave_service.get_node_details(node_uuid)
   
   if not node:
       await callback.answer("‚ùå –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
       return
   
   status_emoji = "üü¢" if node["is_node_online"] else "üî¥"
   xray_emoji = "‚úÖ" if node["is_xray_running"] else "‚ùå"
   
   text = f"""
üñ•Ô∏è <b>–ù–æ–¥–∞: {node['name']}</b>

<b>–°—Ç–∞—Ç—É—Å:</b>
- –û–Ω–ª–∞–π–Ω: {status_emoji} {'–î–∞' if node['is_node_online'] else '–ù–µ—Ç'}
- Xray: {xray_emoji} {'–ó–∞–ø—É—â–µ–Ω' if node['is_xray_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∞: {'üì° –î–∞' if node['is_connected'] else 'üìµ –ù–µ—Ç'}
- –û—Ç–∫–ª—é—á–µ–Ω–∞: {'‚ùå –î–∞' if node['is_disabled'] else '‚úÖ –ù–µ—Ç'}

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
- –ê–¥—Ä–µ—Å: {node['address']}
- –°—Ç—Ä–∞–Ω–∞: {node['country_code']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {node['users_online']}

<b>–¢—Ä–∞—Ñ–∏–∫:</b>
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(node['traffic_used_bytes'])}
- –õ–∏–º–∏—Ç: {format_bytes(node['traffic_limit_bytes']) if node['traffic_limit_bytes'] else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}
"""
   
   await callback.message.edit_text(
       text,
       reply_markup=get_node_management_keyboard(node_uuid, db_user.language)
   )
   await callback.answer()


@admin_required
@error_handler
async def manage_node(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   action, node_uuid = callback.data.split('_')[1], callback.data.split('_')[-1]
   
   remnawave_service = RemnaWaveService()
   success = await remnawave_service.manage_node(node_uuid, action)
   
   if success:
       action_text = {"enable": "–≤–∫–ª—é—á–µ–Ω–∞", "disable": "–æ—Ç–∫–ª—é—á–µ–Ω–∞", "restart": "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"}
       await callback.answer(f"‚úÖ –ù–æ–¥–∞ {action_text.get(action, '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')}")
   else:
       await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
   
   await show_node_details(
       types.CallbackQuery(
           id=callback.id,
           from_user=callback.from_user,
           chat_instance=callback.chat_instance,
           data=f"admin_node_manage_{node_uuid}",
           message=callback.message
       ),
       db_user,
       db
   )

@admin_required
@error_handler
async def show_node_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    node_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    
    node = await remnawave_service.get_node_details(node_uuid)
    
    if not node:
        await callback.answer("‚ùå –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    try:
        from datetime import datetime, timedelta
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        node_usage = await remnawave_service.get_node_user_usage_by_range(
            node_uuid, start_date, end_date
        )
        
        realtime_stats = await remnawave_service.get_nodes_realtime_usage()
        
        node_realtime = None
        for stats in realtime_stats:
            if stats.get('nodeUuid') == node_uuid:
                node_realtime = stats
                break
        
        status_emoji = "üü¢" if node["is_node_online"] else "üî¥"
        xray_emoji = "‚úÖ" if node["is_xray_running"] else "‚ùå"
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥—ã: {node['name']}</b>

<b>–°—Ç–∞—Ç—É—Å:</b>
- –û–Ω–ª–∞–π–Ω: {status_emoji} {'–î–∞' if node['is_node_online'] else '–ù–µ—Ç'}
- Xray: {xray_emoji} {'–ó–∞–ø—É—â–µ–Ω' if node['is_xray_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {node['users_online'] or 0}

<b>–¢—Ä–∞—Ñ–∏–∫:</b>
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(node['traffic_used_bytes'] or 0)}
- –õ–∏–º–∏—Ç: {format_bytes(node['traffic_limit_bytes']) if node['traffic_limit_bytes'] else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}
"""

        if node_realtime:
            text += f"""
<b>–†–µ–∞–ª—Ç–∞–π–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –°–∫–∞—á–∞–Ω–æ: {format_bytes(node_realtime.get('downloadBytes', 0))}
- –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {format_bytes(node_realtime.get('uploadBytes', 0))}
- –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(node_realtime.get('totalBytes', 0))}
- –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {format_bytes(node_realtime.get('downloadSpeedBps', 0))}/—Å
- –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {format_bytes(node_realtime.get('uploadSpeedBps', 0))}/—Å
"""

        if node_usage:
            text += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            total_usage = 0
            for usage in node_usage[-5:]: 
                daily_usage = usage.get('total', 0)
                total_usage += daily_usage
                text += f"- {usage.get('date', 'N/A')}: {format_bytes(daily_usage)}\n"
            
            text += f"\n<b>–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π:</b> {format_bytes(total_usage)}"
        else:
            text += "\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b> –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"node_stats_{node_uuid}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_node_manage_{node_uuid}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–¥—ã {node_uuid}: {e}")
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥—ã: {node['name']}</b>

<b>–°—Ç–∞—Ç—É—Å:</b>
- –û–Ω–ª–∞–π–Ω: {status_emoji} {'–î–∞' if node['is_node_online'] else '–ù–µ—Ç'}  
- Xray: {xray_emoji} {'–ó–∞–ø—É—â–µ–Ω' if node['is_xray_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {node['users_online'] or 0}

<b>–¢—Ä–∞—Ñ–∏–∫:</b>
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(node['traffic_used_bytes'] or 0)}
- –õ–∏–º–∏—Ç: {format_bytes(node['traffic_limit_bytes']) if node['traffic_limit_bytes'] else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}

‚ö†Ô∏è <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>
–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API
‚Ä¢ –ù–æ–¥–∞ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {format_datetime('now')}
"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"node_stats_{node_uuid}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_node_manage_{node_uuid}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

@admin_required
@error_handler
async def show_squad_details(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    squad = await remnawave_service.get_squad_details(squad_uuid)
    
    if not squad:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"""
üåê <b>–°–∫–≤–∞–¥: {squad['name']}</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
- UUID: <code>{squad['uuid']}</code>
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {squad['members_count']}
- –ò–Ω–±–∞—É–Ω–¥–æ–≤: {squad['inbounds_count']}

<b>–ò–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    if squad.get('inbounds'):
        for inbound in squad['inbounds']:
            text += f"- {inbound['tag']} ({inbound['type']})\n"
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_squad_management_keyboard(squad_uuid, db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def manage_squad_action(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    parts = callback.data.split('_')
    action = parts[1] 
    squad_uuid = parts[-1]
    
    remnawave_service = RemnaWaveService()
    
    if action == "add_users":
        success = await remnawave_service.add_all_users_to_squad(squad_uuid)
        if success:
            await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥—å")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            
    elif action == "remove_users":
        success = await remnawave_service.remove_all_users_from_squad(squad_uuid)
        if success:
            await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥—å")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            
    elif action == "delete":
        success = await remnawave_service.delete_squad(squad_uuid)
        if success:
            await callback.message.edit_text(
                "‚úÖ –°–∫–≤–∞–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∫–≤–∞–¥–∞–º", callback_data="admin_rw_squads")]
                ])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–≤–∞–¥–∞", show_alert=True)
        return
    
    await show_squad_details(
        types.CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            chat_instance=callback.chat_instance,
            data=f"admin_squad_manage_{squad_uuid}",
            message=callback.message
        ),
        db_user,
        db
    )

@admin_required
@error_handler
async def show_squad_edit_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    squad = await remnawave_service.get_squad_details(squad_uuid)
    
    if not squad:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞: {squad['name']}</b>

<b>–¢–µ–∫—É—â–∏–µ –∏–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    if squad.get('inbounds'):
        for inbound in squad['inbounds']:
            text += f"‚úÖ {inbound['tag']} ({inbound['type']})\n"
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤\n"
    
    text += "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_squad_edit_keyboard(squad_uuid, db_user.language)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_squad_inbounds_selection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    
    squad = await remnawave_service.get_squad_details(squad_uuid)
    all_inbounds = await remnawave_service.get_all_inbounds()
    
    if not squad:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not all_inbounds:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤", show_alert=True)
        return
    
    if squad_uuid not in squad_inbound_selections:
        squad_inbound_selections[squad_uuid] = set(
            inbound['uuid'] for inbound in squad.get('inbounds', [])
        )
    
    text = f"""
üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–±–∞—É–Ω–¥–æ–≤</b>

<b>–°–∫–≤–∞–¥:</b> {squad['name']}
<b>–¢–µ–∫—É—â–∏—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> {len(squad_inbound_selections[squad_uuid])}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    keyboard = []
    
    for i, inbound in enumerate(all_inbounds[:15]): 
        is_selected = inbound['uuid'] in squad_inbound_selections[squad_uuid]
        emoji = "‚úÖ" if is_selected else "‚òê"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{emoji} {inbound['tag']} ({inbound['type']})",
                callback_data=f"sqd_tgl_{i}_{squad_uuid[:8]}"
            )
        ])
    
    if len(all_inbounds) > 15:
        text += f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(all_inbounds)} –∏–Ω–±–∞—É–Ω–¥–æ–≤"
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"sqd_save_{squad_uuid[:8]}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sqd_edit_{squad_uuid[:8]}")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_squad_rename_form(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    squad = await remnawave_service.get_squad_details(squad_uuid)
    
    if not squad:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(squad_uuid=squad_uuid, squad_name=squad['name'])
    await state.set_state(SquadRenameStates.waiting_for_new_name)
    
    text = f"""
‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞</b>

<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {squad['name']}

üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞:</b>

<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é:</i>
‚Ä¢ –û—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞.
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_rename_{squad_uuid}")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def cancel_squad_rename(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    squad_uuid = callback.data.split('_')[-1]
    
    await state.clear()
    
    new_callback = types.CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        data=f"squad_edit_{squad_uuid}",
        message=callback.message
    )
    
    await show_squad_edit_menu(new_callback, db_user, db)

@admin_required
@error_handler
async def process_squad_new_name(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    data = await state.get_data()
    squad_uuid = data.get('squad_uuid')
    old_name = data.get('squad_name')
    
    if not squad_uuid:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    new_name = message.text.strip()
    
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(new_name) < 2 or len(new_name) > 20:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    import re
    if not re.match(r'^[A-Za-z0-9_-]+$', new_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if new_name == old_name:
        await message.answer("‚ùå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    remnawave_service = RemnaWaveService()
    success = await remnawave_service.rename_squad(squad_uuid, new_name)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–°–∫–≤–∞–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!</b>\n\n"
            f"<b>–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {old_name}\n"
            f"<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {new_name}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ —Å–∫–≤–∞–¥–∞", callback_data=f"admin_squad_manage_{squad_uuid}")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∫–≤–∞–¥–∞–º", callback_data="admin_rw_squads")]
            ])
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–∫–≤–∞–¥–∞</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°–∫–≤–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_rename_{squad_uuid}")]
            ])
        )


@admin_required
@error_handler
async def toggle_squad_inbound(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    parts = callback.data.split('_')
    inbound_index = int(parts[2])
    short_squad_uuid = parts[3]
    
    remnawave_service = RemnaWaveService()
    squads = await remnawave_service.get_all_squads()
    
    full_squad_uuid = None
    for squad in squads:
        if squad['uuid'].startswith(short_squad_uuid):
            full_squad_uuid = squad['uuid']
            break
    
    if not full_squad_uuid:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    all_inbounds = await remnawave_service.get_all_inbounds()
    if inbound_index >= len(all_inbounds):
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    selected_inbound = all_inbounds[inbound_index]
    
    if full_squad_uuid not in squad_inbound_selections:
        squad_inbound_selections[full_squad_uuid] = set()
    
    if selected_inbound['uuid'] in squad_inbound_selections[full_squad_uuid]:
        squad_inbound_selections[full_squad_uuid].remove(selected_inbound['uuid'])
        await callback.answer(f"‚ûñ –£–±—Ä–∞–Ω: {selected_inbound['tag']}")
    else:
        squad_inbound_selections[full_squad_uuid].add(selected_inbound['uuid'])
        await callback.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {selected_inbound['tag']}")
    
    text = f"""
üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–±–∞—É–Ω–¥–æ–≤</b>

<b>–°–∫–≤–∞–¥:</b> {squads[0]['name'] if squads else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
<b>–í—ã–±—Ä–∞–Ω–æ –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> {len(squad_inbound_selections[full_squad_uuid])}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    keyboard = []
    for i, inbound in enumerate(all_inbounds[:15]):
        is_selected = inbound['uuid'] in squad_inbound_selections[full_squad_uuid]
        emoji = "‚úÖ" if is_selected else "‚òê"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{emoji} {inbound['tag']} ({inbound['type']})",
                callback_data=f"sqd_tgl_{i}_{short_squad_uuid}"
            )
        ])
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"sqd_save_{short_squad_uuid}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sqd_edit_{short_squad_uuid}")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@admin_required  
@error_handler
async def save_squad_inbounds(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    short_squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    squads = await remnawave_service.get_all_squads()
    
    full_squad_uuid = None
    squad_name = None
    for squad in squads:
        if squad['uuid'].startswith(short_squad_uuid):
            full_squad_uuid = squad['uuid']
            squad_name = squad['name']
            break
    
    if not full_squad_uuid:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    selected_inbounds = squad_inbound_selections.get(full_squad_uuid, set())
    
    try:
        success = await remnawave_service.update_squad_inbounds(full_squad_uuid, list(selected_inbounds))
        
        if success:
            if full_squad_uuid in squad_inbound_selections:
                del squad_inbound_selections[full_squad_uuid]
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ò–Ω–±–∞—É–Ω–¥—ã —Å–∫–≤–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
                f"<b>–°–∫–≤–∞–¥:</b> {squad_name}\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> {len(selected_inbounds)}",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∫–≤–∞–¥–∞–º", callback_data="admin_rw_squads")],
                    [types.InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ —Å–∫–≤–∞–¥–∞", callback_data=f"admin_squad_manage_{full_squad_uuid}")]
                ])
            )
            await callback.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error saving squad inbounds: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)

@admin_required
@error_handler
async def show_squad_edit_menu_short(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    short_squad_uuid = callback.data.split('_')[-1]
    
    remnawave_service = RemnaWaveService()
    squads = await remnawave_service.get_all_squads()
    
    full_squad_uuid = None
    for squad in squads:
        if squad['uuid'].startswith(short_squad_uuid):
            full_squad_uuid = squad['uuid']
            break
    
    if not full_squad_uuid:
        await callback.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_callback = types.CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        data=f"squad_edit_{full_squad_uuid}",
        message=callback.message
    )
    
    await show_squad_edit_menu(new_callback, db_user, db)

@admin_required
@error_handler
async def start_squad_creation(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    await state.set_state(SquadCreateStates.waiting_for_name)
    
    text = """
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞</b>

<b>–®–∞–≥ 1 –∏–∑ 2: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞</b>

üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:</b>

<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é:</i>
‚Ä¢ –û—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞.
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_squad_create")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def process_squad_name(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    squad_name = message.text.strip()
    
    if not squad_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(squad_name) < 2 or len(squad_name) > 20:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    import re
    if not re.match(r'^[A-Za-z0-9_-]+$', squad_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(squad_name=squad_name)
    await state.set_state(SquadCreateStates.selecting_inbounds)
    
    user_id = message.from_user.id
    squad_create_data[user_id] = {'name': squad_name, 'selected_inbounds': set()}
    
    remnawave_service = RemnaWaveService()
    all_inbounds = await remnawave_service.get_all_inbounds()
    
    if not all_inbounds:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–≤–∞–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–±–∞—É–Ω–¥.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∫–≤–∞–¥–∞–º", callback_data="admin_rw_squads")]
            ])
        )
        await state.clear()
        return
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞: {squad_name}</b>

<b>–®–∞–≥ 2 –∏–∑ 2: –í—ã–±–æ—Ä –∏–Ω–±–∞—É–Ω–¥–æ–≤</b>

<b>–í—ã–±—Ä–∞–Ω–æ –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> 0

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    keyboard = []
    
    for i, inbound in enumerate(all_inbounds[:15]): 
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"‚òê {inbound['tag']} ({inbound['type']})",
                callback_data=f"create_tgl_{i}"
            )
        ])
    
    if len(all_inbounds) > 15:
        text += f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(all_inbounds)} –∏–Ω–±–∞—É–Ω–¥–æ–≤"
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–∫–≤–∞–¥", callback_data="create_squad_finish")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_squad_create")]
    ])
    
    await message.answer(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@admin_required
@error_handler
async def toggle_create_inbound(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    inbound_index = int(callback.data.split('_')[-1])
    user_id = callback.from_user.id
    
    if user_id not in squad_create_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return
    
    remnawave_service = RemnaWaveService()
    all_inbounds = await remnawave_service.get_all_inbounds()
    
    if inbound_index >= len(all_inbounds):
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    selected_inbound = all_inbounds[inbound_index]
    selected_inbounds = squad_create_data[user_id]['selected_inbounds']
    
    if selected_inbound['uuid'] in selected_inbounds:
        selected_inbounds.remove(selected_inbound['uuid'])
        await callback.answer(f"‚ûñ –£–±—Ä–∞–Ω: {selected_inbound['tag']}")
    else:
        selected_inbounds.add(selected_inbound['uuid'])
        await callback.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {selected_inbound['tag']}")
    
    squad_name = squad_create_data[user_id]['name']
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞: {squad_name}</b>

<b>–®–∞–≥ 2 –∏–∑ 2: –í—ã–±–æ—Ä –∏–Ω–±–∞—É–Ω–¥–æ–≤</b>

<b>–í—ã–±—Ä–∞–Ω–æ –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> {len(selected_inbounds)}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã:</b>
"""
    
    keyboard = []
    
    for i, inbound in enumerate(all_inbounds[:15]):
        is_selected = inbound['uuid'] in selected_inbounds
        emoji = "‚úÖ" if is_selected else "‚òê"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{emoji} {inbound['tag']} ({inbound['type']})",
                callback_data=f"create_tgl_{i}"
            )
        ])
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–∫–≤–∞–¥", callback_data="create_squad_finish")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_squad_create")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@admin_required
@error_handler
async def finish_squad_creation(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    user_id = callback.from_user.id
    
    if user_id not in squad_create_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return
    
    squad_name = squad_create_data[user_id]['name']
    selected_inbounds = list(squad_create_data[user_id]['selected_inbounds'])
    
    if not selected_inbounds:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–±–∞—É–Ω–¥", show_alert=True)
        return
    
    remnawave_service = RemnaWaveService()
    success = await remnawave_service.create_squad(squad_name, selected_inbounds)
    
    if user_id in squad_create_data:
        del squad_create_data[user_id]
    await state.clear()
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–°–∫–≤–∞–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {squad_name}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–±–∞—É–Ω–¥–æ–≤:</b> {len(selected_inbounds)}\n\n"
            f"–°–∫–≤–∞–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤", callback_data="admin_rw_squads")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–∞–Ω–µ–ª–∏ Remnawave", callback_data="admin_remnawave")]
            ])
        )
        await callback.answer("‚úÖ –°–∫–≤–∞–¥ —Å–æ–∑–¥–∞–Ω!")
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–≤–∞–¥–∞</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {squad_name}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –°–∫–≤–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API\n"
            f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤\n"
            f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_squad_create")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∫–≤–∞–¥–∞–º", callback_data="admin_rw_squads")]
            ])
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–≤–∞–¥–∞", show_alert=True)

@admin_required
@error_handler
async def cancel_squad_creation(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    user_id = callback.from_user.id
    
    if user_id in squad_create_data:
        del squad_create_data[user_id]
    await state.clear()
    
    await show_squads_management(callback, db_user, db)


@admin_required
@error_handler
async def restart_all_nodes(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   remnawave_service = RemnaWaveService()
   success = await remnawave_service.restart_all_nodes()
   
   if success:
       await callback.message.edit_text(
           "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
           reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
               [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–æ–¥–∞–º", callback_data="admin_rw_nodes")]
           ])
       )
   else:
       await callback.message.edit_text(
           "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–¥",
           reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
               [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–æ–¥–∞–º", callback_data="admin_rw_nodes")]
           ])
       )
   
   await callback.answer()


@admin_required
@error_handler
async def show_sync_options(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    text = """
üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Remnawave</b>

üîÑ <b>–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤ –±–æ—Ç–µ
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–∞–Ω–µ–ª–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 2-5 –º–∏–Ω—É—Ç

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –í–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–∞–Ω–µ–ª–∏, –±—É–¥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", callback_data="sync_all_users")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def sync_all_users(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    progress_text = """
üîÑ <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...</b>

üìã –≠—Ç–∞–ø—ã:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏ Remnawave
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
"""
    
    await callback.message.edit_text(progress_text, reply_markup=None)
    
    remnawave_service = RemnaWaveService()
    stats = await remnawave_service.sync_users_from_panel(db, "all")
    
    total_operations = stats['created'] + stats['updated'] + stats.get('deleted', 0)
    
    if stats['errors'] == 0:
        status_emoji = "‚úÖ"
        status_text = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    elif stats['errors'] < total_operations:
        status_emoji = "‚ö†Ô∏è"
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
    else:
        status_emoji = "‚ùå"
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    
    text = f"""
{status_emoji} <b>–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {status_text}</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ üÜï –°–æ–∑–¥–∞–Ω–æ: {stats['created']}
‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}  
‚Ä¢ üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('deleted', 0)}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
"""
    
    if stats.get('deleted', 0) > 0:
        text += f"""

üóëÔ∏è <b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ
–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–∞–Ω–µ–ª–∏ Remnawave.
üí∞ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
"""
    
    if stats['errors'] > 0:
        text += f"""

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""
    
    text += f"""

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
"""
    
    keyboard = []
    
    if stats['errors'] > 0:
        keyboard.append([
            types.InlineKeyboardButton(
                text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", 
                callback_data="sync_all_users"
            )
        ])
    
    keyboard.extend([
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_rw_system"),
            types.InlineKeyboardButton(text="üåê –ù–æ–¥—ã", callback_data="admin_rw_nodes")
        ],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_sync_recommendations(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...",
        reply_markup=None
    )
    
    remnawave_service = RemnaWaveService()
    recommendations = await remnawave_service.get_sync_recommendations(db)
    
    priority_emoji = {
        "low": "üü¢",
        "medium": "üü°", 
        "high": "üî¥"
    }
    
    text = f"""
üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>

{priority_emoji.get(recommendations['priority'], 'üü¢')} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {recommendations['priority'].upper()}
‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {recommendations['estimated_time']}

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    
    if recommendations['sync_type'] == 'all':
        text += "üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
    elif recommendations['sync_type'] == 'update_only':
        text += "üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    elif recommendations['sync_type'] == 'new_only':
        text += "üÜï –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö"
    else:
        text += "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    
    text += "\n\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
    for reason in recommendations['reasons']:
        text += f"‚Ä¢ {reason}\n"
    
    keyboard = []
    
    if recommendations['should_sync'] and recommendations['sync_type'] != 'none':
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", 
                callback_data=f"sync_{recommendations['sync_type']}_users" if recommendations['sync_type'] != 'update_only' else "sync_update_data"
            )
        ])
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏", callback_data="admin_rw_sync")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def validate_subscriptions(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫...\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        reply_markup=None
    )
    
    remnawave_service = RemnaWaveService()
    stats = await remnawave_service.validate_and_fix_subscriptions(db)
    
    if stats['errors'] == 0:
        status_emoji = "‚úÖ"
        status_text = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else:
        status_emoji = "‚ö†Ô∏è"
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    
    text = f"""
{status_emoji} <b>–í–∞–ª–∏–¥–∞—Ü–∏—è {status_text}</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['checked']}
‚Ä¢ üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['fixed']}
‚Ä¢ ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {stats['issues_found']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
"""
    
    if stats['fixed'] > 0:
        text += "\n‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        text += "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        text += "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ Remnawave\n" 
        text += "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
    
    if stats['errors'] > 0:
        text += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    keyboard = [
        [types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é", callback_data="sync_validate")],
        [types.InlineKeyboardButton(text="üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="sync_all_users")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="admin_rw_sync")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def cleanup_subscriptions(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üßπ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...\n\n–£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–∞–Ω–µ–ª–∏.",
        reply_markup=None
    )
    
    remnawave_service = RemnaWaveService()
    stats = await remnawave_service.cleanup_orphaned_subscriptions(db)
    
    if stats['errors'] == 0:
        status_emoji = "‚úÖ"
        status_text = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else:
        status_emoji = "‚ö†Ô∏è"
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    
    text = f"""
{status_emoji} <b>–û—á–∏—Å—Ç–∫–∞ {status_text}</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['checked']}
‚Ä¢ üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats['deactivated']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
"""
    
    if stats['deactivated'] > 0:
        text += f"\nüóëÔ∏è <b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        text += f"–û—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ\n"
        text += f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–∞–Ω–µ–ª–∏ Remnawave.\n"
    else:
        text += f"\n‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã!\n–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    if stats['errors'] > 0:
        text += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    keyboard = [
        [types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", callback_data="sync_cleanup")],
        [types.InlineKeyboardButton(text="üîç –í–∞–ª–∏–¥–∞—Ü–∏—è", callback_data="sync_validate")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="admin_rw_sync")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def force_cleanup_all_orphaned_users(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–∞–Ω–µ–ª–∏...\n\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
        "üìä –í–∫–ª—é—á–∞—è: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã, –ø—Ä–æ–º–æ–∫–æ–¥—ã, —Å–µ—Ä–≤–µ—Ä—ã, –±–∞–ª–∞–Ω—Å—ã\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None
    )
    
    remnawave_service = RemnaWaveService()
    stats = await remnawave_service.cleanup_orphaned_subscriptions(db)
    
    if stats['errors'] == 0:
        status_emoji = "‚úÖ"
        status_text = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else:
        status_emoji = "‚ö†Ô∏è"
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
    
    text = f"""
{status_emoji} <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ {status_text}</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['checked']}
‚Ä¢ üóëÔ∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–æ: {stats['deactivated']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
"""
    
    if stats['deactivated'] > 0:
        text += f"""

üóëÔ∏è <b>–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –í–°–ï —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã  
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –°–±—Ä–æ—à–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –∫ –Ω—É–ª—é
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ –°–±—Ä–æ—à–µ–Ω—ã HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Remnawave
‚Ä¢ –û—á–∏—â–µ–Ω—ã Remnawave UUID
"""
    else:
        text += f"\n‚úÖ –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–∞–Ω–µ–ª—å—é."
    
    if stats['errors'] > 0:
        text += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    keyboard = [
        [types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", callback_data="force_cleanup_orphaned")],
        [types.InlineKeyboardButton(text="üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="sync_all_users")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="admin_rw_sync")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def confirm_force_cleanup(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    text = """
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!</b>

üóëÔ∏è <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç:</b>
‚Ä¢ –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–∞–Ω–µ–ª–∏
‚Ä¢ –í–°–ï —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –∏ —Å–≤—è–∑–∏
‚Ä¢ –í–°–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –í–°–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –í–°–ï –±–∞–ª–∞–Ω—Å—ã (—Å–±—Ä–æ—Å –∫ –Ω—É–ª—é)
‚Ä¢ –í–°–ï HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Remnawave
‚Ä¢ –í–°–ï Remnawave UUID –∏ —Å—Å—ã–ª–∫–∏

‚ö° <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
‚Ä¢ –û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç
‚Ä¢ –ù—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å "–º—É—Å–æ—Ä–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏

‚ùì <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="üóëÔ∏è –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –í–°–ï", callback_data="force_cleanup_orphaned")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rw_sync")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def sync_users(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   sync_type = callback.data.split('_')[-2] + "_" + callback.data.split('_')[-1]
   
   progress_text = "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\n\n"
   
   if sync_type == "all_users":
       progress_text += "üìã –¢–∏–ø: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
       progress_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
       progress_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n"
       progress_text += "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
   elif sync_type == "new_users":
       progress_text += "üìã –¢–∏–ø: –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
       progress_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏\n"
   elif sync_type == "update_data":
       progress_text += "üìã –¢–∏–ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
       progress_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ\n"
       progress_text += "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫\n"
   
   progress_text += "\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
   
   await callback.message.edit_text(
       progress_text,
       reply_markup=None
   )
   
   remnawave_service = RemnaWaveService()
   
   sync_map = {
       "all_users": "all",
       "new_users": "new_only", 
       "update_data": "update_only"
   }
   
   stats = await remnawave_service.sync_users_from_panel(db, sync_map.get(sync_type, "all"))
   
   total_operations = stats['created'] + stats['updated'] + stats.get('deleted', 0)
   success_operations = stats['created'] + stats['updated'] + stats.get('deleted', 0)
   
   if stats['errors'] == 0:
       status_emoji = "‚úÖ"
       status_text = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
   elif stats['errors'] < total_operations:
       status_emoji = "‚ö†Ô∏è"
       status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
   else:
       status_emoji = "‚ùå"
       status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
   
   text = f"""
{status_emoji} <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {status_text}</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
"""
   
   if sync_type == "all_users":
       text += f"‚Ä¢ üÜï –°–æ–∑–¥–∞–Ω–æ: {stats['created']}\n"
       text += f"‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n"
       if 'deleted' in stats:
           text += f"‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {stats['deleted']}\n"
       text += f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}\n"
   elif sync_type == "new_users":
       text += f"‚Ä¢ üÜï –°–æ–∑–¥–∞–Ω–æ: {stats['created']}\n"
       text += f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}\n"
       if stats['created'] == 0 and stats['errors'] == 0:
           text += "\nüí° –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
   elif sync_type == "update_data":
       text += f"‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n"
       text += f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}\n"
       if stats['updated'] == 0 and stats['errors'] == 0:
           text += "\nüí° –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã"
   
   if stats['errors'] > 0:
       text += f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
       text += f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.\n"
       text += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
   
   if sync_type == "all_users" and 'deleted' in stats and stats['deleted'] > 0:
       text += f"\nüóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
       text += f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\n"
       text += f"–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–∞–Ω–µ–ª–∏ Remnawave."
   
   text += f"\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
   if sync_type == "all_users":
       text += "‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
       text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
   elif sync_type == "new_users":
       text += "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
       text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏\n"
   elif sync_type == "update_data":
       text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ\n"
       text += "‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
   
   keyboard = []
   
   if stats['errors'] > 0:
       keyboard.append([
           types.InlineKeyboardButton(
               text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", 
               callback_data=callback.data
           )
       ])
   
   if sync_type != "all_users":
       keyboard.append([
           types.InlineKeyboardButton(
               text="üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", 
               callback_data="sync_all_users"
           )
       ])
   
   keyboard.extend([
       [
           types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_rw_system"),
           types.InlineKeyboardButton(text="üåê –ù–æ–¥—ã", callback_data="admin_rw_nodes")
       ],
       [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
   ])
   
   await callback.message.edit_text(
       text,
       reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
   )
   await callback.answer()


@admin_required
@error_handler
async def show_squads_management(
   callback: types.CallbackQuery,
   db_user: User,
   db: AsyncSession
):
   remnawave_service = RemnaWaveService()
   squads = await remnawave_service.get_all_squads()
   
   text = "üåç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–∞–º–∏</b>\n\n"
   keyboard = []
   
   if squads:
       for squad in squads:
           text += f"üîπ <b>{squad['name']}</b>\n"
           text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {squad['members_count']}\n"
           text += f"üì° –ò–Ω–±–∞—É–Ω–¥–æ–≤: {squad['inbounds_count']}\n\n"
           
           keyboard.append([
               types.InlineKeyboardButton(
                   text=f"‚öôÔ∏è {squad['name']}",
                   callback_data=f"admin_squad_manage_{squad['uuid']}"
               )
           ])
   else:
       text += "–°–∫–≤–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
   
   keyboard.extend([
       [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–≤–∞–¥", callback_data="admin_squad_create")],
       [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_remnawave")]
   ])
   
   await callback.message.edit_text(
       text,
       reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
   )
   await callback.answer()


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_remnawave_menu, F.data == "admin_remnawave")
    dp.callback_query.register(show_system_stats, F.data == "admin_rw_system")
    dp.callback_query.register(show_traffic_stats, F.data == "admin_rw_traffic")
    dp.callback_query.register(show_nodes_management, F.data == "admin_rw_nodes")
    dp.callback_query.register(show_node_details, F.data.startswith("admin_node_manage_"))
    dp.callback_query.register(show_node_statistics, F.data.startswith("node_stats_"))
    dp.callback_query.register(manage_node, F.data.startswith("node_enable_"))
    dp.callback_query.register(manage_node, F.data.startswith("node_disable_"))
    dp.callback_query.register(manage_node, F.data.startswith("node_restart_"))
    dp.callback_query.register(restart_all_nodes, F.data == "admin_restart_all_nodes")
    dp.callback_query.register(show_sync_options, F.data == "admin_rw_sync")
    dp.callback_query.register(sync_all_users, F.data == "sync_all_users")
    dp.callback_query.register(show_squad_migration_menu, F.data == "admin_rw_migration")
    dp.callback_query.register(paginate_migration_source, F.data.startswith("admin_migration_source_page_"))
    dp.callback_query.register(handle_migration_source_selection, F.data.startswith("admin_migration_source_"))
    dp.callback_query.register(paginate_migration_target, F.data.startswith("admin_migration_target_page_"))
    dp.callback_query.register(handle_migration_target_selection, F.data.startswith("admin_migration_target_"))
    dp.callback_query.register(change_migration_target, F.data == "admin_migration_change_target")
    dp.callback_query.register(confirm_squad_migration, F.data == "admin_migration_confirm")
    dp.callback_query.register(cancel_squad_migration, F.data == "admin_migration_cancel")
    dp.callback_query.register(handle_migration_page_info, F.data == "admin_migration_page_info")
    dp.callback_query.register(show_squads_management, F.data == "admin_rw_squads")
    dp.callback_query.register(show_squad_details, F.data.startswith("admin_squad_manage_"))
    dp.callback_query.register(manage_squad_action, F.data.startswith("squad_add_users_"))
    dp.callback_query.register(manage_squad_action, F.data.startswith("squad_remove_users_"))
    dp.callback_query.register(manage_squad_action, F.data.startswith("squad_delete_"))
    dp.callback_query.register(show_squad_edit_menu, F.data.startswith("squad_edit_") & ~F.data.startswith("squad_edit_inbounds_"))
    dp.callback_query.register(show_squad_inbounds_selection, F.data.startswith("squad_edit_inbounds_"))
    dp.callback_query.register(show_squad_rename_form, F.data.startswith("squad_rename_"))
    dp.callback_query.register(cancel_squad_rename, F.data.startswith("cancel_rename_"))
    dp.callback_query.register(toggle_squad_inbound, F.data.startswith("sqd_tgl_"))
    dp.callback_query.register(save_squad_inbounds, F.data.startswith("sqd_save_"))
    dp.callback_query.register(show_squad_edit_menu_short, F.data.startswith("sqd_edit_"))
    dp.callback_query.register(start_squad_creation, F.data == "admin_squad_create")
    dp.callback_query.register(cancel_squad_creation, F.data == "cancel_squad_create")
    dp.callback_query.register(toggle_create_inbound, F.data.startswith("create_tgl_"))
    dp.callback_query.register(finish_squad_creation, F.data == "create_squad_finish")
    
    dp.message.register(
        process_squad_new_name, 
        SquadRenameStates.waiting_for_new_name,
        F.text
    )
    
    dp.message.register(
        process_squad_name,
        SquadCreateStates.waiting_for_name,
        F.text
    )
